{"ast":null,"code":"import _objectSpread from \"E:/Aarhat Iserv - E-commerce/new/ariz/Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/Aarhat Iserv - E-commerce/new/ariz/Frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"field\", \"alt\", \"fallbackAlt\", \"imgixParams\", \"widths\", \"pixelDensities\"];\nimport { jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { devMsg } from \"./lib/devMsg.js\";\nimport { imageThumbnail } from './_node_modules/@prismicio/client/dist/helpers/isFilled.js';\nimport { asImageWidthSrcSet } from './_node_modules/@prismicio/client/dist/helpers/asImageWidthSrcSet.js';\nimport { asImagePixelDensitySrcSet } from './_node_modules/@prismicio/client/dist/helpers/asImagePixelDensitySrcSet.js';\nvar PrismicImage = React.forwardRef(function PrismicImage2(_ref, ref) {\n  var field = _ref.field,\n    alt = _ref.alt,\n    fallbackAlt = _ref.fallbackAlt,\n    _ref$imgixParams = _ref.imgixParams,\n    imgixParams = _ref$imgixParams === void 0 ? {} : _ref$imgixParams,\n    widths = _ref.widths,\n    pixelDensities = _ref.pixelDensities,\n    restProps = _objectWithoutProperties(_ref, _excluded);\n  if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n    if (typeof alt === \"string\" && alt !== \"\") {\n      console.warn(\"[PrismicImage] The \\\"alt\\\" prop can only be used to declare an image as decorative by passing an empty string (alt=\\\"\\\") but was provided a non-empty string. You can resolve this warning by removing the \\\"alt\\\" prop or changing it to alt=\\\"\\\". For more details, see \".concat(devMsg(\"alt-must-be-an-empty-string\")));\n    }\n    if (typeof fallbackAlt === \"string\" && fallbackAlt !== \"\") {\n      console.warn(\"[PrismicImage] The \\\"fallbackAlt\\\" prop can only be used to declare an image as decorative by passing an empty string (fallbackAlt=\\\"\\\") but was provided a non-empty string. You can resolve this warning by removing the \\\"fallbackAlt\\\" prop or changing it to fallbackAlt=\\\"\\\". For more details, see \".concat(devMsg(\"alt-must-be-an-empty-string\")));\n    }\n    if (widths && pixelDensities) {\n      console.warn(\"[PrismicImage] Only one of \\\"widths\\\" or \\\"pixelDensities\\\" props can be provided. You can resolve this warning by removing either the \\\"widths\\\" or \\\"pixelDensities\\\" prop. \\\"widths\\\" will be used in this case.\");\n    }\n  }\n  if (imageThumbnail(field)) {\n    var resolvedImgixParams = imgixParams;\n    for (var x in imgixParams) {\n      if (resolvedImgixParams[x] === null) {\n        resolvedImgixParams[x] = void 0;\n      }\n    }\n    var src;\n    var srcSet;\n    if (widths || !pixelDensities) {\n      var res = asImageWidthSrcSet(field, _objectSpread(_objectSpread({}, resolvedImgixParams), {}, {\n        widths: widths === \"defaults\" ? void 0 : widths\n      }));\n      src = res.src;\n      srcSet = res.srcset;\n    } else if (pixelDensities) {\n      var _res = asImagePixelDensitySrcSet(field, _objectSpread(_objectSpread({}, resolvedImgixParams), {}, {\n        pixelDensities: pixelDensities === \"defaults\" ? void 0 : pixelDensities\n      }));\n      src = _res.src;\n      srcSet = _res.srcset;\n    }\n    return /* @__PURE__ */jsx(\"img\", _objectSpread({\n      ref: ref,\n      src: src,\n      srcSet: srcSet,\n      alt: alt !== null && alt !== void 0 ? alt : field.alt || fallbackAlt\n    }, restProps));\n  } else {\n    return null;\n  }\n});\nexport { PrismicImage };","map":{"version":3,"names":["PrismicImage","React","forwardRef","PrismicImage2","_ref","ref","field","alt","fallbackAlt","_ref$imgixParams","imgixParams","widths","pixelDensities","restProps","_objectWithoutProperties","_excluded","process","env","NODE_ENV","console","warn","concat","devMsg","imageThumbnail","resolvedImgixParams","x","src","srcSet","res","asImageWidthSrcSet","_objectSpread","srcset","asImagePixelDensitySrcSet","jsx"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\PrismicImage.tsx"],"sourcesContent":["import * as React from \"react\";\nimport * as prismic from \"@prismicio/client\";\nimport { ImgixURLParams } from \"imgix-url-builder\";\n\nimport { devMsg } from \"./lib/devMsg\";\n\n/**\n * Props for `<PrismicImage>`.\n */\nexport type PrismicImageProps = Omit<\n\tReact.DetailedHTMLProps<\n\t\tReact.ImgHTMLAttributes<HTMLImageElement>,\n\t\tHTMLImageElement\n\t>,\n\t\"src\" | \"srcset\" | \"alt\"\n> & {\n\t/**\n\t * The Prismic Image field or thumbnail to render.\n\t */\n\tfield: prismic.ImageFieldImage | null | undefined;\n\n\t/**\n\t * An object of Imgix URL API parameters to transform the image.\n\t *\n\t * See: https://docs.imgix.com/apis/rendering\n\t */\n\timgixParams?: { [P in keyof ImgixURLParams]: ImgixURLParams[P] | null };\n\n\t/**\n\t * Declare an image as decorative by providing `alt=\"\"`.\n\t *\n\t * See:\n\t * https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt#decorative_images\n\t */\n\talt?: \"\";\n\n\t/**\n\t * Declare an image as decorative only if the Image field does not have\n\t * alternative text by providing `fallbackAlt=\"\"`.\n\t *\n\t * See:\n\t * https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt#decorative_images\n\t */\n\tfallbackAlt?: \"\";\n} & (\n\t\t| {\n\t\t\t\t/**\n\t\t\t\t * Widths used to build a `srcset` value for the Image field.\n\t\t\t\t *\n\t\t\t\t * If a `widths` prop is not given or `\"defaults\"` is passed, the\n\t\t\t\t * following widths will be used: 640, 750, 828, 1080, 1200, 1920, 2048,\n\t\t\t\t * 3840.\n\t\t\t\t *\n\t\t\t\t * If the Image field contains responsive views, each responsive view\n\t\t\t\t * can be used as a width in the resulting `srcset` by passing\n\t\t\t\t * `\"thumbnails\"` as the `widths` prop.\n\t\t\t\t */\n\t\t\t\twidths?:\n\t\t\t\t\t| NonNullable<\n\t\t\t\t\t\t\tParameters<typeof prismic.asImageWidthSrcSet>[1]\n\t\t\t\t\t  >[\"widths\"]\n\t\t\t\t\t| \"defaults\";\n\t\t\t\t/**\n\t\t\t\t * Not used when the `widths` prop is used.\n\t\t\t\t */\n\t\t\t\tpixelDensities?: never;\n\t\t  }\n\t\t| {\n\t\t\t\t/**\n\t\t\t\t * Not used when the `widths` prop is used.\n\t\t\t\t */\n\t\t\t\twidths?: never;\n\t\t\t\t/**\n\t\t\t\t * Pixel densities used to build a `srcset` value for the Image field.\n\t\t\t\t *\n\t\t\t\t * If a `pixelDensities` prop is passed `\"defaults\"`, the following\n\t\t\t\t * pixel densities will be used: 1, 2, 3.\n\t\t\t\t */\n\t\t\t\tpixelDensities:\n\t\t\t\t\t| NonNullable<\n\t\t\t\t\t\t\tParameters<typeof prismic.asImagePixelDensitySrcSet>[1]\n\t\t\t\t\t  >[\"pixelDensities\"]\n\t\t\t\t\t| \"defaults\";\n\t\t  }\n\t);\n\n/**\n * React component that renders an image from a Prismic Image field or one of\n * its thumbnails. It will automatically set the `alt` attribute using the Image\n * field's `alt` property.\n *\n * By default, a widths-based srcset will be used to support responsive images.\n * This ensures only the smallest image needed for a browser is downloaded.\n *\n * To use a pixel-density-based srcset, use the `pixelDensities` prop. Default\n * pixel densities can be used by using `pixelDensities=\"defaults\"`.\n *\n * **Note**: If you are using a framework that has a native image component,\n * such as Next.js and Gatsby, prefer using those image components instead. They\n * can provide deeper framework integration than `<PrismicImage>`.\n *\n * @param props - Props for the component.\n *\n * @returns A responsive image component for the given Image field.\n */\nexport const PrismicImage = React.forwardRef(function PrismicImage(\n\t{\n\t\tfield,\n\t\talt,\n\t\tfallbackAlt,\n\t\timgixParams = {},\n\t\twidths,\n\t\tpixelDensities,\n\t\t...restProps\n\t}: PrismicImageProps,\n\tref: React.ForwardedRef<HTMLImageElement>,\n): JSX.Element | null {\n\tif (\n\t\ttypeof process !== \"undefined\" &&\n\t\tprocess.env.NODE_ENV === \"development\"\n\t) {\n\t\tif (typeof alt === \"string\" && alt !== \"\") {\n\t\t\tconsole.warn(\n\t\t\t\t`[PrismicImage] The \"alt\" prop can only be used to declare an image as decorative by passing an empty string (alt=\"\") but was provided a non-empty string. You can resolve this warning by removing the \"alt\" prop or changing it to alt=\"\". For more details, see ${devMsg(\n\t\t\t\t\t\"alt-must-be-an-empty-string\",\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\n\t\tif (typeof fallbackAlt === \"string\" && fallbackAlt !== \"\") {\n\t\t\tconsole.warn(\n\t\t\t\t`[PrismicImage] The \"fallbackAlt\" prop can only be used to declare an image as decorative by passing an empty string (fallbackAlt=\"\") but was provided a non-empty string. You can resolve this warning by removing the \"fallbackAlt\" prop or changing it to fallbackAlt=\"\". For more details, see ${devMsg(\n\t\t\t\t\t\"alt-must-be-an-empty-string\",\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\n\t\tif (widths && pixelDensities) {\n\t\t\tconsole.warn(\n\t\t\t\t`[PrismicImage] Only one of \"widths\" or \"pixelDensities\" props can be provided. You can resolve this warning by removing either the \"widths\" or \"pixelDensities\" prop. \"widths\" will be used in this case.`,\n\t\t\t);\n\t\t}\n\t}\n\n\tif (prismic.isFilled.imageThumbnail(field)) {\n\t\tconst resolvedImgixParams = imgixParams;\n\t\tfor (const x in imgixParams) {\n\t\t\tif (resolvedImgixParams[x as keyof typeof resolvedImgixParams] === null) {\n\t\t\t\tresolvedImgixParams[x as keyof typeof resolvedImgixParams] = undefined;\n\t\t\t}\n\t\t}\n\n\t\tlet src: string | undefined;\n\t\tlet srcSet: string | undefined;\n\n\t\tif (widths || !pixelDensities) {\n\t\t\tconst res = prismic.asImageWidthSrcSet(field, {\n\t\t\t\t...resolvedImgixParams,\n\t\t\t\twidths: widths === \"defaults\" ? undefined : widths,\n\t\t\t} as ImgixURLParams);\n\n\t\t\tsrc = res.src;\n\t\t\tsrcSet = res.srcset;\n\t\t} else if (pixelDensities) {\n\t\t\tconst res = prismic.asImagePixelDensitySrcSet(field, {\n\t\t\t\t...resolvedImgixParams,\n\t\t\t\tpixelDensities:\n\t\t\t\t\tpixelDensities === \"defaults\" ? undefined : pixelDensities,\n\t\t\t} as ImgixURLParams);\n\n\t\t\tsrc = res.src;\n\t\t\tsrcSet = res.srcset;\n\t\t}\n\n\t\treturn (\n\t\t\t<img\n\t\t\t\tref={ref}\n\t\t\t\tsrc={src}\n\t\t\t\tsrcSet={srcSet}\n\t\t\t\talt={alt ?? (field.alt || fallbackAlt)}\n\t\t\t\t{...restProps}\n\t\t\t/>\n\t\t);\n\t} else {\n\t\treturn null;\n\t}\n});\n"],"mappings":";;;;;;;;;AAyGO,IAAMA,YAAA,GAAeC,KAAA,CAAMC,UAAA,CAAW,SAASC,cAAAC,IAAA,EAUrDC,GAAA,EAAyC;EAAA,IARxCC,KAAA,GAAAF,IAAA,CAAAE,KAAA;IACAC,GAAA,GAAAH,IAAA,CAAAG,GAAA;IACAC,WAAA,GAAAJ,IAAA,CAAAI,WAAA;IAAAC,gBAAA,GAAAL,IAAA,CACAM,WAAA;IAAAA,WAAA,GAAAD,gBAAA,cAAc,CACd,IAAAA,gBAAA;IAAAE,MAAA,GAAAP,IAAA,CAAAO,MAAA;IACAC,cAAA,GAAAR,IAAA,CAAAQ,cAAA;IACGC,SAAA,GAAAC,wBAAA,CAAAV,IAAA,EAAAW,SAAA;EAIJ,IACC,OAAOC,OAAA,KAAY,eACnBA,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa,eACxB;IACD,IAAI,OAAOX,GAAA,KAAQ,YAAYA,GAAA,KAAQ,IAAI;MAC1CY,OAAA,CAAQC,IAAA,8QAAAC,MAAA,CAC8PC,MAAA,CACpQ,6BAA6B,EAC3B;IAEJ;IAED,IAAI,OAAOd,WAAA,KAAgB,YAAYA,WAAA,KAAgB,IAAI;MAC1DW,OAAA,CAAQC,IAAA,8SAAAC,MAAA,CAC8RC,MAAA,CACpS,6BAA6B,EAC3B;IAEJ;IAED,IAAIX,MAAA,IAAUC,cAAA,EAAgB;MAC7BO,OAAA,CAAQC,IAAA,sNACoM;IAE5M;EACD;EAED,IAAIG,cAAA,CAAgCjB,KAAK,GAAG;IAC3C,IAAMkB,mBAAA,GAAsBd,WAAA;IAC5B,SAAWe,CAAA,IAAKf,WAAA,EAAa;MACxB,IAAAc,mBAAA,CAAoBC,CAAqC,MAAM,MAAM;QACxED,mBAAA,CAAoBC,CAAqC,IAAI;MAC7D;IACD;IAEG,IAAAC,GAAA;IACA,IAAAC,MAAA;IAEA,IAAAhB,MAAA,IAAU,CAACC,cAAA,EAAgB;MACxB,IAAAgB,GAAA,GAAMC,kBAAA,CAA2BvB,KAAA,EAAAwB,aAAA,CAAAA,aAAA,KACnCN,mBAAA;QACHb,MAAA,EAAQA,MAAA,KAAW,aAAa,SAAYA;MAAA,EAC1B;MAEnBe,GAAA,GAAME,GAAA,CAAIF,GAAA;MACVC,MAAA,GAASC,GAAA,CAAIG,MAAA;IAAA,WACHnB,cAAA,EAAgB;MACpB,IAAAgB,IAAA,GAAMI,yBAAA,CAAkC1B,KAAA,EAAAwB,aAAA,CAAAA,aAAA,KAC1CN,mBAAA;QACHZ,cAAA,EACCA,cAAA,KAAmB,aAAa,SAAYA;MAAA,EAC3B;MAEnBc,GAAA,GAAME,IAAA,CAAIF,GAAA;MACVC,MAAA,GAASC,IAAA,CAAIG,MAAA;IACb;IAGA,sBAAAE,GAAA,CAAC,OAAAH,aAAA;MACAzB,GAAA,EAAAA,GAAA;MACAqB,GAAA,EAAAA,GAAA;MACAC,MAAA,EAAAA,MAAA;MACApB,GAAA,EAAKA,GAAA,aAAAA,GAAA,cAAAA,GAAA,GAAQD,KAAA,CAAMC,GAAA,IAAOC;IAAA,GACtBK,SAAA,CAAU;EAAA,OAGV;IACC;EACP;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}