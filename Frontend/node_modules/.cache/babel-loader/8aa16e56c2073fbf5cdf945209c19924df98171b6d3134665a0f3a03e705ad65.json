{"ast":null,"code":"import { LinkType } from \"../types/value/link.js\";\nimport { RichTextNodeType } from \"../types/value/richText.js\";\nimport { asLink } from \"../helpers/asLink.js\";\nimport { escapeHTML } from \"./escapeHTML.js\";\nvar getLabel = function getLabel(node) {\n  return \"data\" in node && \"label\" in node.data ? \" class=\\\"\".concat(node.data.label, \"\\\"\") : \"\";\n};\nvar serializeStandardTag = function serializeStandardTag(tag, node, children) {\n  return \"<\".concat(tag).concat(getLabel(node), \">\").concat(children.join(\"\"), \"</\").concat(tag, \">\");\n};\nvar serializePreFormatted = function serializePreFormatted(node) {\n  return \"<pre\".concat(getLabel(node), \">\").concat(escapeHTML(node.text), \"</pre>\");\n};\nvar serializeImage = function serializeImage(linkResolver, node) {\n  var imageTag = \"<img src=\\\"\".concat(node.url, \"\\\" alt=\\\"\").concat(escapeHTML(node.alt), \"\\\"\").concat(node.copyright ? \" copyright=\\\"\".concat(escapeHTML(node.copyright), \"\\\"\") : \"\", \" />\");\n  if (node.linkTo) {\n    imageTag = serializeHyperlink(linkResolver, {\n      type: RichTextNodeType.hyperlink,\n      data: node.linkTo,\n      start: 0,\n      end: 0\n    }, [imageTag]);\n  }\n  return \"<p class=\\\"block-img\\\">\".concat(imageTag, \"</p>\");\n};\nvar serializeEmbed = function serializeEmbed(node) {\n  return \"<div data-oembed=\\\"\".concat(node.oembed.embed_url, \"\\\" data-oembed-type=\\\"\").concat(node.oembed.type, \"\\\" data-oembed-provider=\\\"\").concat(node.oembed.provider_name, \"\\\"\").concat(getLabel(node), \">\").concat(node.oembed.html, \"</div>\");\n};\nvar serializeHyperlink = function serializeHyperlink(linkResolver, node, children) {\n  switch (node.data.link_type) {\n    case LinkType.Web:\n      {\n        return \"<a href=\\\"\".concat(escapeHTML(node.data.url), \"\\\" \").concat(node.data.target ? \"target=\\\"\".concat(node.data.target, \"\\\" \") : \"\", \"rel=\\\"noopener noreferrer\\\"\").concat(getLabel(node), \">\").concat(children.join(\"\"), \"</a>\");\n      }\n    case LinkType.Document:\n      {\n        return \"<a href=\\\"\".concat(asLink(node.data, linkResolver), \"\\\"\").concat(getLabel(node), \">\").concat(children.join(\"\"), \"</a>\");\n      }\n    case LinkType.Media:\n      {\n        return \"<a href=\\\"\".concat(node.data.url, \"\\\"\").concat(getLabel(node), \">\").concat(children.join(\"\"), \"</a>\");\n      }\n  }\n};\nvar serializeSpan = function serializeSpan(content) {\n  return content ? escapeHTML(content).replace(/\\n/g, \"<br />\") : \"\";\n};\nexport { getLabel, serializeEmbed, serializeHyperlink, serializeImage, serializePreFormatted, serializeSpan, serializeStandardTag };","map":{"version":3,"names":["getLabel","node","data","concat","label","serializeStandardTag","tag","children","join","serializePreFormatted","escapeHTML","text","serializeImage","linkResolver","imageTag","url","alt","copyright","linkTo","serializeHyperlink","type","RichTextNodeType","hyperlink","start","end","serializeEmbed","oembed","embed_url","provider_name","html","link_type","LinkType","Web","target","Document","asLink","Media","serializeSpan","content","replace"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\lib\\serializerHelpers.ts"],"sourcesContent":["import { LinkType } from \"../types/value/link\";\nimport {\n\tRTBlockNode,\n\tRTEmbedNode,\n\tRTImageNode,\n\tRTInlineNode,\n\tRTLinkNode,\n\tRTPreformattedNode,\n\tRichTextNodeType,\n} from \"../types/value/richText\";\n\nimport { LinkResolverFunction, asLink } from \"../helpers/asLink\";\n\nimport { escapeHTML } from \"./escapeHTML\";\n\nexport const getLabel = (node: RTBlockNode | RTInlineNode): string => {\n\treturn \"data\" in node && \"label\" in node.data\n\t\t? ` class=\"${node.data.label}\"`\n\t\t: \"\";\n};\n\nexport const serializeStandardTag = (\n\ttag: string,\n\tnode: RTBlockNode | RTInlineNode,\n\tchildren: string[],\n): string => {\n\treturn `<${tag}${getLabel(node)}>${children.join(\"\")}</${tag}>`;\n};\n\nexport const serializePreFormatted = (node: RTPreformattedNode): string => {\n\treturn `<pre${getLabel(node)}>${escapeHTML(node.text)}</pre>`;\n};\n\nexport const serializeImage = (\n\tlinkResolver:\n\t\t| LinkResolverFunction<string | null | undefined>\n\t\t| undefined\n\t\t| null,\n\tnode: RTImageNode,\n): string => {\n\tlet imageTag = `<img src=\"${node.url}\" alt=\"${escapeHTML(node.alt)}\"${\n\t\tnode.copyright ? ` copyright=\"${escapeHTML(node.copyright)}\"` : \"\"\n\t} />`;\n\n\t// If the image has a link, we wrap it with an anchor tag\n\tif (node.linkTo) {\n\t\timageTag = serializeHyperlink(\n\t\t\tlinkResolver,\n\t\t\t{\n\t\t\t\ttype: RichTextNodeType.hyperlink,\n\t\t\t\tdata: node.linkTo,\n\t\t\t\tstart: 0,\n\t\t\t\tend: 0,\n\t\t\t},\n\t\t\t[imageTag],\n\t\t);\n\t}\n\n\treturn `<p class=\"block-img\">${imageTag}</p>`;\n};\n\nexport const serializeEmbed = (node: RTEmbedNode): string => {\n\treturn `<div data-oembed=\"${node.oembed.embed_url}\" data-oembed-type=\"${\n\t\tnode.oembed.type\n\t}\" data-oembed-provider=\"${node.oembed.provider_name}\"${getLabel(node)}>${\n\t\tnode.oembed.html\n\t}</div>`;\n};\n\nexport const serializeHyperlink = (\n\tlinkResolver:\n\t\t| LinkResolverFunction<string | null | undefined>\n\t\t| undefined\n\t\t| null,\n\tnode: RTLinkNode,\n\tchildren: string[],\n): string => {\n\tswitch (node.data.link_type) {\n\t\tcase LinkType.Web: {\n\t\t\treturn `<a href=\"${escapeHTML(node.data.url)}\" ${\n\t\t\t\tnode.data.target ? `target=\"${node.data.target}\" ` : \"\"\n\t\t\t}rel=\"noopener noreferrer\"${getLabel(node)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Document: {\n\t\t\treturn `<a href=\"${asLink(node.data, linkResolver)}\"${getLabel(\n\t\t\t\tnode,\n\t\t\t)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Media: {\n\t\t\treturn `<a href=\"${node.data.url}\"${getLabel(node)}>${children.join(\n\t\t\t\t\"\",\n\t\t\t)}</a>`;\n\t\t}\n\t}\n};\n\nexport const serializeSpan = (content?: string): string => {\n\treturn content ? escapeHTML(content).replace(/\\n/g, \"<br />\") : \"\";\n};\n"],"mappings":";;;;AAea,IAAAA,QAAA,GAAW,SAAXA,SAAYC,IAAA,EAA4C;EAC7D,iBAAUA,IAAA,IAAQ,WAAWA,IAAA,CAAKC,IAAA,eAAAC,MAAA,CAC3BF,IAAA,CAAKC,IAAA,CAAKE,KAAA,UACrB;AACJ;AAEO,IAAMC,oBAAA,GAAuB,SAAvBA,qBACZC,GAAA,EACAL,IAAA,EACAM,QAAA,EACW;EACJ,WAAAJ,MAAA,CAAIG,GAAA,EAAAH,MAAA,CAAMH,QAAA,CAASC,IAAI,QAAAE,MAAA,CAAKI,QAAA,CAASC,IAAA,CAAK,EAAE,SAAAL,MAAA,CAAMG,GAAA;AAC1D;AAEa,IAAAG,qBAAA,GAAwB,SAAxBA,sBAAyBR,IAAA,EAAoC;EACzE,cAAAE,MAAA,CAAcH,QAAA,CAASC,IAAI,QAAAE,MAAA,CAAKO,UAAA,CAAWT,IAAA,CAAKU,IAAI;AACrD;AAEa,IAAAC,cAAA,GAAiB,SAAjBA,eACZC,YAAA,EAIAZ,IAAA,EACW;EACX,IAAIa,QAAA,iBAAAX,MAAA,CAAwBF,IAAA,CAAKc,GAAA,eAAAZ,MAAA,CAAaO,UAAA,CAAWT,IAAA,CAAKe,GAAG,SAAAb,MAAA,CAChEF,IAAA,CAAKgB,SAAA,mBAAAd,MAAA,CAA2BO,UAAA,CAAWT,IAAA,CAAKgB,SAAS,WAAO;EAIjE,IAAIhB,IAAA,CAAKiB,MAAA,EAAQ;IAChBJ,QAAA,GAAWK,kBAAA,CACVN,YAAA,EACA;MACCO,IAAA,EAAMC,gBAAA,CAAiBC,SAAA;MACvBpB,IAAA,EAAMD,IAAA,CAAKiB,MAAA;MACXK,KAAA,EAAO;MACPC,GAAA,EAAK;IAAA,GAEN,CAACV,QAAQ,CAAC;EAEX;EAED,iCAAAX,MAAA,CAA+BW,QAAA;AAChC;AAEa,IAAAW,cAAA,GAAiB,SAAjBA,eAAkBxB,IAAA,EAA6B;EAC3D,6BAAAE,MAAA,CAA4BF,IAAA,CAAKyB,MAAA,CAAOC,SAAA,4BAAAxB,MAAA,CACvCF,IAAA,CAAKyB,MAAA,CAAON,IAAA,gCAAAjB,MAAA,CACcF,IAAA,CAAKyB,MAAA,CAAOE,aAAA,QAAAzB,MAAA,CAAiBH,QAAA,CAASC,IAAI,QAAAE,MAAA,CACpEF,IAAA,CAAKyB,MAAA,CAAOG,IAAA;AAEd;AAEO,IAAMV,kBAAA,GAAqB,SAArBA,mBACZN,YAAA,EAIAZ,IAAA,EACAM,QAAA,EACW;EACH,QAAAN,IAAA,CAAKC,IAAA,CAAK4B,SAAA;IACjB,KAAKC,QAAA,CAASC,GAAA;MAAK;QAClB,oBAAA7B,MAAA,CAAmBO,UAAA,CAAWT,IAAA,CAAKC,IAAA,CAAKa,GAAG,UAAAZ,MAAA,CAC1CF,IAAA,CAAKC,IAAA,CAAK+B,MAAA,eAAA9B,MAAA,CAAoBF,IAAA,CAAKC,IAAA,CAAK+B,MAAA,WAAa,mCAAA9B,MAAA,CAC1BH,QAAA,CAASC,IAAI,QAAAE,MAAA,CAAKI,QAAA,CAASC,IAAA,CAAK,EAAE;MAC9D;IAED,KAAKuB,QAAA,CAASG,QAAA;MAAU;QAChB,oBAAA/B,MAAA,CAAYgC,MAAA,CAAOlC,IAAA,CAAKC,IAAA,EAAMW,YAAY,SAAAV,MAAA,CAAKH,QAAA,CACrDC,IAAI,QAAAE,MAAA,CACAI,QAAA,CAASC,IAAA,CAAK,EAAE;MACrB;IAED,KAAKuB,QAAA,CAASK,KAAA;MAAO;QACb,oBAAAjC,MAAA,CAAYF,IAAA,CAAKC,IAAA,CAAKa,GAAA,QAAAZ,MAAA,CAAOH,QAAA,CAASC,IAAI,QAAAE,MAAA,CAAKI,QAAA,CAASC,IAAA,CAC9D,EAAE;MAEH;EACD;AACF;AAEa,IAAA6B,aAAA,GAAgB,SAAhBA,cAAiBC,OAAA,EAA4B;EACzD,OAAOA,OAAA,GAAU5B,UAAA,CAAW4B,OAAO,EAAEC,OAAA,CAAQ,OAAO,QAAQ,IAAI;AACjE"},"metadata":{},"sourceType":"module","externalDependencies":[]}