{"ast":null,"code":"import { PrismicError } from \"./errors/PrismicError.js\";\nvar getRepositoryName = function getRepositoryName(repositoryEndpoint) {\n  try {\n    return new URL(repositoryEndpoint).hostname.split(\".\")[0];\n  } catch (_unused) {\n    throw new PrismicError(\"An invalid Prismic Rest API V2 endpoint was provided: \".concat(repositoryEndpoint), void 0, void 0);\n  }\n};\nexport { getRepositoryName };","map":{"version":3,"names":["getRepositoryName","repositoryEndpoint","URL","hostname","split","_unused","PrismicError","concat"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\getRepositoryName.ts"],"sourcesContent":["import { PrismicError } from \"./errors/PrismicError\";\n\n/**\n * Get a Prismic repository's name from its standard Prismic Rest API V2 or\n * GraphQL endpoint.\n *\n * @typeParam RepositoryEndpoint - Prismic Rest API V2 endpoint for the\n *   repository.\n * @param repositoryEndpoint - Prismic Rest API V2 endpoint for the repository.\n *\n * @returns The Prismic repository's name.\n *\n * @throws {@link Error} Thrown if an invalid Prismic Rest API V2 endpoint is\n *   provided.\n */\nexport const getRepositoryName = (repositoryEndpoint: string): string => {\n\ttry {\n\t\treturn new URL(repositoryEndpoint).hostname.split(\".\")[0];\n\t} catch {\n\t\tthrow new PrismicError(\n\t\t\t`An invalid Prismic Rest API V2 endpoint was provided: ${repositoryEndpoint}`,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t);\n\t}\n};\n"],"mappings":";AAea,IAAAA,iBAAA,GAAoB,SAApBA,kBAAqBC,kBAAA,EAAsC;EACnE;IACI,WAAIC,GAAA,CAAID,kBAAkB,EAAEE,QAAA,CAASC,KAAA,CAAM,GAAG,EAAE,CAAC;EAAA,SAAAC,OAAA,EACvD;IACD,MAAM,IAAIC,YAAA,0DAAAC,MAAA,CACgDN,kBAAA,GACzD,QACA,MAAS;EAEV;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}