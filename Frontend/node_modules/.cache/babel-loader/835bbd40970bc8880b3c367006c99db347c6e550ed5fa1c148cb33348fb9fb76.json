{"ast":null,"code":"import { PrismicError } from \"./errors/PrismicError.js\";\nimport { isRepositoryName } from \"./isRepositoryName.js\";\nvar getRepositoryEndpoint = function getRepositoryEndpoint(repositoryName) {\n  if (isRepositoryName(repositoryName)) {\n    return \"https://\".concat(repositoryName, \".cdn.prismic.io/api/v2\");\n  } else {\n    throw new PrismicError(\"An invalid Prismic repository name was given: \".concat(repositoryName), void 0, void 0);\n  }\n};\nexport { getRepositoryEndpoint };","map":{"version":3,"names":["getRepositoryEndpoint","repositoryName","isRepositoryName","concat","PrismicError"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\getRepositoryEndpoint.ts"],"sourcesContent":["import { PrismicError } from \"./errors/PrismicError\";\n\nimport { isRepositoryName } from \"./isRepositoryName\";\n\n/**\n * Get a repository's Prismic Rest API V2 endpoint.\n *\n * @typeParam RepositoryName - Name of the Prismic repository.\n *\n * @param repositoryName - Name of the repository.\n *\n * @returns The repository's Prismic Rest API V2 endpoint\n *\n * @throws {@link Error} Thrown if an invalid repository name is provided.\n */\nexport const getRepositoryEndpoint = <RepositoryName extends string>(\n\trepositoryName: RepositoryName,\n): `https://${RepositoryName}.cdn.prismic.io/api/v2` => {\n\tif (isRepositoryName(repositoryName)) {\n\t\treturn `https://${repositoryName}.cdn.prismic.io/api/v2` as const;\n\t} else {\n\t\tthrow new PrismicError(\n\t\t\t`An invalid Prismic repository name was given: ${repositoryName}`,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t);\n\t}\n};\n"],"mappings":";;AAea,IAAAA,qBAAA,GAAwB,SAAxBA,sBACZC,cAAA,EACsD;EAClD,IAAAC,gBAAA,CAAiBD,cAAc,GAAG;IACrC,kBAAAE,MAAA,CAAkBF,cAAA;EAAA,OACZ;IACN,MAAM,IAAIG,YAAA,kDAAAD,MAAA,CACwCF,cAAA,GACjD,QACA,MAAS;EAEV;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}