{"ast":null,"code":"import _objectSpread from \"E:/Aarhat Iserv - E-commerce/new/ariz/Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"E:/Aarhat Iserv - E-commerce/new/ariz/Frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"E:/Aarhat Iserv - E-commerce/new/ariz/Frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"widths\"],\n  _excluded2 = [\"url\", \"dimensions\", \"alt\", \"copyright\"];\nimport { buildURL, buildWidthSrcSet } from \"../../../../imgix-url-builder/dist/index.js\";\nimport { imageThumbnail } from \"./isFilled.js\";\nvar DEFAULT_WIDTHS = [640, 828, 1200, 2048, 3840];\nvar asImageWidthSrcSet = function asImageWidthSrcSet(field) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (field && imageThumbnail(field)) {\n    var _config$widths = config.widths,\n      widths = _config$widths === void 0 ? DEFAULT_WIDTHS : _config$widths,\n      imgixParams = _objectWithoutProperties(config, _excluded);\n    var url = field.url,\n      dimensions = field.dimensions,\n      _alt = field.alt,\n      _copyright = field.copyright,\n      responsiveViews = _objectWithoutProperties(field, _excluded2);\n    var responsiveViewObjects = Object.values(responsiveViews);\n    if (widths === \"thumbnails\" && responsiveViewObjects.length < 1) {\n      widths = DEFAULT_WIDTHS;\n    }\n    return {\n      src: buildURL(url, imgixParams),\n      srcset:\n      // By this point, we know `widths` can only be\n      // `\"thubmanils\"` if the field has thumbnails.\n      widths === \"thumbnails\" ? [buildWidthSrcSet(url, _objectSpread(_objectSpread({}, imgixParams), {}, {\n        widths: [dimensions.width]\n      }))].concat(_toConsumableArray(responsiveViewObjects.map(function (thumbnail) {\n        return buildWidthSrcSet(thumbnail.url, _objectSpread(_objectSpread({}, imgixParams), {}, {\n          widths: [thumbnail.dimensions.width]\n        }));\n      }))).join(\", \") : buildWidthSrcSet(field.url, _objectSpread(_objectSpread({}, imgixParams), {}, {\n        widths: widths\n      }))\n    };\n  } else {\n    return null;\n  }\n};\nexport { asImageWidthSrcSet };","map":{"version":3,"names":["DEFAULT_WIDTHS","asImageWidthSrcSet","field","config","arguments","length","undefined","imageThumbnail","_config$widths","widths","imgixParams","_objectWithoutProperties","_excluded","url","dimensions","_alt","alt","_copyright","copyright","responsiveViews","_excluded2","responsiveViewObjects","Object","values","src","buildURL","srcset","buildWidthSrcSet","_objectSpread","width","concat","_toConsumableArray","map","thumbnail","join"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\react\\node_modules\\@prismicio\\client\\dist\\helpers\\asImageWidthSrcSet.js"],"sourcesContent":["import { buildURL, buildWidthSrcSet } from \"imgix-url-builder\";\nimport { imageThumbnail } from \"./isFilled.js\";\nconst DEFAULT_WIDTHS = [640, 828, 1200, 2048, 3840];\nconst asImageWidthSrcSet = (field, config = {}) => {\n  if (field && imageThumbnail(field)) {\n    let {\n      widths = DEFAULT_WIDTHS,\n      // eslint-disable-next-line prefer-const\n      ...imgixParams\n    } = config;\n    const { url, dimensions, alt: _alt, copyright: _copyright, ...responsiveViews } = field;\n    const responsiveViewObjects = Object.values(responsiveViews);\n    if (widths === \"thumbnails\" && responsiveViewObjects.length < 1) {\n      widths = DEFAULT_WIDTHS;\n    }\n    return {\n      src: buildURL(url, imgixParams),\n      srcset: (\n        // By this point, we know `widths` can only be\n        // `\"thubmanils\"` if the field has thumbnails.\n        widths === \"thumbnails\" ? [\n          buildWidthSrcSet(url, {\n            ...imgixParams,\n            widths: [dimensions.width]\n          }),\n          ...responsiveViewObjects.map((thumbnail) => {\n            return buildWidthSrcSet(thumbnail.url, {\n              ...imgixParams,\n              widths: [thumbnail.dimensions.width]\n            });\n          })\n        ].join(\", \") : buildWidthSrcSet(field.url, {\n          ...imgixParams,\n          widths\n        })\n      )\n    };\n  } else {\n    return null;\n  }\n};\nexport {\n  asImageWidthSrcSet\n};\n//# sourceMappingURL=asImageWidthSrcSet.js.map\n"],"mappings":";;;;;;;AAEA,IAAMA,cAAA,GAAiB,CAAC,KAAK,KAAK,MAAM,MAAM,IAAI;AAC7C,IAACC,kBAAA,GAAqB,SAArBA,mBAAsBC,KAAA,EAAuB;EAAA,IAAhBC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAS;EAC1C,IAAIF,KAAA,IAASK,cAAA,CAAeL,KAAK,GAAG;IAClC,IAAAM,cAAA,GAIIL,MAAA,CAHFM,MAAA;MAAAA,MAAA,GAAAD,cAAA,cAASR,cAAA,GAAAQ,cAAA;MAENE,WAAA,GAAAC,wBAAA,CACDR,MAAA,EAAAS,SAAA;IACJ,IAAQC,GAAA,GAA0EX,KAAA,CAA1EW,GAAA;MAAKC,UAAA,GAAqEZ,KAAA,CAArEY,UAAA;MAAiBC,IAAA,GAAoDb,KAAA,CAAzDc,GAAA;MAAsBC,UAAA,GAAmCf,KAAA,CAA9CgB,SAAA;MAA0BC,eAAA,GAAAR,wBAAA,CAAoBT,KAAA,EAAAkB,UAAA;IAClF,IAAMC,qBAAA,GAAwBC,MAAA,CAAOC,MAAA,CAAOJ,eAAe;IAC3D,IAAIV,MAAA,KAAW,gBAAgBY,qBAAA,CAAsBhB,MAAA,GAAS,GAAG;MAC/DI,MAAA,GAAST,cAAA;IACV;IACD,OAAO;MACLwB,GAAA,EAAKC,QAAA,CAASZ,GAAA,EAAKH,WAAW;MAC9BgB,MAAA;MAAA;MAAA;MAGEjB,MAAA,KAAW,eAAe,CACxBkB,gBAAA,CAAiBd,GAAA,EAAAe,aAAA,CAAAA,aAAA,KACZlB,WAAA;QACHD,MAAA,EAAQ,CAACK,UAAA,CAAWe,KAAK;MAAA,EAC1B,GAAAC,MAAA,CAAAC,kBAAA,CACEV,qBAAA,CAAsBW,GAAA,CAAI,UAACC,SAAA,EAAc;QAC1C,OAAON,gBAAA,CAAiBM,SAAA,CAAUpB,GAAA,EAAAe,aAAA,CAAAA,aAAA,KAC7BlB,WAAA;UACHD,MAAA,EAAQ,CAACwB,SAAA,CAAUnB,UAAA,CAAWe,KAAK;QAAA,EACpC;MACb,CAAW,IACDK,IAAA,CAAK,IAAI,IAAIP,gBAAA,CAAiBzB,KAAA,CAAMW,GAAA,EAAAe,aAAA,CAAAA,aAAA,KACjClB,WAAA;QACHD,MAAA,EAAAA;MAAA,EACD;IAET;EACA,OAAS;IACL,OAAO;EACR;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}