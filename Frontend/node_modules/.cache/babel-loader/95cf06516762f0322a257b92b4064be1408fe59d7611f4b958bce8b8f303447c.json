{"ast":null,"code":"const asText = function (richTextField) {\n  let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \" \";\n  let result = \"\";\n  for (let i = 0; i < richTextField.length; i++) {\n    if (\"text\" in richTextField[i]) {\n      result += (result ? separator : \"\") + richTextField[i].text;\n    }\n  }\n  return result;\n};\nexport { asText };","map":{"version":3,"names":["asText","richTextField","separator","arguments","length","undefined","result","i","text"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\asText.ts"],"sourcesContent":["import { RichTextField, RTTextNode } from \"@prismicio/types\";\n\n/**\n * Serializes a rich text or title field to a plain text string\n *\n * @param richTextField - A rich text or title field from Prismic\n * @param separator - Separator used to join each element, defaults to a space\n *\n * @returns Plain text equivalent of the provided rich text or title field\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}\n */\nexport const asText = (\n\trichTextField: RichTextField,\n\tseparator = \" \",\n): string => {\n\tlet result = \"\";\n\n\tfor (let i = 0; i < richTextField.length; i++) {\n\t\tif (\"text\" in richTextField[i]) {\n\t\t\tresult +=\n\t\t\t\t(result ? separator : \"\") + (richTextField[i] as RTTextNode).text;\n\t\t}\n\t}\n\n\treturn result;\n};\n"],"mappings":"AAWO,MAAMA,MAAA,GAAS,SAAAA,CACrBC,aAAA,EAEW;EAAA,IADXC,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAY;EAEZ,IAAIG,MAAA,GAAS;EAEb,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIN,aAAA,CAAcG,MAAA,EAAQG,CAAA,IAAK;IAC1C,cAAUN,aAAA,CAAcM,CAAC,GAAG;MAC/BD,MAAA,KACEA,MAAA,GAASJ,SAAA,GAAY,MAAOD,aAAA,CAAcM,CAAC,EAAiBC,IAAA;IAC9D;EACD;EAEM,OAAAF,MAAA;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}