{"ast":null,"code":"import { LinkType } from \"../types/value/link.js\";\nimport { RichTextNodeType } from \"../types/value/richText.js\";\nimport { asLink } from \"../helpers/asLink.js\";\nimport { escapeHTML } from \"./escapeHTML.js\";\nconst getLabel = node => {\n  return \"data\" in node && \"label\" in node.data ? ` class=\"${node.data.label}\"` : \"\";\n};\nconst serializeStandardTag = (tag, node, children) => {\n  return `<${tag}${getLabel(node)}>${children.join(\"\")}</${tag}>`;\n};\nconst serializePreFormatted = node => {\n  return `<pre${getLabel(node)}>${escapeHTML(node.text)}</pre>`;\n};\nconst serializeImage = (linkResolver, node) => {\n  let imageTag = `<img src=\"${node.url}\" alt=\"${escapeHTML(node.alt)}\"${node.copyright ? ` copyright=\"${escapeHTML(node.copyright)}\"` : \"\"} />`;\n  if (node.linkTo) {\n    imageTag = serializeHyperlink(linkResolver, {\n      type: RichTextNodeType.hyperlink,\n      data: node.linkTo,\n      start: 0,\n      end: 0\n    }, [imageTag]);\n  }\n  return `<p class=\"block-img\">${imageTag}</p>`;\n};\nconst serializeEmbed = node => {\n  return `<div data-oembed=\"${node.oembed.embed_url}\" data-oembed-type=\"${node.oembed.type}\" data-oembed-provider=\"${node.oembed.provider_name}\"${getLabel(node)}>${node.oembed.html}</div>`;\n};\nconst serializeHyperlink = (linkResolver, node, children) => {\n  switch (node.data.link_type) {\n    case LinkType.Web:\n      {\n        return `<a href=\"${escapeHTML(node.data.url)}\" ${node.data.target ? `target=\"${node.data.target}\" ` : \"\"}rel=\"noopener noreferrer\"${getLabel(node)}>${children.join(\"\")}</a>`;\n      }\n    case LinkType.Document:\n      {\n        return `<a href=\"${asLink(node.data, linkResolver)}\"${getLabel(node)}>${children.join(\"\")}</a>`;\n      }\n    case LinkType.Media:\n      {\n        return `<a href=\"${node.data.url}\"${getLabel(node)}>${children.join(\"\")}</a>`;\n      }\n  }\n};\nconst serializeSpan = content => {\n  return content ? escapeHTML(content).replace(/\\n/g, \"<br />\") : \"\";\n};\nexport { getLabel, serializeEmbed, serializeHyperlink, serializeImage, serializePreFormatted, serializeSpan, serializeStandardTag };","map":{"version":3,"names":["getLabel","node","data","label","serializeStandardTag","tag","children","join","serializePreFormatted","escapeHTML","text","serializeImage","linkResolver","imageTag","url","alt","copyright","linkTo","serializeHyperlink","type","RichTextNodeType","hyperlink","start","end","serializeEmbed","oembed","embed_url","provider_name","html","link_type","LinkType","Web","target","Document","asLink","Media","serializeSpan","content","replace"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\lib\\serializerHelpers.ts"],"sourcesContent":["import { LinkType } from \"../types/value/link\";\nimport {\n\tRTBlockNode,\n\tRTEmbedNode,\n\tRTImageNode,\n\tRTInlineNode,\n\tRTLinkNode,\n\tRTPreformattedNode,\n\tRichTextNodeType,\n} from \"../types/value/richText\";\n\nimport { LinkResolverFunction, asLink } from \"../helpers/asLink\";\n\nimport { escapeHTML } from \"./escapeHTML\";\n\nexport const getLabel = (node: RTBlockNode | RTInlineNode): string => {\n\treturn \"data\" in node && \"label\" in node.data\n\t\t? ` class=\"${node.data.label}\"`\n\t\t: \"\";\n};\n\nexport const serializeStandardTag = (\n\ttag: string,\n\tnode: RTBlockNode | RTInlineNode,\n\tchildren: string[],\n): string => {\n\treturn `<${tag}${getLabel(node)}>${children.join(\"\")}</${tag}>`;\n};\n\nexport const serializePreFormatted = (node: RTPreformattedNode): string => {\n\treturn `<pre${getLabel(node)}>${escapeHTML(node.text)}</pre>`;\n};\n\nexport const serializeImage = (\n\tlinkResolver:\n\t\t| LinkResolverFunction<string | null | undefined>\n\t\t| undefined\n\t\t| null,\n\tnode: RTImageNode,\n): string => {\n\tlet imageTag = `<img src=\"${node.url}\" alt=\"${escapeHTML(node.alt)}\"${\n\t\tnode.copyright ? ` copyright=\"${escapeHTML(node.copyright)}\"` : \"\"\n\t} />`;\n\n\t// If the image has a link, we wrap it with an anchor tag\n\tif (node.linkTo) {\n\t\timageTag = serializeHyperlink(\n\t\t\tlinkResolver,\n\t\t\t{\n\t\t\t\ttype: RichTextNodeType.hyperlink,\n\t\t\t\tdata: node.linkTo,\n\t\t\t\tstart: 0,\n\t\t\t\tend: 0,\n\t\t\t},\n\t\t\t[imageTag],\n\t\t);\n\t}\n\n\treturn `<p class=\"block-img\">${imageTag}</p>`;\n};\n\nexport const serializeEmbed = (node: RTEmbedNode): string => {\n\treturn `<div data-oembed=\"${node.oembed.embed_url}\" data-oembed-type=\"${\n\t\tnode.oembed.type\n\t}\" data-oembed-provider=\"${node.oembed.provider_name}\"${getLabel(node)}>${\n\t\tnode.oembed.html\n\t}</div>`;\n};\n\nexport const serializeHyperlink = (\n\tlinkResolver:\n\t\t| LinkResolverFunction<string | null | undefined>\n\t\t| undefined\n\t\t| null,\n\tnode: RTLinkNode,\n\tchildren: string[],\n): string => {\n\tswitch (node.data.link_type) {\n\t\tcase LinkType.Web: {\n\t\t\treturn `<a href=\"${escapeHTML(node.data.url)}\" ${\n\t\t\t\tnode.data.target ? `target=\"${node.data.target}\" ` : \"\"\n\t\t\t}rel=\"noopener noreferrer\"${getLabel(node)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Document: {\n\t\t\treturn `<a href=\"${asLink(node.data, linkResolver)}\"${getLabel(\n\t\t\t\tnode,\n\t\t\t)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Media: {\n\t\t\treturn `<a href=\"${node.data.url}\"${getLabel(node)}>${children.join(\n\t\t\t\t\"\",\n\t\t\t)}</a>`;\n\t\t}\n\t}\n};\n\nexport const serializeSpan = (content?: string): string => {\n\treturn content ? escapeHTML(content).replace(/\\n/g, \"<br />\") : \"\";\n};\n"],"mappings":";;;;AAea,MAAAA,QAAA,GAAYC,IAAA,IAA4C;EAC7D,iBAAUA,IAAA,IAAQ,WAAWA,IAAA,CAAKC,IAAA,GACtC,WAAWD,IAAA,CAAKC,IAAA,CAAKC,KAAA,MACrB;AACJ;AAEO,MAAMC,oBAAA,GAAuBA,CACnCC,GAAA,EACAJ,IAAA,EACAK,QAAA,KACW;EACJ,WAAID,GAAA,GAAML,QAAA,CAASC,IAAI,KAAKK,QAAA,CAASC,IAAA,CAAK,EAAE,MAAMF,GAAA;AAC1D;AAEa,MAAAG,qBAAA,GAAyBP,IAAA,IAAoC;EACzE,OAAO,OAAOD,QAAA,CAASC,IAAI,KAAKQ,UAAA,CAAWR,IAAA,CAAKS,IAAI;AACrD;AAEa,MAAAC,cAAA,GAAiBA,CAC7BC,YAAA,EAIAX,IAAA,KACW;EACX,IAAIY,QAAA,GAAW,aAAaZ,IAAA,CAAKa,GAAA,UAAaL,UAAA,CAAWR,IAAA,CAAKc,GAAG,KAChEd,IAAA,CAAKe,SAAA,GAAY,eAAeP,UAAA,CAAWR,IAAA,CAAKe,SAAS,OAAO;EAIjE,IAAIf,IAAA,CAAKgB,MAAA,EAAQ;IAChBJ,QAAA,GAAWK,kBAAA,CACVN,YAAA,EACA;MACCO,IAAA,EAAMC,gBAAA,CAAiBC,SAAA;MACvBnB,IAAA,EAAMD,IAAA,CAAKgB,MAAA;MACXK,KAAA,EAAO;MACPC,GAAA,EAAK;IAAA,GAEN,CAACV,QAAQ,CAAC;EAEX;EAED,OAAO,wBAAwBA,QAAA;AAChC;AAEa,MAAAW,cAAA,GAAkBvB,IAAA,IAA6B;EAC3D,OAAO,qBAAqBA,IAAA,CAAKwB,MAAA,CAAOC,SAAA,uBACvCzB,IAAA,CAAKwB,MAAA,CAAON,IAAA,2BACclB,IAAA,CAAKwB,MAAA,CAAOE,aAAA,IAAiB3B,QAAA,CAASC,IAAI,KACpEA,IAAA,CAAKwB,MAAA,CAAOG,IAAA;AAEd;AAEO,MAAMV,kBAAA,GAAqBA,CACjCN,YAAA,EAIAX,IAAA,EACAK,QAAA,KACW;EACH,QAAAL,IAAA,CAAKC,IAAA,CAAK2B,SAAA;IACjB,KAAKC,QAAA,CAASC,GAAA;MAAK;QAClB,OAAO,YAAYtB,UAAA,CAAWR,IAAA,CAAKC,IAAA,CAAKY,GAAG,MAC1Cb,IAAA,CAAKC,IAAA,CAAK8B,MAAA,GAAS,WAAW/B,IAAA,CAAKC,IAAA,CAAK8B,MAAA,OAAa,8BAC1BhC,QAAA,CAASC,IAAI,KAAKK,QAAA,CAASC,IAAA,CAAK,EAAE;MAC9D;IAED,KAAKuB,QAAA,CAASG,QAAA;MAAU;QAChB,mBAAYC,MAAA,CAAOjC,IAAA,CAAKC,IAAA,EAAMU,YAAY,KAAKZ,QAAA,CACrDC,IAAI,KACAK,QAAA,CAASC,IAAA,CAAK,EAAE;MACrB;IAED,KAAKuB,QAAA,CAASK,KAAA;MAAO;QACb,mBAAYlC,IAAA,CAAKC,IAAA,CAAKY,GAAA,IAAOd,QAAA,CAASC,IAAI,KAAKK,QAAA,CAASC,IAAA,CAC9D,EAAE;MAEH;EACD;AACF;AAEa,MAAA6B,aAAA,GAAiBC,OAAA,IAA4B;EACzD,OAAOA,OAAA,GAAU5B,UAAA,CAAW4B,OAAO,EAAEC,OAAA,CAAQ,OAAO,QAAQ,IAAI;AACjE"},"metadata":{},"sourceType":"module","externalDependencies":[]}