{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { appendFilters } from \"./lib/appendFilters.js\";\nimport { castThunk } from \"./lib/castThunk.js\";\nimport { devMsg } from \"./lib/devMsg.js\";\nimport { everyTagFilter } from \"./lib/everyTagFilter.js\";\nimport { findMasterRef } from \"./lib/findMasterRef.js\";\nimport { findRefByID } from \"./lib/findRefByID.js\";\nimport { findRefByLabel } from \"./lib/findRefByLabel.js\";\nimport { getPreviewCookie } from \"./lib/getPreviewCookie.js\";\nimport { minifyGraphQLQuery } from \"./lib/minifyGraphQLQuery.js\";\nimport { someTagsFilter } from \"./lib/someTagsFilter.js\";\nimport { typeFilter } from \"./lib/typeFilter.js\";\nimport { ForbiddenError } from \"./errors/ForbiddenError.js\";\nimport { NotFoundError } from \"./errors/NotFoundError.js\";\nimport { ParsingError } from \"./errors/ParsingError.js\";\nimport { PrismicError } from \"./errors/PrismicError.js\";\nimport { asLink } from \"./helpers/asLink.js\";\nimport { buildQueryURL } from \"./buildQueryURL.js\";\nimport { filter } from \"./filter.js\";\nimport { getRepositoryEndpoint } from \"./getRepositoryEndpoint.js\";\nimport { getRepositoryName } from \"./getRepositoryName.js\";\nimport { isRepositoryEndpoint } from \"./isRepositoryEndpoint.js\";\nconst MAX_PAGE_SIZE = 100;\nconst REPOSITORY_CACHE_TTL = 5e3;\nconst GET_ALL_QUERY_DELAY = 500;\nvar RefStateMode;\n(function (RefStateMode2) {\n  RefStateMode2[\"Master\"] = \"Master\";\n  RefStateMode2[\"ReleaseID\"] = \"ReleaseID\";\n  RefStateMode2[\"ReleaseLabel\"] = \"ReleaseLabel\";\n  RefStateMode2[\"Manual\"] = \"Manual\";\n})(RefStateMode || (RefStateMode = {}));\nconst createClient = (repositoryNameOrEndpoint, options) => new Client(repositoryNameOrEndpoint, options);\nclass Client {\n  /**\n   * Creates a Prismic client that can be used to query a repository.\n   *\n   * If used in an environment where a global `fetch` function is unavailable,\n   * such as Node.js, the `fetch` option must be provided as part of the\n   * `options` parameter.\n   *\n   * @param repositoryNameOrEndpoint - The Prismic repository name or full Rest\n   *   API V2 endpoint for the repository.\n   * @param options - Configuration that determines how content will be queried\n   *   from the Prismic repository.\n   *\n   * @returns A client that can query content from the repository.\n   */\n  constructor(repositoryNameOrEndpoint) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    /**\n     * The Prismic REST API V2 endpoint for the repository (use\n     * `prismic.getRepositoryEndpoint` for the default endpoint).\n     */\n    __publicField(this, \"endpoint\");\n    /**\n     * The secure token for accessing the API (only needed if your repository is\n     * set to private).\n     *\n     * {@link https://user-guides.prismic.io/en/articles/1036153-generating-an-access-token}\n     */\n    __publicField(this, \"accessToken\");\n    /**\n     * A list of route resolver objects that define how a document's `url` field\n     * is resolved.\n     *\n     * {@link https://prismic.io/docs/route-resolver}\n     */\n    __publicField(this, \"routes\");\n    /**\n     * The `brokenRoute` option allows you to define the route populated in the\n     * `url` property for broken link or content relationship fields. A broken\n     * link is a link or content relationship field whose linked document has been\n     * unpublished or deleted.\n     *\n     * {@link https://prismic.io/docs/route-resolver}\n     */\n    __publicField(this, \"brokenRoute\");\n    /**\n     * The function used to make network requests to the Prismic REST API. In\n     * environments where a global `fetch` function does not exist, such as\n     * Node.js, this function must be provided.\n     */\n    __publicField(this, \"fetchFn\");\n    __publicField(this, \"fetchOptions\");\n    /**\n     * Default parameters that will be sent with each query. These parameters can\n     * be overridden on each query if needed.\n     */\n    __publicField(this, \"defaultParams\");\n    /**\n     * The client's ref mode state. This determines which ref is used during\n     * queries.\n     */\n    __publicField(this, \"refState\", {\n      mode: RefStateMode.Master,\n      autoPreviewsEnabled: true\n    });\n    /**\n     * Cached repository value.\n     */\n    __publicField(this, \"cachedRepository\");\n    /**\n     * Timestamp at which the cached repository data is considered stale.\n     */\n    __publicField(this, \"cachedRepositoryExpiration\", 0);\n    /**\n     * Active `fetch()` jobs keyed by URL and AbortSignal (if it exists).\n     */\n    __publicField(this, \"fetchJobs\", {});\n    if (isRepositoryEndpoint(repositoryNameOrEndpoint)) {\n      if (process.env.NODE_ENV === \"development\") {\n        if (/\\.prismic\\.io\\/(?!api\\/v2\\/?)/i.test(repositoryNameOrEndpoint)) {\n          throw new PrismicError(\"@prismicio/client only supports Prismic Rest API V2. Please provide only the repository name to the first createClient() parameter or use the getRepositoryEndpoint() helper to generate a valid Rest API V2 endpoint URL.\", void 0, void 0);\n        }\n        const hostname = new URL(repositoryNameOrEndpoint).hostname.toLowerCase();\n        if (hostname.endsWith(\".prismic.io\") && !hostname.endsWith(\".cdn.prismic.io\")) {\n          const repositoryName = getRepositoryName(repositoryNameOrEndpoint);\n          const dotCDNEndpoint = getRepositoryEndpoint(repositoryName);\n          console.warn(`[@prismicio/client] A non-.cdn endpoint was provided to create a client with (\\`${repositoryNameOrEndpoint}\\`). Non-.cdn endpoints can have unexpected side-effects and cause performance issues when querying Prismic. Please convert it to the \\`.cdn\\` alternative (\\`${dotCDNEndpoint}\\`) or use the repository name directly instead (\\`${repositoryName}\\`). For more details, see ${devMsg(\"endpoint-must-use-cdn\")}`);\n        }\n      }\n      this.endpoint = repositoryNameOrEndpoint;\n    } else {\n      this.endpoint = getRepositoryEndpoint(repositoryNameOrEndpoint);\n    }\n    this.accessToken = options.accessToken;\n    this.routes = options.routes;\n    this.brokenRoute = options.brokenRoute;\n    this.fetchOptions = options.fetchOptions;\n    this.defaultParams = options.defaultParams;\n    if (options.ref) {\n      this.queryContentFromRef(options.ref);\n    }\n    if (typeof options.fetch === \"function\") {\n      this.fetchFn = options.fetch;\n    } else if (typeof globalThis.fetch === \"function\") {\n      this.fetchFn = globalThis.fetch;\n    } else {\n      throw new PrismicError(\"A valid fetch implementation was not provided. In environments where fetch is not available (including Node.js), a fetch implementation must be provided via a polyfill or the `fetch` option.\", void 0, void 0);\n    }\n    if (this.fetchFn === globalThis.fetch) {\n      this.fetchFn = this.fetchFn.bind(globalThis);\n    }\n    this.graphQLFetch = this.graphQLFetch.bind(this);\n  }\n  /**\n   * Enables the client to automatically query content from a preview session if\n   * one is active in browser environments. This is enabled by default in the\n   * browser.\n   *\n   * For server environments, use `enableAutoPreviewsFromReq`.\n   *\n   * @example\n   *\n   * ```ts\n   * client.enableAutoPreviews();\n   * ```\n   *\n   * @see enableAutoPreviewsFromReq\n   */\n  enableAutoPreviews() {\n    this.refState.autoPreviewsEnabled = true;\n  }\n  /**\n   * Enables the client to automatically query content from a preview session if\n   * one is active in server environments. This is disabled by default on the\n   * server.\n   *\n   * For browser environments, use `enableAutoPreviews`.\n   *\n   * @example\n   *\n   * ```ts\n   * // In an express app\n   * app.get(\"/\", function (req, res) {\n   * \tclient.enableAutoPreviewsFromReq(req);\n   * });\n   * ```\n   *\n   * @param req - An HTTP server request object containing the request's\n   *   cookies.\n   */\n  enableAutoPreviewsFromReq(req) {\n    this.refState.httpRequest = req;\n    this.refState.autoPreviewsEnabled = true;\n  }\n  /**\n   * Disables the client from automatically querying content from a preview\n   * session if one is active.\n   *\n   * Automatic preview content querying is enabled by default unless this method\n   * is called.\n   *\n   * @example\n   *\n   * ```ts\n   * client.disableAutoPreviews();\n   * ```\n   */\n  disableAutoPreviews() {\n    this.refState.autoPreviewsEnabled = false;\n  }\n  /**\n   * Queries content from the Prismic repository.\n   *\n   * @example\n   *\n   * ```ts\n   * const response = await client.get();\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param params - Parameters to filter, sort, and paginate results.\n   *\n   * @returns A paginated response containing the result of the query.\n   */\n  async get(params) {\n    const url = await this.buildQueryURL(params);\n    return await this.fetch(url, params);\n  }\n  /**\n   * Queries content from the Prismic repository and returns only the first\n   * result, if any.\n   *\n   * @example\n   *\n   * ```ts\n   * const document = await client.getFirst();\n   * ```\n   *\n   * @typeParam TDocument - Type of the Prismic document returned.\n   *\n   * @param params - Parameters to filter, sort, and paginate results. @returns\n   *   The first result of the query, if any.\n   */\n  async getFirst(params) {\n    var _a;\n    const actualParams = {\n      ...params\n    };\n    if (!(params && params.page) && !(params == null ? void 0 : params.pageSize)) {\n      actualParams.pageSize = ((_a = this.defaultParams) == null ? void 0 : _a.pageSize) ?? 1;\n    }\n    const url = await this.buildQueryURL(actualParams);\n    const result = await this.fetch(url, params);\n    const firstResult = result.results[0];\n    if (firstResult) {\n      return firstResult;\n    }\n    throw new PrismicError(\"No documents were returned\", url, void 0);\n  }\n  /**\n   * **IMPORTANT**: Avoid using `dangerouslyGetAll` as it may be slower and\n   * require more resources than other methods. Prefer using other methods that\n   * filter by filters such as `getAllByType`.\n   *\n   * Queries content from the Prismic repository and returns all matching\n   * content. If no filters are provided, all documents will be fetched.\n   *\n   * This method may make multiple network requests to query all matching\n   * content.\n   *\n   * @example\n   *\n   * ```ts\n   * const response = await client.dangerouslyGetAll();\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param params - Parameters to filter, sort, and paginate results.\n   *\n   * @returns A list of documents matching the query.\n   */\n  async dangerouslyGetAll() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a;\n    const {\n      limit = Infinity,\n      ...actualParams\n    } = params;\n    const resolvedParams = {\n      ...actualParams,\n      pageSize: Math.min(limit, actualParams.pageSize || ((_a = this.defaultParams) == null ? void 0 : _a.pageSize) || MAX_PAGE_SIZE)\n    };\n    const documents = [];\n    let latestResult;\n    while ((!latestResult || latestResult.next_page) && documents.length < limit) {\n      const page = latestResult ? latestResult.page + 1 : void 0;\n      latestResult = await this.get({\n        ...resolvedParams,\n        page\n      });\n      documents.push(...latestResult.results);\n      if (latestResult.next_page) {\n        await new Promise(res => setTimeout(res, GET_ALL_QUERY_DELAY));\n      }\n    }\n    return documents.slice(0, limit);\n  }\n  /**\n   * Queries a document from the Prismic repository with a specific ID.\n   *\n   * @remarks\n   * A document's UID is different from its ID. An ID is automatically generated\n   * for all documents and is made available on its `id` property. A UID is\n   * provided in the Prismic editor and is unique among all documents of its\n   * custom type.\n   * @example\n   *\n   * ```ts\n   * const document = await client.getByID(\"WW4bKScAAMAqmluX\");\n   * ```\n   *\n   * @typeParam TDocument- Type of the Prismic document returned.\n   *\n   * @param id - ID of the document.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns The document with an ID matching the `id` parameter, if a matching\n   *   document exists.\n   */\n  async getByID(id, params) {\n    return await this.getFirst(appendFilters(params, filter.at(\"document.id\", id)));\n  }\n  /**\n   * Queries documents from the Prismic repository with specific IDs.\n   *\n   * @remarks\n   * A document's UID is different from its ID. An ID is automatically generated\n   * for all documents and is made available on its `id` property. A UID is\n   * provided in the Prismic editor and is unique among all documents of its\n   * custom type.\n   * @example\n   *\n   * ```ts\n   * const response = await client.getByIDs([\n   * \t\"WW4bKScAAMAqmluX\",\n   * \t\"U1kTRgEAAC8A5ldS\",\n   * ]);\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param ids - A list of document IDs.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A paginated response containing documents with IDs matching the\n   *   `ids` parameter.\n   */\n  async getByIDs(ids, params) {\n    return await this.get(appendFilters(params, filter.in(\"document.id\", ids)));\n  }\n  /**\n   * Queries all documents from the Prismic repository with specific IDs.\n   *\n   * This method may make multiple network requests to query all matching\n   * content.\n   *\n   * @remarks\n   * A document's UID is different from its ID. An ID is automatically generated\n   * for all documents and is made available on its `id` property. A UID is\n   * provided in the Prismic editor and is unique among all documents of its\n   * custom type.\n   * @example\n   *\n   * ```ts\n   * const response = await client.getAllByIDs([\n   * \t\"WW4bKScAAMAqmluX\",\n   * \t\"U1kTRgEAAC8A5ldS\",\n   * ]);\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param ids - A list of document IDs.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A list of documents with IDs matching the `ids` parameter.\n   */\n  async getAllByIDs(ids, params) {\n    return await this.dangerouslyGetAll(appendFilters(params, filter.in(\"document.id\", ids)));\n  }\n  /**\n   * Queries a document from the Prismic repository with a specific UID and\n   * custom type.\n   *\n   * @remarks\n   * A document's UID is different from its ID. An ID is automatically generated\n   * for all documents and is made available on its `id` property. A UID is\n   * provided in the Prismic editor and is unique among all documents of its\n   * custom type.\n   * @example\n   *\n   * ```ts\n   * const document = await client.getByUID(\"blog_post\", \"my-first-post\");\n   * ```\n   *\n   * @typeParam TDocument - Type of the Prismic document returned.\n   *\n   * @param documentType - The API ID of the document's custom type.\n   * @param uid - UID of the document.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns The document with a UID matching the `uid` parameter, if a\n   *   matching document exists.\n   */\n  async getByUID(documentType, uid, params) {\n    return await this.getFirst(appendFilters(params, [typeFilter(documentType), filter.at(`my.${documentType}.uid`, uid)]));\n  }\n  /**\n   * Queries document from the Prismic repository with specific UIDs and Custom\n   * Type.\n   *\n   * @remarks\n   * A document's UID is different from its ID. An ID is automatically generated\n   * for all documents and is made available on its `id` property. A UID is\n   * provided in the Prismic editor and is unique among all documents of its\n   * custom type.\n   * @example\n   *\n   * ```ts\n   * const document = await client.getByUIDs(\"blog_post\", [\n   * \t\"my-first-post\",\n   * \t\"my-second-post\",\n   * ]);\n   * ```\n   *\n   * @typeParam TDocument - Type of the Prismic document returned.\n   *\n   * @param documentType - The API ID of the document's custom type.\n   * @param uids - A list of document UIDs.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A paginated response containing documents with UIDs matching the\n   *   `uids` parameter.\n   */\n  async getByUIDs(documentType, uids, params) {\n    return await this.get(appendFilters(params, [typeFilter(documentType), filter.in(`my.${documentType}.uid`, uids)]));\n  }\n  /**\n   * Queries all documents from the Prismic repository with specific UIDs and\n   * custom type.\n   *\n   * This method may make multiple network requests to query all matching\n   * content.\n   *\n   * @remarks\n   * A document's UID is different from its ID. An ID is automatically generated\n   * for all documents and is made available on its `id` property. A UID is\n   * provided in the Prismic editor and is unique among all documents of its\n   * custom type.\n   * @example\n   *\n   * ```ts\n   * const response = await client.getAllByUIDs([\n   * \t\"my-first-post\",\n   * \t\"my-second-post\",\n   * ]);\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param documentType - The API ID of the document's custom type.\n   * @param uids - A list of document UIDs.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A list of documents with UIDs matching the `uids` parameter.\n   */\n  async getAllByUIDs(documentType, uids, params) {\n    return await this.dangerouslyGetAll(appendFilters(params, [typeFilter(documentType), filter.in(`my.${documentType}.uid`, uids)]));\n  }\n  /**\n   * Queries a singleton document from the Prismic repository for a specific\n   * custom type.\n   *\n   * @remarks\n   * A singleton document is one that is configured in Prismic to only allow one\n   * instance. For example, a repository may be configured to contain just one\n   * Settings document. This is in contrast to a repeatable custom type which\n   * allows multiple instances of itself.\n   * @example\n   *\n   * ```ts\n   * const document = await client.getSingle(\"settings\");\n   * ```\n   *\n   * @typeParam TDocument - Type of the Prismic document returned.\n   *\n   * @param documentType - The API ID of the singleton custom type.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns The singleton document for the custom type, if a matching document\n   *   exists.\n   */\n  async getSingle(documentType, params) {\n    return await this.getFirst(appendFilters(params, typeFilter(documentType)));\n  }\n  /**\n   * Queries documents from the Prismic repository for a specific custom type.\n   *\n   * Use `getAllByType` instead if you need to query all documents for a\n   * specific custom type.\n   *\n   * @example\n   *\n   * ```ts\n   * const response = await client.getByType(\"blog_post\");\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param documentType - The API ID of the custom type.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A paginated response containing documents of the custom type.\n   */\n  async getByType(documentType, params) {\n    return await this.get(appendFilters(params, typeFilter(documentType)));\n  }\n  /**\n   * Queries all documents from the Prismic repository for a specific Custom\n   * Type.\n   *\n   * This method may make multiple network requests to query all matching\n   * content.\n   *\n   * @example\n   *\n   * ```ts\n   * const response = await client.getByType(\"blog_post\");\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param documentType - The API ID of the custom type.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A list of all documents of the custom type.\n   */\n  async getAllByType(documentType, params) {\n    return await this.dangerouslyGetAll(appendFilters(params, typeFilter(documentType)));\n  }\n  /**\n   * Queries documents from the Prismic repository with a specific tag.\n   *\n   * Use `getAllByTag` instead if you need to query all documents with a\n   * specific tag.\n   *\n   * @example\n   *\n   * ```ts\n   * const response = await client.getByTag(\"food\");\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param tag - The tag that must be included on a document.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A paginated response containing documents with the tag.\n   */\n  async getByTag(tag, params) {\n    return await this.get(appendFilters(params, someTagsFilter(tag)));\n  }\n  /**\n   * Queries all documents from the Prismic repository with a specific tag.\n   *\n   * This method may make multiple network requests to query all matching\n   * content.\n   *\n   * @example\n   *\n   * ```ts\n   * const response = await client.getAllByTag(\"food\");\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param tag - The tag that must be included on a document.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A list of all documents with the tag.\n   */\n  async getAllByTag(tag, params) {\n    return await this.dangerouslyGetAll(appendFilters(params, someTagsFilter(tag)));\n  }\n  /**\n   * Queries documents from the Prismic repository with specific tags. A\n   * document must be tagged with all of the queried tags to be included.\n   *\n   * @example\n   *\n   * ```ts\n   * const response = await client.getByEveryTag([\"food\", \"fruit\"]);\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param tags - A list of tags that must be included on a document.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A paginated response containing documents with the tags.\n   */\n  async getByEveryTag(tags, params) {\n    return await this.get(appendFilters(params, everyTagFilter(tags)));\n  }\n  /**\n   * Queries documents from the Prismic repository with specific tags. A\n   * document must be tagged with all of the queried tags to be included.\n   *\n   * This method may make multiple network requests to query all matching\n   * content.\n   *\n   * @example\n   *\n   * ```ts\n   * const response = await client.getAllByEveryTag([\"food\", \"fruit\"]);\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param tags - A list of tags that must be included on a document.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A list of all documents with the tags.\n   */\n  async getAllByEveryTag(tags, params) {\n    return await this.dangerouslyGetAll(appendFilters(params, everyTagFilter(tags)));\n  }\n  /**\n   * Queries documents from the Prismic repository with specific tags. A\n   * document must be tagged with at least one of the queried tags to be\n   * included.\n   *\n   * @example\n   *\n   * ```ts\n   * const response = await client.getByEveryTag([\"food\", \"fruit\"]);\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param tags - A list of tags that must be included on a document.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A paginated response containing documents with at least one of the\n   *   tags.\n   */\n  async getBySomeTags(tags, params) {\n    return await this.get(appendFilters(params, someTagsFilter(tags)));\n  }\n  /**\n   * Queries documents from the Prismic repository with specific tags. A\n   * document must be tagged with at least one of the queried tags to be\n   * included.\n   *\n   * This method may make multiple network requests to query all matching\n   * content.\n   *\n   * @example\n   *\n   * ```ts\n   * const response = await client.getAllBySomeTags([\"food\", \"fruit\"]);\n   * ```\n   *\n   * @typeParam TDocument - Type of Prismic documents returned.\n   *\n   * @param tags - A list of tags that must be included on a document.\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A list of all documents with at least one of the tags.\n   */\n  async getAllBySomeTags(tags, params) {\n    return await this.dangerouslyGetAll(appendFilters(params, someTagsFilter(tags)));\n  }\n  /**\n   * Returns metadata about the Prismic repository, such as its refs, releases,\n   * and custom types.\n   *\n   * @returns Repository metadata.\n   */\n  async getRepository(params) {\n    const url = new URL(this.endpoint);\n    if (this.accessToken) {\n      url.searchParams.set(\"access_token\", this.accessToken);\n    }\n    return await this.fetch(url.toString(), params);\n  }\n  /**\n   * Returns a list of all refs for the Prismic repository.\n   *\n   * Refs are used to identify which version of the repository's content should\n   * be queried. All repositories will have at least one ref pointing to the\n   * latest published content called the \"master ref\".\n   *\n   * @returns A list of all refs for the Prismic repository.\n   */\n  async getRefs(params) {\n    const repository = await this.getRepository(params);\n    return repository.refs;\n  }\n  /**\n   * Returns a ref for the Prismic repository with a matching ID.\n   *\n   * @param id - ID of the ref.\n   *\n   * @returns The ref with a matching ID, if it exists.\n   */\n  async getRefByID(id, params) {\n    const refs = await this.getRefs(params);\n    return findRefByID(refs, id);\n  }\n  /**\n   * Returns a ref for the Prismic repository with a matching label.\n   *\n   * @param label - Label of the ref.\n   *\n   * @returns The ref with a matching label, if it exists.\n   */\n  async getRefByLabel(label, params) {\n    const refs = await this.getRefs(params);\n    return findRefByLabel(refs, label);\n  }\n  /**\n   * Returns the master ref for the Prismic repository. The master ref points to\n   * the repository's latest published content.\n   *\n   * @returns The repository's master ref.\n   */\n  async getMasterRef(params) {\n    const refs = await this.getRefs(params);\n    return findMasterRef(refs);\n  }\n  /**\n   * Returns a list of all Releases for the Prismic repository. Releases are\n   * used to group content changes before publishing.\n   *\n   * @returns A list of all Releases for the Prismic repository.\n   */\n  async getReleases(params) {\n    const refs = await this.getRefs(params);\n    return refs.filter(ref => !ref.isMasterRef);\n  }\n  /**\n   * Returns a Release for the Prismic repository with a matching ID.\n   *\n   * @param id - ID of the Release.\n   *\n   * @returns The Release with a matching ID, if it exists.\n   */\n  async getReleaseByID(id, params) {\n    const releases = await this.getReleases(params);\n    return findRefByID(releases, id);\n  }\n  /**\n   * Returns a Release for the Prismic repository with a matching label.\n   *\n   * @param label - Label of the ref.\n   *\n   * @returns The ref with a matching label, if it exists.\n   */\n  async getReleaseByLabel(label, params) {\n    const releases = await this.getReleases(params);\n    return findRefByLabel(releases, label);\n  }\n  /**\n   * Returns a list of all tags used in the Prismic repository.\n   *\n   * @returns A list of all tags used in the repository.\n   */\n  async getTags(params) {\n    try {\n      const tagsForm = await this.getCachedRepositoryForm(\"tags\", params);\n      const url = new URL(tagsForm.action);\n      if (this.accessToken) {\n        url.searchParams.set(\"access_token\", this.accessToken);\n      }\n      return await this.fetch(url.toString(), params);\n    } catch {\n      const repository = await this.getRepository(params);\n      return repository.tags;\n    }\n  }\n  /**\n   * Builds a URL used to query content from the Prismic repository.\n   *\n   * @param params - Parameters to filter, sort, and paginate the results.\n   *\n   * @returns A URL string that can be requested to query content.\n   */\n  async buildQueryURL() {\n    let {\n      signal,\n      fetchOptions,\n      ...params\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const ref = params.ref || (await this.getResolvedRefString({\n      signal,\n      fetchOptions\n    }));\n    const integrationFieldsRef = params.integrationFieldsRef || (await this.getCachedRepository({\n      signal,\n      fetchOptions\n    })).integrationFieldsRef || void 0;\n    return buildQueryURL(this.endpoint, {\n      ...this.defaultParams,\n      ...params,\n      ref,\n      integrationFieldsRef,\n      routes: params.routes || this.routes,\n      brokenRoute: params.brokenRoute || this.brokenRoute,\n      accessToken: params.accessToken || this.accessToken\n    });\n  }\n  /**\n   * Determines the URL for a previewed document during an active preview\n   * session. The result of this method should be used to redirect the user to\n   * the document's URL.\n   *\n   * @example\n   *\n   * ```ts\n   * \tconst url = client.resolvePreviewURL({\n   * \tlinkResolver: (document) => `/${document.uid}`\n   * \tdefaultURL: '/'\n   * \t})\n   * ```\n   *\n   * @param args - Arguments to configure the URL resolving.\n   *\n   * @returns The URL for the previewed document during an active preview\n   *   session. The user should be redirected to this URL.\n   */\n  async resolvePreviewURL(args) {\n    var _a, _b;\n    let documentID = args.documentID;\n    let previewToken = args.previewToken;\n    if (typeof globalThis.location !== \"undefined\") {\n      const searchParams = new URLSearchParams(globalThis.location.search);\n      documentID = documentID || searchParams.get(\"documentId\");\n      previewToken = previewToken || searchParams.get(\"token\");\n    } else if (this.refState.httpRequest) {\n      if (\"query\" in this.refState.httpRequest) {\n        documentID = documentID || ((_a = this.refState.httpRequest.query) == null ? void 0 : _a.documentId);\n        previewToken = previewToken || ((_b = this.refState.httpRequest.query) == null ? void 0 : _b.token);\n      } else if (\"url\" in this.refState.httpRequest && this.refState.httpRequest.url) {\n        const searchParams = new URL(this.refState.httpRequest.url, \"missing-host://\").searchParams;\n        documentID = documentID || searchParams.get(\"documentId\");\n        previewToken = previewToken || searchParams.get(\"token\");\n      }\n    }\n    if (documentID != null && previewToken != null) {\n      const document = await this.getByID(documentID, {\n        ref: previewToken,\n        lang: \"*\",\n        signal: args.signal,\n        fetchOptions: args.fetchOptions\n      });\n      const url = asLink(document, {\n        linkResolver: args.linkResolver\n      });\n      if (typeof url === \"string\") {\n        return url;\n      }\n    }\n    return args.defaultURL;\n  }\n  /**\n   * Configures the client to query the latest published content for all future\n   * queries.\n   *\n   * If the `ref` parameter is provided during a query, it takes priority for\n   * that query.\n   *\n   * @example\n   *\n   * ```ts\n   * await client.queryLatestContent();\n   * const document = await client.getByID(\"WW4bKScAAMAqmluX\");\n   * ```\n   */\n  queryLatestContent() {\n    this.refState.mode = RefStateMode.Master;\n  }\n  /**\n   * Configures the client to query content from a specific Release identified\n   * by its ID for all future queries.\n   *\n   * If the `ref` parameter is provided during a query, it takes priority for\n   * that query.\n   *\n   * @example\n   *\n   * ```ts\n   * await client.queryContentFromReleaseByID(\"YLB7OBAAACMA7Cpa\");\n   * const document = await client.getByID(\"WW4bKScAAMAqmluX\");\n   * ```\n   *\n   * @param releaseID - The ID of the Release.\n   */\n  queryContentFromReleaseByID(releaseID) {\n    this.refState = {\n      ...this.refState,\n      mode: RefStateMode.ReleaseID,\n      releaseID\n    };\n  }\n  /**\n   * Configures the client to query content from a specific Release identified\n   * by its label for all future queries.\n   *\n   * If the `ref` parameter is provided during a query, it takes priority for\n   * that query.\n   *\n   * @example\n   *\n   * ```ts\n   * await client.queryContentFromReleaseByLabel(\"My Release\");\n   * const document = await client.getByID(\"WW4bKScAAMAqmluX\");\n   * ```\n   *\n   * @param releaseLabel - The label of the Release.\n   */\n  queryContentFromReleaseByLabel(releaseLabel) {\n    this.refState = {\n      ...this.refState,\n      mode: RefStateMode.ReleaseLabel,\n      releaseLabel\n    };\n  }\n  /**\n   * Configures the client to query content from a specific ref. The ref can be\n   * provided as a string or a function.\n   *\n   * If a function is provided, the ref is fetched lazily before each query. The\n   * function may also be asynchronous.\n   *\n   * @example\n   *\n   * ```ts\n   * await client.queryContentFromRef(\"my-ref\");\n   * const document = await client.getByID(\"WW4bKScAAMAqmluX\");\n   * ```\n   *\n   * @param ref - The ref or a function that returns the ref from which to query\n   *   content.\n   */\n  queryContentFromRef(ref) {\n    this.refState = {\n      ...this.refState,\n      mode: RefStateMode.Manual,\n      ref\n    };\n  }\n  /**\n   * A `fetch()` function to be used with GraphQL clients configured for\n   * Prismic's GraphQL API. It automatically applies the necessary `prismic-ref`\n   * and Authorization headers. Queries will automatically be minified by\n   * removing whitespace where possible.\n   *\n   * @example\n   *\n   * ```ts\n   * const graphQLClient = new ApolloClient({\n   * \tlink: new HttpLink({\n   * \t\turi: prismic.getGraphQLEndpoint(repositoryName),\n   * \t\t// Provide `client.graphQLFetch` as the fetch implementation.\n   * \t\tfetch: client.graphQLFetch,\n   * \t\t// Using GET is required.\n   * \t\tuseGETForQueries: true,\n   * \t}),\n   * \tcache: new InMemoryCache(),\n   * });\n   * ```\n   *\n   * @param input - The `fetch()` `input` parameter. Only strings are supported.\n   * @param init - The `fetch()` `init` parameter. Only plain objects are\n   *   supported.\n   *\n   * @returns The `fetch()` Response for the request.\n   *\n   * @experimental\n   */\n  async graphQLFetch(input, init) {\n    const cachedRepository = await this.getCachedRepository();\n    const ref = await this.getResolvedRefString();\n    const unsanitizedHeaders = {\n      \"Prismic-ref\": ref,\n      Authorization: this.accessToken ? `Token ${this.accessToken}` : \"\",\n      // Asserting `init.headers` is a Record since popular GraphQL\n      // libraries pass this as a Record. Header objects as input\n      // are unsupported.\n      ...(init ? init.headers : {})\n    };\n    if (cachedRepository.integrationFieldsRef) {\n      unsanitizedHeaders[\"Prismic-integration-field-ref\"] = cachedRepository.integrationFieldsRef;\n    }\n    const headers = {};\n    for (const key in unsanitizedHeaders) {\n      if (unsanitizedHeaders[key]) {\n        headers[key.toLowerCase()] = unsanitizedHeaders[key];\n      }\n    }\n    const url = new URL(\n    // Asserting `input` is a string since popular GraphQL\n    // libraries pass this as a string. Request objects as\n    // input are unsupported.\n    input);\n    url.searchParams.set(\"ref\", ref);\n    const query = url.searchParams.get(\"query\");\n    if (query) {\n      url.searchParams.set(\"query\",\n      // Compress the GraphQL query (if it exists) by\n      // removing whitespace. This is done to\n      // optimize the query size and avoid\n      // hitting the upper limit of GET requests\n      // (2048 characters).\n      minifyGraphQLQuery(query));\n    }\n    return await this.fetchFn(url.toString(), {\n      ...init,\n      headers\n    });\n  }\n  /**\n   * Returns a cached version of `getRepository` with a TTL.\n   *\n   * @returns Cached repository metadata.\n   */\n  async getCachedRepository(params) {\n    if (!this.cachedRepository || Date.now() >= this.cachedRepositoryExpiration) {\n      this.cachedRepositoryExpiration = Date.now() + REPOSITORY_CACHE_TTL;\n      this.cachedRepository = await this.getRepository(params);\n    }\n    return this.cachedRepository;\n  }\n  /**\n   * Returns a cached Prismic repository form. Forms are used to determine API\n   * endpoints for types of repository data.\n   *\n   * @param name - Name of the form.\n   *\n   * @returns The repository form.\n   *\n   * @throws If a matching form cannot be found.\n   */\n  async getCachedRepositoryForm(name, params) {\n    const cachedRepository = await this.getCachedRepository(params);\n    const form = cachedRepository.forms[name];\n    if (!form) {\n      throw new PrismicError(`Form with name \"${name}\" could not be found`, void 0, void 0);\n    }\n    return form;\n  }\n  /**\n   * Returns the ref needed to query based on the client's current state. This\n   * method may make a network request to fetch a ref or resolve the user's ref\n   * thunk.\n   *\n   * If auto previews are enabled, the preview ref takes priority if available.\n   *\n   * The following strategies are used depending on the client's state:\n   *\n   * - If the user called `queryLatestContent`: Use the repository's master ref.\n   *   The ref is cached for 5 seconds. After 5 seconds, a new master ref is\n   *   fetched.\n   * - If the user called `queryContentFromReleaseByID`: Use the release's ref.\n   *   The ref is cached for 5 seconds. After 5 seconds, a new ref for the\n   *   release is fetched.\n   * - If the user called `queryContentFromReleaseByLabel`: Use the release's ref.\n   *   The ref is cached for 5 seconds. After 5 seconds, a new ref for the\n   *   release is fetched.\n   * - If the user called `queryContentFromRef`: Use the provided ref. Fall back\n   *   to the master ref if the ref is not a string.\n   *\n   * @returns The ref to use during a query.\n   */\n  async getResolvedRefString(params) {\n    var _a, _b;\n    if (this.refState.autoPreviewsEnabled) {\n      let previewRef;\n      let cookieJar;\n      if ((_a = this.refState.httpRequest) == null ? void 0 : _a.headers) {\n        if (\"get\" in this.refState.httpRequest.headers && typeof this.refState.httpRequest.headers.get === \"function\") {\n          cookieJar = this.refState.httpRequest.headers.get(\"cookie\");\n        } else if (\"cookie\" in this.refState.httpRequest.headers) {\n          cookieJar = this.refState.httpRequest.headers.cookie;\n        }\n      } else if ((_b = globalThis.document) == null ? void 0 : _b.cookie) {\n        cookieJar = globalThis.document.cookie;\n      }\n      if (cookieJar) {\n        previewRef = getPreviewCookie(cookieJar);\n      }\n      if (previewRef) {\n        return previewRef;\n      }\n    }\n    const cachedRepository = await this.getCachedRepository(params);\n    const refModeType = this.refState.mode;\n    if (refModeType === RefStateMode.ReleaseID) {\n      return findRefByID(cachedRepository.refs, this.refState.releaseID).ref;\n    } else if (refModeType === RefStateMode.ReleaseLabel) {\n      return findRefByLabel(cachedRepository.refs, this.refState.releaseLabel).ref;\n    } else if (refModeType === RefStateMode.Manual) {\n      const res = await castThunk(this.refState.ref)();\n      if (typeof res === \"string\") {\n        return res;\n      }\n    }\n    return findMasterRef(cachedRepository.refs).ref;\n  }\n  /**\n   * Performs a network request using the configured `fetch` function. It\n   * assumes all successful responses will have a JSON content type. It also\n   * normalizes unsuccessful network requests.\n   *\n   * @typeParam T - The JSON response.\n   *\n   * @param url - URL to the resource to fetch.\n   * @param params - Prismic REST API parameters for the network request.\n   *\n   * @returns The JSON response from the network request.\n   */\n  async fetch(url) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a, _b, _c, _d;\n    const requestInit = {\n      ...this.fetchOptions,\n      ...params.fetchOptions,\n      headers: {\n        ...((_a = this.fetchOptions) == null ? void 0 : _a.headers),\n        ...((_b = params.fetchOptions) == null ? void 0 : _b.headers)\n      },\n      signal: ((_c = params.fetchOptions) == null ? void 0 : _c.signal) || params.signal || ((_d = this.fetchOptions) == null ? void 0 : _d.signal)\n    };\n    let job;\n    if (this.fetchJobs[url] && this.fetchJobs[url].has(requestInit.signal)) {\n      job = this.fetchJobs[url].get(requestInit.signal);\n    } else {\n      this.fetchJobs[url] = this.fetchJobs[url] || /* @__PURE__ */new Map();\n      job = this.fetchFn(url, requestInit).then(async res2 => {\n        let json = void 0;\n        try {\n          json = await res2.json();\n        } catch {}\n        return {\n          status: res2.status,\n          json\n        };\n      }).finally(() => {\n        this.fetchJobs[url].delete(requestInit.signal);\n        if (this.fetchJobs[url].size === 0) {\n          delete this.fetchJobs[url];\n        }\n      });\n      this.fetchJobs[url].set(requestInit.signal, job);\n    }\n    const res = await job;\n    if (res.status !== 404 && res.json == null) {\n      throw new PrismicError(void 0, url, res.json);\n    }\n    switch (res.status) {\n      case 200:\n        {\n          return res.json;\n        }\n      case 400:\n        {\n          throw new ParsingError(res.json.message, url, res.json);\n        }\n      case 401:\n      case 403:\n        {\n          throw new ForbiddenError(\"error\" in res.json ? res.json.error : res.json.message, url, res.json);\n        }\n      case 404:\n        {\n          throw new NotFoundError(`Prismic repository not found. Check that \"${this.endpoint}\" is pointing to the correct repository.`, url, void 0);\n        }\n    }\n    throw new PrismicError(void 0, url, res.json);\n  }\n}\nexport { Client, GET_ALL_QUERY_DELAY, REPOSITORY_CACHE_TTL, createClient };","map":{"version":3,"names":["MAX_PAGE_SIZE","REPOSITORY_CACHE_TTL","GET_ALL_QUERY_DELAY","RefStateMode","RefStateMode2","createClient","repositoryNameOrEndpoint","options","Client","constructor","arguments","length","undefined","__publicField","mode","Master","autoPreviewsEnabled","isRepositoryEndpoint","process","env","NODE_ENV","test","PrismicError","hostname","URL","toLowerCase","endsWith","repositoryName","getRepositoryName","dotCDNEndpoint","getRepositoryEndpoint","console","warn","devMsg","endpoint","accessToken","routes","brokenRoute","fetchOptions","defaultParams","ref","queryContentFromRef","fetch","fetchFn","globalThis","bind","graphQLFetch","enableAutoPreviews","refState","enableAutoPreviewsFromReq","req","httpRequest","disableAutoPreviews","get","params","url","buildQueryURL","getFirst","actualParams","page","pageSize","_a","result","firstResult","results","dangerouslyGetAll","limit","Infinity","resolvedParams","Math","min","documents","latestResult","next_page","push","Promise","res","setTimeout","slice","getByID","id","appendFilters","filter","at","getByIDs","ids","in","getAllByIDs","getByUID","documentType","uid","typeFilter","getByUIDs","uids","getAllByUIDs","getSingle","getByType","getAllByType","getByTag","tag","someTagsFilter","getAllByTag","getByEveryTag","tags","everyTagFilter","getAllByEveryTag","getBySomeTags","getAllBySomeTags","getRepository","searchParams","set","toString","getRefs","repository","refs","getRefByID","findRefByID","getRefByLabel","label","findRefByLabel","getMasterRef","findMasterRef","getReleases","isMasterRef","getReleaseByID","releases","getReleaseByLabel","getTags","tagsForm","getCachedRepositoryForm","action","signal","getResolvedRefString","integrationFieldsRef","getCachedRepository","resolvePreviewURL","args","documentID","previewToken","location","URLSearchParams","search","query","documentId","_b","token","document","lang","asLink","linkResolver","defaultURL","queryLatestContent","queryContentFromReleaseByID","releaseID","ReleaseID","queryContentFromReleaseByLabel","releaseLabel","ReleaseLabel","Manual","input","init","cachedRepository","unsanitizedHeaders","Authorization","headers","key","minifyGraphQLQuery","Date","now","cachedRepositoryExpiration","name","form","forms","previewRef","cookieJar","cookie","getPreviewCookie","refModeType","castThunk","requestInit","_c","_d","job","fetchJobs","has","Map","then","res2","json","status","finally","delete","size","ParsingError","message","ForbiddenError","error","NotFoundError"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\createClient.ts"],"sourcesContent":["import { appendFilters } from \"./lib/appendFilters\";\nimport { castThunk } from \"./lib/castThunk\";\nimport { devMsg } from \"./lib/devMsg\";\nimport { everyTagFilter } from \"./lib/everyTagFilter\";\nimport { findMasterRef } from \"./lib/findMasterRef\";\nimport { findRefByID } from \"./lib/findRefByID\";\nimport { findRefByLabel } from \"./lib/findRefByLabel\";\nimport { getPreviewCookie } from \"./lib/getPreviewCookie\";\nimport { minifyGraphQLQuery } from \"./lib/minifyGraphQLQuery\";\nimport { someTagsFilter } from \"./lib/someTagsFilter\";\nimport { typeFilter } from \"./lib/typeFilter\";\n\nimport type { Query } from \"./types/api/query\";\nimport type { Ref } from \"./types/api/ref\";\nimport type { Form, Repository } from \"./types/api/repository\";\nimport type { PrismicDocument } from \"./types/value/document\";\n\nimport { ForbiddenError } from \"./errors/ForbiddenError\";\nimport { NotFoundError } from \"./errors/NotFoundError\";\nimport { ParsingError } from \"./errors/ParsingError\";\nimport { PrismicError } from \"./errors/PrismicError\";\n\nimport { LinkResolverFunction, asLink } from \"./helpers/asLink\";\n\nimport { BuildQueryURLArgs, buildQueryURL } from \"./buildQueryURL\";\nimport { filter } from \"./filter\";\nimport { getRepositoryEndpoint } from \"./getRepositoryEndpoint\";\nimport { getRepositoryName } from \"./getRepositoryName\";\nimport { isRepositoryEndpoint } from \"./isRepositoryEndpoint\";\n\n/**\n * The largest page size allowed by the Prismic REST API V2. This value is used\n * to minimize the number of requests required to query content.\n */\nconst MAX_PAGE_SIZE = 100;\n\n/**\n * The number of milliseconds in which repository metadata is considered valid.\n * A ref can be invalidated quickly depending on how frequently content is\n * updated in the Prismic repository. As such, repository's metadata can only be\n * considered valid for a short amount of time.\n */\nexport const REPOSITORY_CACHE_TTL = 5000;\n\n/**\n * The number of milliseconds in which a multi-page `getAll` (e.g. `getAll`,\n * `getAllByType`, `getAllByTag`) will wait between individual page requests.\n *\n * This is done to ensure API performance is sustainable and reduces the chance\n * of a failed API request due to overloading.\n */\nexport const GET_ALL_QUERY_DELAY = 500;\n\n/**\n * Extracts one or more Prismic document types that match a given Prismic\n * document type. If no matches are found, no extraction is performed and the\n * union of all provided Prismic document types are returned.\n *\n * @typeParam TDocuments - Prismic document types from which to extract.\n * @typeParam TDocumentType - Type(s) to match `TDocuments` against.\n */\ntype ExtractDocumentType<\n\tTDocuments extends PrismicDocument,\n\tTDocumentType extends TDocuments[\"type\"],\n> = Extract<TDocuments, { type: TDocumentType }> extends never\n\t? TDocuments\n\t: Extract<TDocuments, { type: TDocumentType }>;\n\n/**\n * A universal API to make network requests. A subset of the `fetch()` API.\n *\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch}\n */\nexport type FetchLike = (\n\tinput: string,\n\tinit?: RequestInitLike,\n) => Promise<ResponseLike>;\n\n/**\n * An object that allows you to abort a `fetch()` request if needed via an\n * `AbortController` object\n *\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal}\n */\n// `any` is used often here to ensure this type is universally valid among\n// different AbortSignal implementations. The types of each property are not\n// important to validate since it is blindly passed to a given `fetch()`\n// function.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type AbortSignalLike = any;\n\n/**\n * A subset of RequestInit properties to configure a `fetch()` request.\n */\n// Only options relevant to the client are included. Extending from the full\n// RequestInit would cause issues, such as accepting Header objects.\n//\n// An interface is used to allow other libraries to augment the type with\n// environment-specific types.\nexport interface RequestInitLike extends Pick<RequestInit, \"cache\"> {\n\t/**\n\t * An object literal to set the `fetch()` request's headers.\n\t */\n\theaders?: Record<string, string>;\n\n\t/**\n\t * An AbortSignal to set the `fetch()` request's signal.\n\t *\n\t * See:\n\t * [https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal)\n\t */\n\t// NOTE: `AbortSignalLike` is `any`! It is left as `AbortSignalLike`\n\t// for backwards compatibility (the type is exported) and to signal to\n\t// other readers that this should be an AbortSignal-like object.\n\tsignal?: AbortSignalLike;\n}\n\n/**\n * The minimum required properties from Response.\n */\nexport interface ResponseLike {\n\tstatus: number;\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tjson(): Promise<any>;\n}\n\n/**\n * The minimum required properties to treat as an HTTP Request for automatic\n * Prismic preview support.\n */\nexport type HttpRequestLike =\n\t| /**\n\t * Web API Request\n\t *\n\t * @see http://developer.mozilla.org/en-US/docs/Web/API/Request\n\t */\n\t{\n\t\t\theaders?: {\n\t\t\t\tget(name: string): string | null;\n\t\t\t};\n\t\t\turl?: string;\n\t  }\n\n\t/**\n\t * Express-style Request\n\t */\n\t| {\n\t\t\theaders?: {\n\t\t\t\tcookie?: string;\n\t\t\t};\n\t\t\tquery?: Record<string, unknown>;\n\t  };\n\n/**\n * Modes for client ref management.\n */\nenum RefStateMode {\n\t/**\n\t * Use the repository's master ref.\n\t */\n\tMaster = \"Master\",\n\n\t/**\n\t * Use a given Release identified by its ID.\n\t */\n\tReleaseID = \"ReleaseID\",\n\n\t/**\n\t * Use a given Release identified by its label.\n\t */\n\tReleaseLabel = \"ReleaseLabel\",\n\n\t/**\n\t * Use a given ref.\n\t */\n\tManual = \"Manual\",\n}\n\n/**\n * An object containing stateful information about a client's ref strategy.\n */\ntype RefState = {\n\t/**\n\t * Determines if automatic preview support is enabled.\n\t */\n\tautoPreviewsEnabled: boolean;\n\n\t/**\n\t * An optional HTTP server request object used during previews if automatic\n\t * previews are enabled.\n\t */\n\thttpRequest?: HttpRequestLike;\n} & (\n\t| {\n\t\t\tmode: RefStateMode.Master;\n\t  }\n\t| {\n\t\t\tmode: RefStateMode.ReleaseID;\n\t\t\treleaseID: string;\n\t  }\n\t| {\n\t\t\tmode: RefStateMode.ReleaseLabel;\n\t\t\treleaseLabel: string;\n\t  }\n\t| {\n\t\t\tmode: RefStateMode.Manual;\n\t\t\tref: RefStringOrThunk;\n\t  }\n);\n\n/**\n * A ref or a function that returns a ref. If a static ref is known, one can be\n * given. If the ref must be fetched on-demand, a function can be provided. This\n * function can optionally be asynchronous.\n */\ntype RefStringOrThunk =\n\t| string\n\t| (() => string | undefined | Promise<string | undefined>);\n\n/**\n * Configuration for clients that determine how content is queried.\n */\nexport type ClientConfig = {\n\t/**\n\t * The secure token for accessing the Prismic repository. This is only\n\t * required if the repository is set to private.\n\t */\n\taccessToken?: string;\n\n\t/**\n\t * A string representing a version of the Prismic repository's content. This\n\t * may point to the latest version (called the \"master ref\"), or a preview\n\t * with draft content.\n\t */\n\tref?: RefStringOrThunk;\n\n\t/**\n\t * A list of route resolver objects that define how a document's `url`\n\t * property is resolved.\n\t *\n\t * {@link https://prismic.io/docs/route-resolver}\n\t */\n\troutes?: NonNullable<BuildQueryURLArgs[\"routes\"]>;\n\n\t/**\n\t * The `brokenRoute` option allows you to define the route populated in the\n\t * `url` property for broken link or content relationship fields. A broken\n\t * link is a link or content relationship field whose linked document has been\n\t * unpublished or deleted.\n\t *\n\t * {@link https://prismic.io/docs/route-resolver}\n\t */\n\tbrokenRoute?: NonNullable<BuildQueryURLArgs[\"brokenRoute\"]>;\n\n\t/**\n\t * Default parameters that will be sent with each query. These parameters can\n\t * be overridden on each query if needed.\n\t */\n\tdefaultParams?: Omit<\n\t\tBuildQueryURLArgs,\n\t\t\"ref\" | \"integrationFieldsRef\" | \"accessToken\" | \"routes\" | \"brokenRoute\"\n\t>;\n\n\t/**\n\t * The function used to make network requests to the Prismic REST API. In\n\t * environments where a global `fetch` function does not exist, such as\n\t * Node.js, this function must be provided.\n\t */\n\tfetch?: FetchLike;\n\n\t/**\n\t * Options provided to the client's `fetch()` on all network requests. These\n\t * options will be merged with internally required options. They can also be\n\t * overriden on a per-query basis using the query's `fetchOptions` parameter.\n\t */\n\tfetchOptions?: RequestInitLike;\n};\n\n/**\n * Parameters for any client method that use `fetch()`.\n */\ntype FetchParams = {\n\t/**\n\t * Options provided to the client's `fetch()` on all network requests. These\n\t * options will be merged with internally required options. They can also be\n\t * overriden on a per-query basis using the query's `fetchOptions` parameter.\n\t */\n\tfetchOptions?: RequestInitLike;\n\n\t/**\n\t * An `AbortSignal` provided by an `AbortController`. This allows the network\n\t * request to be cancelled if necessary.\n\t *\n\t * @deprecated Move the `signal` parameter into `fetchOptions.signal`:\n\t *\n\t * @see \\<https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\\>\n\t */\n\tsignal?: AbortSignalLike;\n};\n\n/**\n * Parameters specific to client methods that fetch all documents. These methods\n * start with `getAll` (for example, `getAllByType`).\n */\ntype GetAllParams = {\n\t/**\n\t * Limit the number of documents queried. If a number is not provided, there\n\t * will be no limit and all matching documents will be returned.\n\t */\n\tlimit?: number;\n};\n\n/**\n * Arguments to determine how the URL for a preview session is resolved.\n */\ntype ResolvePreviewArgs<LinkResolverReturnType> = {\n\t/**\n\t * A function that maps a Prismic document to a URL within your app.\n\t */\n\tlinkResolver?: LinkResolverFunction<LinkResolverReturnType>;\n\n\t/**\n\t * A fallback URL if the link resolver does not return a value.\n\t */\n\tdefaultURL: string;\n\n\t/**\n\t * The preview token (also known as a ref) that will be used to query preview\n\t * content from the Prismic repository.\n\t */\n\tpreviewToken?: string;\n\n\t/**\n\t * The previewed document that will be used to determine the destination URL.\n\t */\n\tdocumentID?: string;\n};\n\n/**\n * The result of a `fetch()` job.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype FetchJobResult<TJSON = any> = {\n\tstatus: number;\n\tjson: TJSON;\n};\n\n/**\n * Type definitions for the `createClient()` function. May be augmented by\n * third-party libraries.\n */\nexport interface CreateClient {\n\t<TDocuments extends PrismicDocument>(\n\t\t...args: ConstructorParameters<typeof Client>\n\t): Client<TDocuments>;\n}\n\n/**\n * Creates a Prismic client that can be used to query a repository.\n *\n * @example\n *\n * ```ts\n * // With a repository name.\n * createClient(\"qwerty\");\n *\n * // Or with a full Prismic Rest API V2 endpoint.\n * createClient(\"https://qwerty.cdn.prismic.io/api/v2\");\n * ```\n *\n * @typeParam TDocuments - A map of Prismic document type IDs mapped to their\n *   TypeScript type.\n * @param repositoryNameOrEndpoint - The Prismic repository name or full Rest\n *   API V2 endpoint for the repository.\n * @param options - Configuration that determines how content will be queried\n *   from the Prismic repository.\n *\n * @returns A client that can query content from the repository.\n */\nexport const createClient: CreateClient = <TDocuments extends PrismicDocument>(\n\trepositoryNameOrEndpoint: string,\n\toptions?: ClientConfig,\n) => new Client<TDocuments>(repositoryNameOrEndpoint, options);\n\n/**\n * A client that allows querying content from a Prismic repository.\n *\n * If used in an environment where a global `fetch` function is unavailable,\n * such as Node.js, the `fetch` option must be provided as part of the `options`\n * parameter.\n *\n * @typeParam TDocuments - Document types that are registered for the Prismic\n *   repository. Query methods will automatically be typed based on this type.\n */\nexport class Client<TDocuments extends PrismicDocument = PrismicDocument> {\n\t/**\n\t * The Prismic REST API V2 endpoint for the repository (use\n\t * `prismic.getRepositoryEndpoint` for the default endpoint).\n\t */\n\tendpoint: string;\n\n\t/**\n\t * The secure token for accessing the API (only needed if your repository is\n\t * set to private).\n\t *\n\t * {@link https://user-guides.prismic.io/en/articles/1036153-generating-an-access-token}\n\t */\n\taccessToken?: string;\n\n\t/**\n\t * A list of route resolver objects that define how a document's `url` field\n\t * is resolved.\n\t *\n\t * {@link https://prismic.io/docs/route-resolver}\n\t */\n\troutes?: NonNullable<BuildQueryURLArgs[\"routes\"]>;\n\n\t/**\n\t * The `brokenRoute` option allows you to define the route populated in the\n\t * `url` property for broken link or content relationship fields. A broken\n\t * link is a link or content relationship field whose linked document has been\n\t * unpublished or deleted.\n\t *\n\t * {@link https://prismic.io/docs/route-resolver}\n\t */\n\tbrokenRoute?: NonNullable<BuildQueryURLArgs[\"brokenRoute\"]>;\n\n\t/**\n\t * The function used to make network requests to the Prismic REST API. In\n\t * environments where a global `fetch` function does not exist, such as\n\t * Node.js, this function must be provided.\n\t */\n\tfetchFn: FetchLike;\n\n\tfetchOptions?: RequestInitLike;\n\n\t/**\n\t * Default parameters that will be sent with each query. These parameters can\n\t * be overridden on each query if needed.\n\t */\n\tdefaultParams?: Omit<\n\t\tBuildQueryURLArgs,\n\t\t\"ref\" | \"integrationFieldsRef\" | \"accessToken\" | \"routes\"\n\t>;\n\n\t/**\n\t * The client's ref mode state. This determines which ref is used during\n\t * queries.\n\t */\n\tprivate refState: RefState = {\n\t\tmode: RefStateMode.Master,\n\t\tautoPreviewsEnabled: true,\n\t};\n\n\t/**\n\t * Cached repository value.\n\t */\n\tprivate cachedRepository: Repository | undefined;\n\n\t/**\n\t * Timestamp at which the cached repository data is considered stale.\n\t */\n\tprivate cachedRepositoryExpiration = 0;\n\n\t/**\n\t * Active `fetch()` jobs keyed by URL and AbortSignal (if it exists).\n\t */\n\tprivate fetchJobs: Record<\n\t\tstring,\n\t\tMap<AbortSignalLike | undefined, Promise<FetchJobResult>>\n\t> = {};\n\n\t/**\n\t * Creates a Prismic client that can be used to query a repository.\n\t *\n\t * If used in an environment where a global `fetch` function is unavailable,\n\t * such as Node.js, the `fetch` option must be provided as part of the\n\t * `options` parameter.\n\t *\n\t * @param repositoryNameOrEndpoint - The Prismic repository name or full Rest\n\t *   API V2 endpoint for the repository.\n\t * @param options - Configuration that determines how content will be queried\n\t *   from the Prismic repository.\n\t *\n\t * @returns A client that can query content from the repository.\n\t */\n\tconstructor(repositoryNameOrEndpoint: string, options: ClientConfig = {}) {\n\t\tif (isRepositoryEndpoint(repositoryNameOrEndpoint)) {\n\t\t\tif (process.env.NODE_ENV === \"development\") {\n\t\t\t\t// Matches non-API v2 `.prismic.io` endpoints, see: https://regex101.com/r/xRsavu/1\n\t\t\t\tif (/\\.prismic\\.io\\/(?!api\\/v2\\/?)/i.test(repositoryNameOrEndpoint)) {\n\t\t\t\t\tthrow new PrismicError(\n\t\t\t\t\t\t\"@prismicio/client only supports Prismic Rest API V2. Please provide only the repository name to the first createClient() parameter or use the getRepositoryEndpoint() helper to generate a valid Rest API V2 endpoint URL.\",\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst hostname = new URL(\n\t\t\t\t\trepositoryNameOrEndpoint,\n\t\t\t\t).hostname.toLowerCase();\n\n\t\t\t\t// Matches non-.cdn `.prismic.io` endpoints\n\t\t\t\tif (\n\t\t\t\t\thostname.endsWith(\".prismic.io\") &&\n\t\t\t\t\t!hostname.endsWith(\".cdn.prismic.io\")\n\t\t\t\t) {\n\t\t\t\t\tconst repositoryName = getRepositoryName(repositoryNameOrEndpoint);\n\t\t\t\t\tconst dotCDNEndpoint = getRepositoryEndpoint(repositoryName);\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`[@prismicio/client] A non-.cdn endpoint was provided to create a client with (\\`${repositoryNameOrEndpoint}\\`). Non-.cdn endpoints can have unexpected side-effects and cause performance issues when querying Prismic. Please convert it to the \\`.cdn\\` alternative (\\`${dotCDNEndpoint}\\`) or use the repository name directly instead (\\`${repositoryName}\\`). For more details, see ${devMsg(\n\t\t\t\t\t\t\t\"endpoint-must-use-cdn\",\n\t\t\t\t\t\t)}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.endpoint = repositoryNameOrEndpoint;\n\t\t} else {\n\t\t\tthis.endpoint = getRepositoryEndpoint(repositoryNameOrEndpoint);\n\t\t}\n\n\t\tthis.accessToken = options.accessToken;\n\t\tthis.routes = options.routes;\n\t\tthis.brokenRoute = options.brokenRoute;\n\t\tthis.fetchOptions = options.fetchOptions;\n\t\tthis.defaultParams = options.defaultParams;\n\n\t\tif (options.ref) {\n\t\t\tthis.queryContentFromRef(options.ref);\n\t\t}\n\n\t\tif (typeof options.fetch === \"function\") {\n\t\t\tthis.fetchFn = options.fetch;\n\t\t} else if (typeof globalThis.fetch === \"function\") {\n\t\t\tthis.fetchFn = globalThis.fetch as FetchLike;\n\t\t} else {\n\t\t\tthrow new PrismicError(\n\t\t\t\t\"A valid fetch implementation was not provided. In environments where fetch is not available (including Node.js), a fetch implementation must be provided via a polyfill or the `fetch` option.\",\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t);\n\t\t}\n\n\t\t// If the global fetch function is used, we must bind it to the global scope.\n\t\tif (this.fetchFn === globalThis.fetch) {\n\t\t\tthis.fetchFn = this.fetchFn.bind(globalThis);\n\t\t}\n\n\t\tthis.graphQLFetch = this.graphQLFetch.bind(this);\n\t}\n\n\t/**\n\t * Enables the client to automatically query content from a preview session if\n\t * one is active in browser environments. This is enabled by default in the\n\t * browser.\n\t *\n\t * For server environments, use `enableAutoPreviewsFromReq`.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * client.enableAutoPreviews();\n\t * ```\n\t *\n\t * @see enableAutoPreviewsFromReq\n\t */\n\tenableAutoPreviews(): void {\n\t\tthis.refState.autoPreviewsEnabled = true;\n\t}\n\n\t/**\n\t * Enables the client to automatically query content from a preview session if\n\t * one is active in server environments. This is disabled by default on the\n\t * server.\n\t *\n\t * For browser environments, use `enableAutoPreviews`.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // In an express app\n\t * app.get(\"/\", function (req, res) {\n\t * \tclient.enableAutoPreviewsFromReq(req);\n\t * });\n\t * ```\n\t *\n\t * @param req - An HTTP server request object containing the request's\n\t *   cookies.\n\t */\n\tenableAutoPreviewsFromReq<R extends HttpRequestLike>(req: R): void {\n\t\tthis.refState.httpRequest = req;\n\t\tthis.refState.autoPreviewsEnabled = true;\n\t}\n\n\t/**\n\t * Disables the client from automatically querying content from a preview\n\t * session if one is active.\n\t *\n\t * Automatic preview content querying is enabled by default unless this method\n\t * is called.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * client.disableAutoPreviews();\n\t * ```\n\t */\n\tdisableAutoPreviews(): void {\n\t\tthis.refState.autoPreviewsEnabled = false;\n\t}\n\n\t/**\n\t * Queries content from the Prismic repository.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.get();\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param params - Parameters to filter, sort, and paginate results.\n\t *\n\t * @returns A paginated response containing the result of the query.\n\t */\n\tasync get<TDocument extends TDocuments>(\n\t\tparams?: Partial<BuildQueryURLArgs> & FetchParams,\n\t): Promise<Query<TDocument>> {\n\t\tconst url = await this.buildQueryURL(params);\n\n\t\treturn await this.fetch<Query<TDocument>>(url, params);\n\t}\n\n\t/**\n\t * Queries content from the Prismic repository and returns only the first\n\t * result, if any.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const document = await client.getFirst();\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of the Prismic document returned.\n\t *\n\t * @param params - Parameters to filter, sort, and paginate results. @returns\n\t *   The first result of the query, if any.\n\t */\n\tasync getFirst<TDocument extends TDocuments>(\n\t\tparams?: Partial<BuildQueryURLArgs> & FetchParams,\n\t): Promise<TDocument> {\n\t\tconst actualParams = { ...params };\n\t\tif (!(params && params.page) && !params?.pageSize) {\n\t\t\tactualParams.pageSize = this.defaultParams?.pageSize ?? 1;\n\t\t}\n\t\tconst url = await this.buildQueryURL(actualParams);\n\t\tconst result = await this.fetch<Query<TDocument>>(url, params);\n\n\t\tconst firstResult = result.results[0];\n\n\t\tif (firstResult) {\n\t\t\treturn firstResult;\n\t\t}\n\n\t\tthrow new PrismicError(\"No documents were returned\", url, undefined);\n\t}\n\n\t/**\n\t * **IMPORTANT**: Avoid using `dangerouslyGetAll` as it may be slower and\n\t * require more resources than other methods. Prefer using other methods that\n\t * filter by filters such as `getAllByType`.\n\t *\n\t * Queries content from the Prismic repository and returns all matching\n\t * content. If no filters are provided, all documents will be fetched.\n\t *\n\t * This method may make multiple network requests to query all matching\n\t * content.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.dangerouslyGetAll();\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param params - Parameters to filter, sort, and paginate results.\n\t *\n\t * @returns A list of documents matching the query.\n\t */\n\tasync dangerouslyGetAll<TDocument extends TDocuments>(\n\t\tparams: Partial<Omit<BuildQueryURLArgs, \"page\">> &\n\t\t\tGetAllParams &\n\t\t\tFetchParams = {},\n\t): Promise<TDocument[]> {\n\t\tconst { limit = Infinity, ...actualParams } = params;\n\t\tconst resolvedParams = {\n\t\t\t...actualParams,\n\t\t\tpageSize: Math.min(\n\t\t\t\tlimit,\n\t\t\t\tactualParams.pageSize || this.defaultParams?.pageSize || MAX_PAGE_SIZE,\n\t\t\t),\n\t\t};\n\n\t\tconst documents: TDocument[] = [];\n\t\tlet latestResult: Query<TDocument> | undefined;\n\n\t\twhile (\n\t\t\t(!latestResult || latestResult.next_page) &&\n\t\t\tdocuments.length < limit\n\t\t) {\n\t\t\tconst page = latestResult ? latestResult.page + 1 : undefined;\n\n\t\t\tlatestResult = await this.get<TDocument>({ ...resolvedParams, page });\n\t\t\tdocuments.push(...latestResult.results);\n\n\t\t\tif (latestResult.next_page) {\n\t\t\t\tawait new Promise((res) => setTimeout(res, GET_ALL_QUERY_DELAY));\n\t\t\t}\n\t\t}\n\n\t\treturn documents.slice(0, limit);\n\t}\n\n\t/**\n\t * Queries a document from the Prismic repository with a specific ID.\n\t *\n\t * @remarks\n\t * A document's UID is different from its ID. An ID is automatically generated\n\t * for all documents and is made available on its `id` property. A UID is\n\t * provided in the Prismic editor and is unique among all documents of its\n\t * custom type.\n\t * @example\n\t *\n\t * ```ts\n\t * const document = await client.getByID(\"WW4bKScAAMAqmluX\");\n\t * ```\n\t *\n\t * @typeParam TDocument- Type of the Prismic document returned.\n\t *\n\t * @param id - ID of the document.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns The document with an ID matching the `id` parameter, if a matching\n\t *   document exists.\n\t */\n\tasync getByID<TDocument extends TDocuments>(\n\t\tid: string,\n\t\tparams?: Partial<BuildQueryURLArgs> & FetchParams,\n\t): Promise<TDocument> {\n\t\treturn await this.getFirst<TDocument>(\n\t\t\tappendFilters(params, filter.at(\"document.id\", id)),\n\t\t);\n\t}\n\n\t/**\n\t * Queries documents from the Prismic repository with specific IDs.\n\t *\n\t * @remarks\n\t * A document's UID is different from its ID. An ID is automatically generated\n\t * for all documents and is made available on its `id` property. A UID is\n\t * provided in the Prismic editor and is unique among all documents of its\n\t * custom type.\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.getByIDs([\n\t * \t\"WW4bKScAAMAqmluX\",\n\t * \t\"U1kTRgEAAC8A5ldS\",\n\t * ]);\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param ids - A list of document IDs.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A paginated response containing documents with IDs matching the\n\t *   `ids` parameter.\n\t */\n\tasync getByIDs<TDocument extends TDocuments>(\n\t\tids: string[],\n\t\tparams?: Partial<BuildQueryURLArgs> & FetchParams,\n\t): Promise<Query<TDocument>> {\n\t\treturn await this.get<TDocument>(\n\t\t\tappendFilters(params, filter.in(\"document.id\", ids)),\n\t\t);\n\t}\n\n\t/**\n\t * Queries all documents from the Prismic repository with specific IDs.\n\t *\n\t * This method may make multiple network requests to query all matching\n\t * content.\n\t *\n\t * @remarks\n\t * A document's UID is different from its ID. An ID is automatically generated\n\t * for all documents and is made available on its `id` property. A UID is\n\t * provided in the Prismic editor and is unique among all documents of its\n\t * custom type.\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.getAllByIDs([\n\t * \t\"WW4bKScAAMAqmluX\",\n\t * \t\"U1kTRgEAAC8A5ldS\",\n\t * ]);\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param ids - A list of document IDs.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A list of documents with IDs matching the `ids` parameter.\n\t */\n\tasync getAllByIDs<TDocument extends TDocuments>(\n\t\tids: string[],\n\t\tparams?: Partial<BuildQueryURLArgs> & GetAllParams & FetchParams,\n\t): Promise<TDocument[]> {\n\t\treturn await this.dangerouslyGetAll<TDocument>(\n\t\t\tappendFilters(params, filter.in(\"document.id\", ids)),\n\t\t);\n\t}\n\n\t/**\n\t * Queries a document from the Prismic repository with a specific UID and\n\t * custom type.\n\t *\n\t * @remarks\n\t * A document's UID is different from its ID. An ID is automatically generated\n\t * for all documents and is made available on its `id` property. A UID is\n\t * provided in the Prismic editor and is unique among all documents of its\n\t * custom type.\n\t * @example\n\t *\n\t * ```ts\n\t * const document = await client.getByUID(\"blog_post\", \"my-first-post\");\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of the Prismic document returned.\n\t *\n\t * @param documentType - The API ID of the document's custom type.\n\t * @param uid - UID of the document.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns The document with a UID matching the `uid` parameter, if a\n\t *   matching document exists.\n\t */\n\tasync getByUID<\n\t\tTDocument extends TDocuments,\n\t\tTDocumentType extends TDocument[\"type\"] = TDocument[\"type\"],\n\t>(\n\t\tdocumentType: TDocumentType,\n\t\tuid: string,\n\t\tparams?: Partial<BuildQueryURLArgs> & FetchParams,\n\t): Promise<ExtractDocumentType<TDocument, TDocumentType>> {\n\t\treturn await this.getFirst<ExtractDocumentType<TDocument, TDocumentType>>(\n\t\t\tappendFilters(params, [\n\t\t\t\ttypeFilter(documentType),\n\t\t\t\tfilter.at(`my.${documentType}.uid`, uid),\n\t\t\t]),\n\t\t);\n\t}\n\n\t/**\n\t * Queries document from the Prismic repository with specific UIDs and Custom\n\t * Type.\n\t *\n\t * @remarks\n\t * A document's UID is different from its ID. An ID is automatically generated\n\t * for all documents and is made available on its `id` property. A UID is\n\t * provided in the Prismic editor and is unique among all documents of its\n\t * custom type.\n\t * @example\n\t *\n\t * ```ts\n\t * const document = await client.getByUIDs(\"blog_post\", [\n\t * \t\"my-first-post\",\n\t * \t\"my-second-post\",\n\t * ]);\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of the Prismic document returned.\n\t *\n\t * @param documentType - The API ID of the document's custom type.\n\t * @param uids - A list of document UIDs.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A paginated response containing documents with UIDs matching the\n\t *   `uids` parameter.\n\t */\n\tasync getByUIDs<\n\t\tTDocument extends TDocuments,\n\t\tTDocumentType extends TDocument[\"type\"] = TDocument[\"type\"],\n\t>(\n\t\tdocumentType: TDocumentType,\n\t\tuids: string[],\n\t\tparams?: Partial<BuildQueryURLArgs> & FetchParams,\n\t): Promise<Query<ExtractDocumentType<TDocument, TDocumentType>>> {\n\t\treturn await this.get<ExtractDocumentType<TDocument, TDocumentType>>(\n\t\t\tappendFilters(params, [\n\t\t\t\ttypeFilter(documentType),\n\t\t\t\tfilter.in(`my.${documentType}.uid`, uids),\n\t\t\t]),\n\t\t);\n\t}\n\n\t/**\n\t * Queries all documents from the Prismic repository with specific UIDs and\n\t * custom type.\n\t *\n\t * This method may make multiple network requests to query all matching\n\t * content.\n\t *\n\t * @remarks\n\t * A document's UID is different from its ID. An ID is automatically generated\n\t * for all documents and is made available on its `id` property. A UID is\n\t * provided in the Prismic editor and is unique among all documents of its\n\t * custom type.\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.getAllByUIDs([\n\t * \t\"my-first-post\",\n\t * \t\"my-second-post\",\n\t * ]);\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param documentType - The API ID of the document's custom type.\n\t * @param uids - A list of document UIDs.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A list of documents with UIDs matching the `uids` parameter.\n\t */\n\tasync getAllByUIDs<\n\t\tTDocument extends TDocuments,\n\t\tTDocumentType extends TDocument[\"type\"] = TDocument[\"type\"],\n\t>(\n\t\tdocumentType: TDocumentType,\n\t\tuids: string[],\n\t\tparams?: Partial<BuildQueryURLArgs> & GetAllParams & FetchParams,\n\t): Promise<ExtractDocumentType<TDocument, TDocumentType>[]> {\n\t\treturn await this.dangerouslyGetAll<\n\t\t\tExtractDocumentType<TDocument, TDocumentType>\n\t\t>(\n\t\t\tappendFilters(params, [\n\t\t\t\ttypeFilter(documentType),\n\t\t\t\tfilter.in(`my.${documentType}.uid`, uids),\n\t\t\t]),\n\t\t);\n\t}\n\n\t/**\n\t * Queries a singleton document from the Prismic repository for a specific\n\t * custom type.\n\t *\n\t * @remarks\n\t * A singleton document is one that is configured in Prismic to only allow one\n\t * instance. For example, a repository may be configured to contain just one\n\t * Settings document. This is in contrast to a repeatable custom type which\n\t * allows multiple instances of itself.\n\t * @example\n\t *\n\t * ```ts\n\t * const document = await client.getSingle(\"settings\");\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of the Prismic document returned.\n\t *\n\t * @param documentType - The API ID of the singleton custom type.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns The singleton document for the custom type, if a matching document\n\t *   exists.\n\t */\n\tasync getSingle<\n\t\tTDocument extends TDocuments,\n\t\tTDocumentType extends TDocument[\"type\"] = TDocument[\"type\"],\n\t>(\n\t\tdocumentType: TDocumentType,\n\t\tparams?: Partial<BuildQueryURLArgs> & FetchParams,\n\t): Promise<ExtractDocumentType<TDocument, TDocumentType>> {\n\t\treturn await this.getFirst<ExtractDocumentType<TDocument, TDocumentType>>(\n\t\t\tappendFilters(params, typeFilter(documentType)),\n\t\t);\n\t}\n\n\t/**\n\t * Queries documents from the Prismic repository for a specific custom type.\n\t *\n\t * Use `getAllByType` instead if you need to query all documents for a\n\t * specific custom type.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.getByType(\"blog_post\");\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param documentType - The API ID of the custom type.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A paginated response containing documents of the custom type.\n\t */\n\tasync getByType<\n\t\tTDocument extends TDocuments,\n\t\tTDocumentType extends TDocument[\"type\"] = TDocument[\"type\"],\n\t>(\n\t\tdocumentType: TDocumentType,\n\t\tparams?: Partial<BuildQueryURLArgs> & FetchParams,\n\t): Promise<Query<ExtractDocumentType<TDocument, TDocumentType>>> {\n\t\treturn await this.get<ExtractDocumentType<TDocument, TDocumentType>>(\n\t\t\tappendFilters(params, typeFilter(documentType)),\n\t\t);\n\t}\n\n\t/**\n\t * Queries all documents from the Prismic repository for a specific Custom\n\t * Type.\n\t *\n\t * This method may make multiple network requests to query all matching\n\t * content.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.getByType(\"blog_post\");\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param documentType - The API ID of the custom type.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A list of all documents of the custom type.\n\t */\n\tasync getAllByType<\n\t\tTDocument extends TDocuments,\n\t\tTDocumentType extends TDocument[\"type\"] = TDocument[\"type\"],\n\t>(\n\t\tdocumentType: TDocumentType,\n\t\tparams?: Partial<Omit<BuildQueryURLArgs, \"page\">> &\n\t\t\tGetAllParams &\n\t\t\tFetchParams,\n\t): Promise<ExtractDocumentType<TDocument, TDocumentType>[]> {\n\t\treturn await this.dangerouslyGetAll<\n\t\t\tExtractDocumentType<TDocument, TDocumentType>\n\t\t>(appendFilters(params, typeFilter(documentType)));\n\t}\n\n\t/**\n\t * Queries documents from the Prismic repository with a specific tag.\n\t *\n\t * Use `getAllByTag` instead if you need to query all documents with a\n\t * specific tag.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.getByTag(\"food\");\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param tag - The tag that must be included on a document.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A paginated response containing documents with the tag.\n\t */\n\tasync getByTag<TDocument extends TDocuments>(\n\t\ttag: string,\n\t\tparams?: Partial<BuildQueryURLArgs> & FetchParams,\n\t): Promise<Query<TDocument>> {\n\t\treturn await this.get<TDocument>(\n\t\t\tappendFilters(params, someTagsFilter(tag)),\n\t\t);\n\t}\n\n\t/**\n\t * Queries all documents from the Prismic repository with a specific tag.\n\t *\n\t * This method may make multiple network requests to query all matching\n\t * content.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.getAllByTag(\"food\");\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param tag - The tag that must be included on a document.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A list of all documents with the tag.\n\t */\n\tasync getAllByTag<TDocument extends TDocuments>(\n\t\ttag: string,\n\t\tparams?: Partial<Omit<BuildQueryURLArgs, \"page\">> &\n\t\t\tGetAllParams &\n\t\t\tFetchParams,\n\t): Promise<TDocument[]> {\n\t\treturn await this.dangerouslyGetAll<TDocument>(\n\t\t\tappendFilters(params, someTagsFilter(tag)),\n\t\t);\n\t}\n\n\t/**\n\t * Queries documents from the Prismic repository with specific tags. A\n\t * document must be tagged with all of the queried tags to be included.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.getByEveryTag([\"food\", \"fruit\"]);\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param tags - A list of tags that must be included on a document.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A paginated response containing documents with the tags.\n\t */\n\tasync getByEveryTag<TDocument extends TDocuments>(\n\t\ttags: string[],\n\t\tparams?: Partial<BuildQueryURLArgs> & FetchParams,\n\t): Promise<Query<TDocument>> {\n\t\treturn await this.get<TDocument>(\n\t\t\tappendFilters(params, everyTagFilter(tags)),\n\t\t);\n\t}\n\n\t/**\n\t * Queries documents from the Prismic repository with specific tags. A\n\t * document must be tagged with all of the queried tags to be included.\n\t *\n\t * This method may make multiple network requests to query all matching\n\t * content.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.getAllByEveryTag([\"food\", \"fruit\"]);\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param tags - A list of tags that must be included on a document.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A list of all documents with the tags.\n\t */\n\tasync getAllByEveryTag<TDocument extends TDocuments>(\n\t\ttags: string[],\n\t\tparams?: Partial<Omit<BuildQueryURLArgs, \"page\">> &\n\t\t\tGetAllParams &\n\t\t\tFetchParams,\n\t): Promise<TDocument[]> {\n\t\treturn await this.dangerouslyGetAll<TDocument>(\n\t\t\tappendFilters(params, everyTagFilter(tags)),\n\t\t);\n\t}\n\n\t/**\n\t * Queries documents from the Prismic repository with specific tags. A\n\t * document must be tagged with at least one of the queried tags to be\n\t * included.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.getByEveryTag([\"food\", \"fruit\"]);\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param tags - A list of tags that must be included on a document.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A paginated response containing documents with at least one of the\n\t *   tags.\n\t */\n\tasync getBySomeTags<TDocument extends TDocuments>(\n\t\ttags: string[],\n\t\tparams?: Partial<BuildQueryURLArgs> & FetchParams,\n\t): Promise<Query<TDocument>> {\n\t\treturn await this.get<TDocument>(\n\t\t\tappendFilters(params, someTagsFilter(tags)),\n\t\t);\n\t}\n\n\t/**\n\t * Queries documents from the Prismic repository with specific tags. A\n\t * document must be tagged with at least one of the queried tags to be\n\t * included.\n\t *\n\t * This method may make multiple network requests to query all matching\n\t * content.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const response = await client.getAllBySomeTags([\"food\", \"fruit\"]);\n\t * ```\n\t *\n\t * @typeParam TDocument - Type of Prismic documents returned.\n\t *\n\t * @param tags - A list of tags that must be included on a document.\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A list of all documents with at least one of the tags.\n\t */\n\tasync getAllBySomeTags<TDocument extends TDocuments>(\n\t\ttags: string[],\n\t\tparams?: Partial<Omit<BuildQueryURLArgs, \"page\">> &\n\t\t\tGetAllParams &\n\t\t\tFetchParams,\n\t): Promise<TDocument[]> {\n\t\treturn await this.dangerouslyGetAll<TDocument>(\n\t\t\tappendFilters(params, someTagsFilter(tags)),\n\t\t);\n\t}\n\n\t/**\n\t * Returns metadata about the Prismic repository, such as its refs, releases,\n\t * and custom types.\n\t *\n\t * @returns Repository metadata.\n\t */\n\tasync getRepository(params?: FetchParams): Promise<Repository> {\n\t\t// TODO: Restore when Authorization header support works in browsers with CORS.\n\t\t// return await this.fetch<Repository>(this.endpoint);\n\n\t\tconst url = new URL(this.endpoint);\n\n\t\tif (this.accessToken) {\n\t\t\turl.searchParams.set(\"access_token\", this.accessToken);\n\t\t}\n\n\t\treturn await this.fetch<Repository>(url.toString(), params);\n\t}\n\n\t/**\n\t * Returns a list of all refs for the Prismic repository.\n\t *\n\t * Refs are used to identify which version of the repository's content should\n\t * be queried. All repositories will have at least one ref pointing to the\n\t * latest published content called the \"master ref\".\n\t *\n\t * @returns A list of all refs for the Prismic repository.\n\t */\n\tasync getRefs(params?: FetchParams): Promise<Ref[]> {\n\t\tconst repository = await this.getRepository(params);\n\n\t\treturn repository.refs;\n\t}\n\n\t/**\n\t * Returns a ref for the Prismic repository with a matching ID.\n\t *\n\t * @param id - ID of the ref.\n\t *\n\t * @returns The ref with a matching ID, if it exists.\n\t */\n\tasync getRefByID(id: string, params?: FetchParams): Promise<Ref> {\n\t\tconst refs = await this.getRefs(params);\n\n\t\treturn findRefByID(refs, id);\n\t}\n\n\t/**\n\t * Returns a ref for the Prismic repository with a matching label.\n\t *\n\t * @param label - Label of the ref.\n\t *\n\t * @returns The ref with a matching label, if it exists.\n\t */\n\tasync getRefByLabel(label: string, params?: FetchParams): Promise<Ref> {\n\t\tconst refs = await this.getRefs(params);\n\n\t\treturn findRefByLabel(refs, label);\n\t}\n\n\t/**\n\t * Returns the master ref for the Prismic repository. The master ref points to\n\t * the repository's latest published content.\n\t *\n\t * @returns The repository's master ref.\n\t */\n\tasync getMasterRef(params?: FetchParams): Promise<Ref> {\n\t\tconst refs = await this.getRefs(params);\n\n\t\treturn findMasterRef(refs);\n\t}\n\n\t/**\n\t * Returns a list of all Releases for the Prismic repository. Releases are\n\t * used to group content changes before publishing.\n\t *\n\t * @returns A list of all Releases for the Prismic repository.\n\t */\n\tasync getReleases(params?: FetchParams): Promise<Ref[]> {\n\t\tconst refs = await this.getRefs(params);\n\n\t\treturn refs.filter((ref) => !ref.isMasterRef);\n\t}\n\n\t/**\n\t * Returns a Release for the Prismic repository with a matching ID.\n\t *\n\t * @param id - ID of the Release.\n\t *\n\t * @returns The Release with a matching ID, if it exists.\n\t */\n\tasync getReleaseByID(id: string, params?: FetchParams): Promise<Ref> {\n\t\tconst releases = await this.getReleases(params);\n\n\t\treturn findRefByID(releases, id);\n\t}\n\n\t/**\n\t * Returns a Release for the Prismic repository with a matching label.\n\t *\n\t * @param label - Label of the ref.\n\t *\n\t * @returns The ref with a matching label, if it exists.\n\t */\n\tasync getReleaseByLabel(label: string, params?: FetchParams): Promise<Ref> {\n\t\tconst releases = await this.getReleases(params);\n\n\t\treturn findRefByLabel(releases, label);\n\t}\n\n\t/**\n\t * Returns a list of all tags used in the Prismic repository.\n\t *\n\t * @returns A list of all tags used in the repository.\n\t */\n\tasync getTags(params?: FetchParams): Promise<string[]> {\n\t\ttry {\n\t\t\tconst tagsForm = await this.getCachedRepositoryForm(\"tags\", params);\n\n\t\t\tconst url = new URL(tagsForm.action);\n\n\t\t\tif (this.accessToken) {\n\t\t\t\turl.searchParams.set(\"access_token\", this.accessToken);\n\t\t\t}\n\n\t\t\treturn await this.fetch<string[]>(url.toString(), params);\n\t\t} catch {\n\t\t\tconst repository = await this.getRepository(params);\n\n\t\t\treturn repository.tags;\n\t\t}\n\t}\n\n\t/**\n\t * Builds a URL used to query content from the Prismic repository.\n\t *\n\t * @param params - Parameters to filter, sort, and paginate the results.\n\t *\n\t * @returns A URL string that can be requested to query content.\n\t */\n\tasync buildQueryURL({\n\t\tsignal,\n\t\tfetchOptions,\n\t\t...params\n\t}: Partial<BuildQueryURLArgs> & FetchParams = {}): Promise<string> {\n\t\tconst ref =\n\t\t\tparams.ref || (await this.getResolvedRefString({ signal, fetchOptions }));\n\t\tconst integrationFieldsRef =\n\t\t\tparams.integrationFieldsRef ||\n\t\t\t(await this.getCachedRepository({ signal, fetchOptions }))\n\t\t\t\t.integrationFieldsRef ||\n\t\t\tundefined;\n\n\t\treturn buildQueryURL(this.endpoint, {\n\t\t\t...this.defaultParams,\n\t\t\t...params,\n\t\t\tref,\n\t\t\tintegrationFieldsRef,\n\t\t\troutes: params.routes || this.routes,\n\t\t\tbrokenRoute: params.brokenRoute || this.brokenRoute,\n\t\t\taccessToken: params.accessToken || this.accessToken,\n\t\t});\n\t}\n\n\t/**\n\t * Determines the URL for a previewed document during an active preview\n\t * session. The result of this method should be used to redirect the user to\n\t * the document's URL.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * \tconst url = client.resolvePreviewURL({\n\t * \tlinkResolver: (document) => `/${document.uid}`\n\t * \tdefaultURL: '/'\n\t * \t})\n\t * ```\n\t *\n\t * @param args - Arguments to configure the URL resolving.\n\t *\n\t * @returns The URL for the previewed document during an active preview\n\t *   session. The user should be redirected to this URL.\n\t */\n\tasync resolvePreviewURL<LinkResolverReturnType>(\n\t\targs: ResolvePreviewArgs<LinkResolverReturnType> & FetchParams,\n\t): Promise<string> {\n\t\tlet documentID: string | undefined | null = args.documentID;\n\t\tlet previewToken: string | undefined | null = args.previewToken;\n\n\t\tif (typeof globalThis.location !== \"undefined\") {\n\t\t\tconst searchParams = new URLSearchParams(globalThis.location.search);\n\n\t\t\tdocumentID = documentID || searchParams.get(\"documentId\");\n\t\t\tpreviewToken = previewToken || searchParams.get(\"token\");\n\t\t} else if (this.refState.httpRequest) {\n\t\t\tif (\"query\" in this.refState.httpRequest) {\n\t\t\t\tdocumentID =\n\t\t\t\t\tdocumentID || (this.refState.httpRequest.query?.documentId as string);\n\t\t\t\tpreviewToken =\n\t\t\t\t\tpreviewToken || (this.refState.httpRequest.query?.token as string);\n\t\t\t} else if (\n\t\t\t\t\"url\" in this.refState.httpRequest &&\n\t\t\t\tthis.refState.httpRequest.url\n\t\t\t) {\n\t\t\t\t// Including \"missing-host://\" by default\n\t\t\t\t// handles a case where Next.js Route Handlers\n\t\t\t\t// only provide the pathname and search\n\t\t\t\t// parameters in the `url` property\n\t\t\t\t// (e.g. `/api/preview?foo=bar`).\n\t\t\t\tconst searchParams = new URL(\n\t\t\t\t\tthis.refState.httpRequest.url,\n\t\t\t\t\t\"missing-host://\",\n\t\t\t\t).searchParams;\n\n\t\t\t\tdocumentID = documentID || searchParams.get(\"documentId\");\n\t\t\t\tpreviewToken = previewToken || searchParams.get(\"token\");\n\t\t\t}\n\t\t}\n\n\t\tif (documentID != null && previewToken != null) {\n\t\t\tconst document = await this.getByID(documentID, {\n\t\t\t\tref: previewToken,\n\t\t\t\tlang: \"*\",\n\t\t\t\tsignal: args.signal,\n\t\t\t\tfetchOptions: args.fetchOptions,\n\t\t\t});\n\n\t\t\tconst url = asLink(document, { linkResolver: args.linkResolver });\n\n\t\t\tif (typeof url === \"string\") {\n\t\t\t\treturn url;\n\t\t\t}\n\t\t}\n\n\t\treturn args.defaultURL;\n\t}\n\n\t/**\n\t * Configures the client to query the latest published content for all future\n\t * queries.\n\t *\n\t * If the `ref` parameter is provided during a query, it takes priority for\n\t * that query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * await client.queryLatestContent();\n\t * const document = await client.getByID(\"WW4bKScAAMAqmluX\");\n\t * ```\n\t */\n\tqueryLatestContent(): void {\n\t\tthis.refState.mode = RefStateMode.Master;\n\t}\n\n\t/**\n\t * Configures the client to query content from a specific Release identified\n\t * by its ID for all future queries.\n\t *\n\t * If the `ref` parameter is provided during a query, it takes priority for\n\t * that query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * await client.queryContentFromReleaseByID(\"YLB7OBAAACMA7Cpa\");\n\t * const document = await client.getByID(\"WW4bKScAAMAqmluX\");\n\t * ```\n\t *\n\t * @param releaseID - The ID of the Release.\n\t */\n\tqueryContentFromReleaseByID(releaseID: string): void {\n\t\tthis.refState = {\n\t\t\t...this.refState,\n\t\t\tmode: RefStateMode.ReleaseID,\n\t\t\treleaseID,\n\t\t};\n\t}\n\n\t/**\n\t * Configures the client to query content from a specific Release identified\n\t * by its label for all future queries.\n\t *\n\t * If the `ref` parameter is provided during a query, it takes priority for\n\t * that query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * await client.queryContentFromReleaseByLabel(\"My Release\");\n\t * const document = await client.getByID(\"WW4bKScAAMAqmluX\");\n\t * ```\n\t *\n\t * @param releaseLabel - The label of the Release.\n\t */\n\tqueryContentFromReleaseByLabel(releaseLabel: string): void {\n\t\tthis.refState = {\n\t\t\t...this.refState,\n\t\t\tmode: RefStateMode.ReleaseLabel,\n\t\t\treleaseLabel,\n\t\t};\n\t}\n\n\t/**\n\t * Configures the client to query content from a specific ref. The ref can be\n\t * provided as a string or a function.\n\t *\n\t * If a function is provided, the ref is fetched lazily before each query. The\n\t * function may also be asynchronous.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * await client.queryContentFromRef(\"my-ref\");\n\t * const document = await client.getByID(\"WW4bKScAAMAqmluX\");\n\t * ```\n\t *\n\t * @param ref - The ref or a function that returns the ref from which to query\n\t *   content.\n\t */\n\tqueryContentFromRef(ref: RefStringOrThunk): void {\n\t\tthis.refState = {\n\t\t\t...this.refState,\n\t\t\tmode: RefStateMode.Manual,\n\t\t\tref,\n\t\t};\n\t}\n\n\t/**\n\t * A `fetch()` function to be used with GraphQL clients configured for\n\t * Prismic's GraphQL API. It automatically applies the necessary `prismic-ref`\n\t * and Authorization headers. Queries will automatically be minified by\n\t * removing whitespace where possible.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const graphQLClient = new ApolloClient({\n\t * \tlink: new HttpLink({\n\t * \t\turi: prismic.getGraphQLEndpoint(repositoryName),\n\t * \t\t// Provide `client.graphQLFetch` as the fetch implementation.\n\t * \t\tfetch: client.graphQLFetch,\n\t * \t\t// Using GET is required.\n\t * \t\tuseGETForQueries: true,\n\t * \t}),\n\t * \tcache: new InMemoryCache(),\n\t * });\n\t * ```\n\t *\n\t * @param input - The `fetch()` `input` parameter. Only strings are supported.\n\t * @param init - The `fetch()` `init` parameter. Only plain objects are\n\t *   supported.\n\t *\n\t * @returns The `fetch()` Response for the request.\n\t *\n\t * @experimental\n\t */\n\tasync graphQLFetch(\n\t\tinput: RequestInfo,\n\t\tinit?: Omit<RequestInit, \"signal\"> & { signal?: AbortSignalLike },\n\t): Promise<Response> {\n\t\tconst cachedRepository = await this.getCachedRepository();\n\t\tconst ref = await this.getResolvedRefString();\n\n\t\tconst unsanitizedHeaders: Record<string, string> = {\n\t\t\t\"Prismic-ref\": ref,\n\t\t\tAuthorization: this.accessToken ? `Token ${this.accessToken}` : \"\",\n\t\t\t// Asserting `init.headers` is a Record since popular GraphQL\n\t\t\t// libraries pass this as a Record. Header objects as input\n\t\t\t// are unsupported.\n\t\t\t...(init ? (init.headers as Record<string, string>) : {}),\n\t\t};\n\n\t\tif (cachedRepository.integrationFieldsRef) {\n\t\t\tunsanitizedHeaders[\"Prismic-integration-field-ref\"] =\n\t\t\t\tcachedRepository.integrationFieldsRef;\n\t\t}\n\n\t\t// Normalize header keys to lowercase. This prevents header\n\t\t// conflicts between the Prismic client and the GraphQL\n\t\t// client.\n\t\tconst headers: Record<string, string> = {};\n\t\tfor (const key in unsanitizedHeaders) {\n\t\t\tif (unsanitizedHeaders[key]) {\n\t\t\t\theaders[key.toLowerCase()] =\n\t\t\t\t\tunsanitizedHeaders[key as keyof typeof unsanitizedHeaders];\n\t\t\t}\n\t\t}\n\n\t\tconst url = new URL(\n\t\t\t// Asserting `input` is a string since popular GraphQL\n\t\t\t// libraries pass this as a string. Request objects as\n\t\t\t// input are unsupported.\n\t\t\tinput as string,\n\t\t);\n\n\t\t// This prevents the request from being cached unnecessarily.\n\t\t// Without adding this `ref` param, re-running a query\n\t\t// could return a locally cached response, even if the\n\t\t// `ref` changed. This happens because the URL is\n\t\t// identical when the `ref` is not included. Caches may ignore\n\t\t// headers.\n\t\t//\n\t\t// The Prismic GraphQL API ignores the `ref` param.\n\t\turl.searchParams.set(\"ref\", ref);\n\n\t\tconst query = url.searchParams.get(\"query\");\n\t\tif (query) {\n\t\t\turl.searchParams.set(\n\t\t\t\t\"query\",\n\t\t\t\t// Compress the GraphQL query (if it exists) by\n\t\t\t\t// removing whitespace. This is done to\n\t\t\t\t// optimize the query size and avoid\n\t\t\t\t// hitting the upper limit of GET requests\n\t\t\t\t// (2048 characters).\n\t\t\t\tminifyGraphQLQuery(query),\n\t\t\t);\n\t\t}\n\n\t\treturn (await this.fetchFn(url.toString(), {\n\t\t\t...init,\n\t\t\theaders,\n\t\t})) as Response;\n\t}\n\n\t/**\n\t * Returns a cached version of `getRepository` with a TTL.\n\t *\n\t * @returns Cached repository metadata.\n\t */\n\tprivate async getCachedRepository(params?: FetchParams): Promise<Repository> {\n\t\tif (\n\t\t\t!this.cachedRepository ||\n\t\t\tDate.now() >= this.cachedRepositoryExpiration\n\t\t) {\n\t\t\tthis.cachedRepositoryExpiration = Date.now() + REPOSITORY_CACHE_TTL;\n\t\t\tthis.cachedRepository = await this.getRepository(params);\n\t\t}\n\n\t\treturn this.cachedRepository;\n\t}\n\n\t/**\n\t * Returns a cached Prismic repository form. Forms are used to determine API\n\t * endpoints for types of repository data.\n\t *\n\t * @param name - Name of the form.\n\t *\n\t * @returns The repository form.\n\t *\n\t * @throws If a matching form cannot be found.\n\t */\n\tprivate async getCachedRepositoryForm(\n\t\tname: string,\n\t\tparams?: FetchParams,\n\t): Promise<Form> {\n\t\tconst cachedRepository = await this.getCachedRepository(params);\n\t\tconst form = cachedRepository.forms[name];\n\n\t\tif (!form) {\n\t\t\tthrow new PrismicError(\n\t\t\t\t`Form with name \"${name}\" could not be found`,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t);\n\t\t}\n\n\t\treturn form;\n\t}\n\n\t/**\n\t * Returns the ref needed to query based on the client's current state. This\n\t * method may make a network request to fetch a ref or resolve the user's ref\n\t * thunk.\n\t *\n\t * If auto previews are enabled, the preview ref takes priority if available.\n\t *\n\t * The following strategies are used depending on the client's state:\n\t *\n\t * - If the user called `queryLatestContent`: Use the repository's master ref.\n\t *   The ref is cached for 5 seconds. After 5 seconds, a new master ref is\n\t *   fetched.\n\t * - If the user called `queryContentFromReleaseByID`: Use the release's ref.\n\t *   The ref is cached for 5 seconds. After 5 seconds, a new ref for the\n\t *   release is fetched.\n\t * - If the user called `queryContentFromReleaseByLabel`: Use the release's ref.\n\t *   The ref is cached for 5 seconds. After 5 seconds, a new ref for the\n\t *   release is fetched.\n\t * - If the user called `queryContentFromRef`: Use the provided ref. Fall back\n\t *   to the master ref if the ref is not a string.\n\t *\n\t * @returns The ref to use during a query.\n\t */\n\tprivate async getResolvedRefString(params?: FetchParams): Promise<string> {\n\t\tif (this.refState.autoPreviewsEnabled) {\n\t\t\tlet previewRef: string | undefined;\n\n\t\t\tlet cookieJar: string | null | undefined;\n\n\t\t\tif (this.refState.httpRequest?.headers) {\n\t\t\t\tif (\n\t\t\t\t\t\"get\" in this.refState.httpRequest.headers &&\n\t\t\t\t\ttypeof this.refState.httpRequest.headers.get === \"function\"\n\t\t\t\t) {\n\t\t\t\t\t// Web API Headers\n\t\t\t\t\tcookieJar = this.refState.httpRequest.headers.get(\"cookie\");\n\t\t\t\t} else if (\"cookie\" in this.refState.httpRequest.headers) {\n\t\t\t\t\t// Express-style headers\n\t\t\t\t\tcookieJar = this.refState.httpRequest.headers.cookie;\n\t\t\t\t}\n\t\t\t} else if (globalThis.document?.cookie) {\n\t\t\t\tcookieJar = globalThis.document.cookie;\n\t\t\t}\n\n\t\t\tif (cookieJar) {\n\t\t\t\tpreviewRef = getPreviewCookie(cookieJar);\n\t\t\t}\n\n\t\t\tif (previewRef) {\n\t\t\t\treturn previewRef;\n\t\t\t}\n\t\t}\n\n\t\tconst cachedRepository = await this.getCachedRepository(params);\n\n\t\tconst refModeType = this.refState.mode;\n\t\tif (refModeType === RefStateMode.ReleaseID) {\n\t\t\treturn findRefByID(cachedRepository.refs, this.refState.releaseID).ref;\n\t\t} else if (refModeType === RefStateMode.ReleaseLabel) {\n\t\t\treturn findRefByLabel(cachedRepository.refs, this.refState.releaseLabel)\n\t\t\t\t.ref;\n\t\t} else if (refModeType === RefStateMode.Manual) {\n\t\t\tconst res = await castThunk(this.refState.ref)();\n\n\t\t\tif (typeof res === \"string\") {\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\n\t\treturn findMasterRef(cachedRepository.refs).ref;\n\t}\n\n\t/**\n\t * Performs a network request using the configured `fetch` function. It\n\t * assumes all successful responses will have a JSON content type. It also\n\t * normalizes unsuccessful network requests.\n\t *\n\t * @typeParam T - The JSON response.\n\t *\n\t * @param url - URL to the resource to fetch.\n\t * @param params - Prismic REST API parameters for the network request.\n\t *\n\t * @returns The JSON response from the network request.\n\t */\n\tprivate async fetch<T = unknown>(\n\t\turl: string,\n\t\tparams: FetchParams = {},\n\t): Promise<T> {\n\t\tconst requestInit: RequestInitLike = {\n\t\t\t...this.fetchOptions,\n\t\t\t...params.fetchOptions,\n\t\t\theaders: {\n\t\t\t\t...this.fetchOptions?.headers,\n\t\t\t\t...params.fetchOptions?.headers,\n\t\t\t},\n\t\t\tsignal:\n\t\t\t\tparams.fetchOptions?.signal ||\n\t\t\t\tparams.signal ||\n\t\t\t\tthis.fetchOptions?.signal,\n\t\t};\n\n\t\tlet job: Promise<FetchJobResult>;\n\n\t\t// `fetchJobs` is keyed twice: first by the URL and again by is\n\t\t// signal, if one exists.\n\t\t//\n\t\t// Using two keys allows us to reuse fetch requests for\n\t\t// equivalent URLs, but eject when we detect unique signals.\n\t\tif (this.fetchJobs[url] && this.fetchJobs[url].has(requestInit.signal)) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\tjob = this.fetchJobs[url].get(requestInit.signal)!;\n\t\t} else {\n\t\t\tthis.fetchJobs[url] = this.fetchJobs[url] || new Map();\n\n\t\t\tjob = this.fetchFn(url, requestInit)\n\t\t\t\t.then(async (res) => {\n\t\t\t\t\t// We can assume Prismic REST API responses\n\t\t\t\t\t// will have a `application/json`\n\t\t\t\t\t// Content Type. If not, this will\n\t\t\t\t\t// throw, signaling an invalid\n\t\t\t\t\t// response.\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tlet json: any = undefined;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tjson = await res.json();\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// noop\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: res.status,\n\t\t\t\t\t\tjson,\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tthis.fetchJobs[url].delete(requestInit.signal);\n\n\t\t\t\t\tif (this.fetchJobs[url].size === 0) {\n\t\t\t\t\t\tdelete this.fetchJobs[url];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tthis.fetchJobs[url].set(requestInit.signal, job);\n\t\t}\n\n\t\tconst res = await job;\n\n\t\tif (res.status !== 404 && res.json == null) {\n\t\t\tthrow new PrismicError(undefined, url, res.json);\n\t\t}\n\n\t\tswitch (res.status) {\n\t\t\t// Successful\n\t\t\tcase 200: {\n\t\t\t\treturn res.json;\n\t\t\t}\n\n\t\t\t// Bad Request\n\t\t\t// - Invalid filter syntax\n\t\t\t// - Ref not provided (ignored)\n\t\t\tcase 400: {\n\t\t\t\tthrow new ParsingError(res.json.message, url, res.json);\n\t\t\t}\n\n\t\t\t// Unauthorized\n\t\t\t// - Missing access token for repository endpoint\n\t\t\t// - Incorrect access token for repository endpoint\n\t\t\tcase 401:\n\t\t\t// Forbidden\n\t\t\t// - Missing access token for query endpoint\n\t\t\t// - Incorrect access token for query endpoint\n\t\t\tcase 403: {\n\t\t\t\tthrow new ForbiddenError(\n\t\t\t\t\t\"error\" in res.json ? res.json.error : res.json.message,\n\t\t\t\t\turl,\n\t\t\t\t\tres.json,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Not Found (this response has an empty body)\n\t\t\t// - Incorrect repository name\n\t\t\tcase 404: {\n\t\t\t\tthrow new NotFoundError(\n\t\t\t\t\t`Prismic repository not found. Check that \"${this.endpoint}\" is pointing to the correct repository.`,\n\t\t\t\t\turl,\n\t\t\t\t\tundefined,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthrow new PrismicError(undefined, url, res.json);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}