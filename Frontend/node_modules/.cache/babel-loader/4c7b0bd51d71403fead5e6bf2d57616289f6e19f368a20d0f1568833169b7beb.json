{"ast":null,"code":"const matchHtmlRegExp = /[\"'&<>]/;\nconst escapeHTML = string => {\n  const str = \"\" + string;\n  const match = matchHtmlRegExp.exec(str);\n  if (!match) {\n    return str;\n  }\n  let escape;\n  let html = \"\";\n  let index = 0;\n  let lastIndex = 0;\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n    lastIndex = index + 1;\n    html += escape;\n  }\n  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n};\nexport { escapeHTML };","map":{"version":3,"names":["matchHtmlRegExp","escapeHTML","string","str","match","exec","escape","html","index","lastIndex","length","charCodeAt","substring"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\lib\\escapeHTML.ts"],"sourcesContent":["/*\n ** Core logic from https://github.com/component/escape-html\n ** Many thanks to @component\n */\n\nconst matchHtmlRegExp = /[\"'&<>]/;\n\nexport const escapeHTML = (string?: string | null): string => {\n\tconst str = \"\" + string;\n\tconst match = matchHtmlRegExp.exec(str);\n\n\tif (!match) {\n\t\treturn str;\n\t}\n\n\tlet escape;\n\tlet html = \"\";\n\tlet index = 0;\n\tlet lastIndex = 0;\n\n\tfor (index = match.index; index < str.length; index++) {\n\t\tswitch (str.charCodeAt(index)) {\n\t\t\tcase 34: // \"\n\t\t\t\tescape = \"&quot;\";\n\t\t\t\tbreak;\n\t\t\tcase 38: // &\n\t\t\t\tescape = \"&amp;\";\n\t\t\t\tbreak;\n\t\t\tcase 39: // '\n\t\t\t\tescape = \"&#39;\";\n\t\t\t\tbreak;\n\t\t\tcase 60: // <\n\t\t\t\tescape = \"&lt;\";\n\t\t\t\tbreak;\n\t\t\tcase 62: // >\n\t\t\t\tescape = \"&gt;\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcontinue;\n\t\t}\n\n\t\tif (lastIndex !== index) {\n\t\t\thtml += str.substring(lastIndex, index);\n\t\t}\n\n\t\tlastIndex = index + 1;\n\t\thtml += escape;\n\t}\n\n\treturn lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n};\n"],"mappings":"AAKA,MAAMA,eAAA,GAAkB;AAEX,MAAAC,UAAA,GAAcC,MAAA,IAAkC;EAC5D,MAAMC,GAAA,GAAM,KAAKD,MAAA;EACX,MAAAE,KAAA,GAAQJ,eAAA,CAAgBK,IAAA,CAAKF,GAAG;EAEtC,IAAI,CAACC,KAAA,EAAO;IACJ,OAAAD,GAAA;EACP;EAEG,IAAAG,MAAA;EACJ,IAAIC,IAAA,GAAO;EACX,IAAIC,KAAA,GAAQ;EACZ,IAAIC,SAAA,GAAY;EAEhB,KAAKD,KAAA,GAAQJ,KAAA,CAAMI,KAAA,EAAOA,KAAA,GAAQL,GAAA,CAAIO,MAAA,EAAQF,KAAA,IAAS;IAC9C,QAAAL,GAAA,CAAIQ,UAAA,CAAWH,KAAK;MAC3B,KAAK;QACKF,MAAA;QACT;MACD,KAAK;QACKA,MAAA;QACT;MACD,KAAK;QACKA,MAAA;QACT;MACD,KAAK;QACKA,MAAA;QACT;MACD,KAAK;QACKA,MAAA;QACT;MACD;QACC;IACD;IAED,IAAIG,SAAA,KAAcD,KAAA,EAAO;MAChBD,IAAA,IAAAJ,GAAA,CAAIS,SAAA,CAAUH,SAAA,EAAWD,KAAK;IACtC;IAEDC,SAAA,GAAYD,KAAA,GAAQ;IACZD,IAAA,IAAAD,MAAA;EACR;EAED,OAAOG,SAAA,KAAcD,KAAA,GAAQD,IAAA,GAAOJ,GAAA,CAAIS,SAAA,CAAUH,SAAA,EAAWD,KAAK,IAAID,IAAA;AACvE"},"metadata":{},"sourceType":"module","externalDependencies":[]}