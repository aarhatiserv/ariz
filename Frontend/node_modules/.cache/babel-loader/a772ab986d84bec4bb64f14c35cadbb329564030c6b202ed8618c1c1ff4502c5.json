{"ast":null,"code":"import { castArray } from \"./castArray.js\";\nconst appendFilters = function () {\n  let objWithFilters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let filters = arguments.length > 1 ? arguments[1] : undefined;\n  return {\n    ...objWithFilters,\n    filters: [...(objWithFilters.filters || []), ...castArray(filters)]\n  };\n};\nexport { appendFilters };","map":{"version":3,"names":["appendFilters","objWithFilters","arguments","length","undefined","filters","castArray"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz-garments-mern\\ariz\\Frontend\\node_modules\\@prismicio\\src\\lib\\appendFilters.ts"],"sourcesContent":["import { castArray } from \"./castArray\";\n\ninterface WithFilters {\n\tfilters?: string | string[];\n}\n\n/**\n * Adds one or more filters to an object with a `filters` property. Appended\n * filters are added to the end of the existing list.\n *\n * @typeParam T - Object to which filters will be append.\n *\n * @param objWithFilters - Object to append filters on the `filters` property.\n * @param filters - One or more filters to append.\n *\n * @returns The object with the appended filters.\n */\nexport const appendFilters = <T extends WithFilters>(\n\tobjWithFilters: T = {} as T,\n\tfilters: string | string[],\n): T & { filters: string[] } => {\n\treturn {\n\t\t...objWithFilters,\n\t\tfilters: [...(objWithFilters.filters || []), ...castArray(filters)],\n\t};\n};\n"],"mappings":";AAiBO,MAAMA,aAAA,GAAgB,SAAAA,CAAA,EAGE;EAAA,IAF9BC,cAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAoB;EAAA,IACpBG,OAAA,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAEO;IACN,GAAGH,cAAA;IACHI,OAAA,EAAS,CAAC,IAAIJ,cAAA,CAAeI,OAAA,IAAW,KAAK,GAAGC,SAAA,CAAUD,OAAO,CAAC;EAAA;AAEpE"},"metadata":{},"sourceType":"module","externalDependencies":[]}