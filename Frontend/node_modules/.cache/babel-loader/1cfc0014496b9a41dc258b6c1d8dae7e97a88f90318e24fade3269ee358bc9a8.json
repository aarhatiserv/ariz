{"ast":null,"code":"import { buildURL, buildWidthSrcSet } from \"../../../../imgix-url-builder/dist/index.js\";\nimport { imageThumbnail } from \"./isFilled.js\";\nconst DEFAULT_WIDTHS = [640, 828, 1200, 2048, 3840];\nconst asImageWidthSrcSet = function (field) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (field && imageThumbnail(field)) {\n    let {\n      widths = DEFAULT_WIDTHS,\n      // eslint-disable-next-line prefer-const\n      ...imgixParams\n    } = config;\n    const {\n      url,\n      dimensions,\n      alt: _alt,\n      copyright: _copyright,\n      ...responsiveViews\n    } = field;\n    const responsiveViewObjects = Object.values(responsiveViews);\n    if (widths === \"thumbnails\" && responsiveViewObjects.length < 1) {\n      widths = DEFAULT_WIDTHS;\n    }\n    return {\n      src: buildURL(url, imgixParams),\n      srcset:\n      // By this point, we know `widths` can only be\n      // `\"thubmanils\"` if the field has thumbnails.\n      widths === \"thumbnails\" ? [buildWidthSrcSet(url, {\n        ...imgixParams,\n        widths: [dimensions.width]\n      }), ...responsiveViewObjects.map(thumbnail => {\n        return buildWidthSrcSet(thumbnail.url, {\n          ...imgixParams,\n          widths: [thumbnail.dimensions.width]\n        });\n      })].join(\", \") : buildWidthSrcSet(field.url, {\n        ...imgixParams,\n        widths\n      })\n    };\n  } else {\n    return null;\n  }\n};\nexport { asImageWidthSrcSet };","map":{"version":3,"names":["DEFAULT_WIDTHS","asImageWidthSrcSet","field","config","arguments","length","undefined","imageThumbnail","widths","imgixParams","url","dimensions","alt","_alt","copyright","_copyright","responsiveViews","responsiveViewObjects","Object","values","src","buildURL","srcset","buildWidthSrcSet","width","map","thumbnail","join"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz-garments-mern\\ariz\\Frontend\\node_modules\\@prismicio\\react\\node_modules\\@prismicio\\client\\dist\\helpers\\asImageWidthSrcSet.js"],"sourcesContent":["import { buildURL, buildWidthSrcSet } from \"imgix-url-builder\";\nimport { imageThumbnail } from \"./isFilled.js\";\nconst DEFAULT_WIDTHS = [640, 828, 1200, 2048, 3840];\nconst asImageWidthSrcSet = (field, config = {}) => {\n  if (field && imageThumbnail(field)) {\n    let {\n      widths = DEFAULT_WIDTHS,\n      // eslint-disable-next-line prefer-const\n      ...imgixParams\n    } = config;\n    const { url, dimensions, alt: _alt, copyright: _copyright, ...responsiveViews } = field;\n    const responsiveViewObjects = Object.values(responsiveViews);\n    if (widths === \"thumbnails\" && responsiveViewObjects.length < 1) {\n      widths = DEFAULT_WIDTHS;\n    }\n    return {\n      src: buildURL(url, imgixParams),\n      srcset: (\n        // By this point, we know `widths` can only be\n        // `\"thubmanils\"` if the field has thumbnails.\n        widths === \"thumbnails\" ? [\n          buildWidthSrcSet(url, {\n            ...imgixParams,\n            widths: [dimensions.width]\n          }),\n          ...responsiveViewObjects.map((thumbnail) => {\n            return buildWidthSrcSet(thumbnail.url, {\n              ...imgixParams,\n              widths: [thumbnail.dimensions.width]\n            });\n          })\n        ].join(\", \") : buildWidthSrcSet(field.url, {\n          ...imgixParams,\n          widths\n        })\n      )\n    };\n  } else {\n    return null;\n  }\n};\nexport {\n  asImageWidthSrcSet\n};\n//# sourceMappingURL=asImageWidthSrcSet.js.map\n"],"mappings":";;AAEA,MAAMA,cAAA,GAAiB,CAAC,KAAK,KAAK,MAAM,MAAM,IAAI;AAC7C,MAACC,kBAAA,GAAqB,SAAAA,CAACC,KAAA,EAAuB;EAAA,IAAhBC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAS;EAC1C,IAAIF,KAAA,IAASK,cAAA,CAAeL,KAAK,GAAG;IAClC,IAAI;MACFM,MAAA,GAASR,cAAA;MAAA;MAET,GAAGS;IACJ,IAAGN,MAAA;IACJ,MAAM;MAAEO,GAAA;MAAKC,UAAA;MAAYC,GAAA,EAAKC,IAAA;MAAMC,SAAA,EAAWC,UAAA;MAAY,GAAGC;IAAiB,IAAGd,KAAA;IAClF,MAAMe,qBAAA,GAAwBC,MAAA,CAAOC,MAAA,CAAOH,eAAe;IAC3D,IAAIR,MAAA,KAAW,gBAAgBS,qBAAA,CAAsBZ,MAAA,GAAS,GAAG;MAC/DG,MAAA,GAASR,cAAA;IACV;IACD,OAAO;MACLoB,GAAA,EAAKC,QAAA,CAASX,GAAA,EAAKD,WAAW;MAC9Ba,MAAA;MAAA;MAAA;MAGEd,MAAA,KAAW,eAAe,CACxBe,gBAAA,CAAiBb,GAAA,EAAK;QACpB,GAAGD,WAAA;QACHD,MAAA,EAAQ,CAACG,UAAA,CAAWa,KAAK;MACrC,CAAW,GACD,GAAGP,qBAAA,CAAsBQ,GAAA,CAAKC,SAAA,IAAc;QAC1C,OAAOH,gBAAA,CAAiBG,SAAA,CAAUhB,GAAA,EAAK;UACrC,GAAGD,WAAA;UACHD,MAAA,EAAQ,CAACkB,SAAA,CAAUf,UAAA,CAAWa,KAAK;QACjD,CAAa;MACb,CAAW,EACF,CAACG,IAAA,CAAK,IAAI,IAAIJ,gBAAA,CAAiBrB,KAAA,CAAMQ,GAAA,EAAK;QACzC,GAAGD,WAAA;QACHD;MACV,CAAS;IAET;EACA,OAAS;IACL,OAAO;EACR;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}