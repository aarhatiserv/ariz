{"ast":null,"code":"import _objectSpread from \"E:/Aarhat Iserv - E-commerce/new/ariz/Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"E:/Aarhat Iserv - E-commerce/new/ariz/Frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"E:/Aarhat Iserv - E-commerce/new/ariz/Frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"widths\"],\n  _excluded2 = [\"url\", \"dimensions\", \"alt\", \"copyright\"];\nimport { buildURL, buildWidthSrcSet } from \"imgix-url-builder\";\nimport { imageThumbnail } from \"./isFilled.js\";\nvar DEFAULT_WIDTHS = [640, 828, 1200, 2048, 3840];\nvar asImageWidthSrcSet = function asImageWidthSrcSet(field) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (field && imageThumbnail(field)) {\n    var _config$widths = config.widths,\n      widths = _config$widths === void 0 ? DEFAULT_WIDTHS : _config$widths,\n      imgixParams = _objectWithoutProperties(config, _excluded);\n    var url = field.url,\n      dimensions = field.dimensions,\n      _alt = field.alt,\n      _copyright = field.copyright,\n      responsiveViews = _objectWithoutProperties(field, _excluded2);\n    var responsiveViewObjects = Object.values(responsiveViews);\n    if (widths === \"thumbnails\" && responsiveViewObjects.length < 1) {\n      widths = DEFAULT_WIDTHS;\n    }\n    return {\n      src: buildURL(url, imgixParams),\n      srcset:\n      // By this point, we know `widths` can only be\n      // `\"thubmanils\"` if the field has thumbnails.\n      widths === \"thumbnails\" ? [buildWidthSrcSet(url, _objectSpread(_objectSpread({}, imgixParams), {}, {\n        widths: [dimensions.width]\n      }))].concat(_toConsumableArray(responsiveViewObjects.map(function (thumbnail) {\n        return buildWidthSrcSet(thumbnail.url, _objectSpread(_objectSpread({}, imgixParams), {}, {\n          widths: [thumbnail.dimensions.width]\n        }));\n      }))).join(\", \") : buildWidthSrcSet(field.url, _objectSpread(_objectSpread({}, imgixParams), {}, {\n        widths: widths\n      }))\n    };\n  } else {\n    return null;\n  }\n};\nexport { asImageWidthSrcSet };","map":{"version":3,"names":["DEFAULT_WIDTHS","asImageWidthSrcSet","field","config","arguments","length","undefined","imageThumbnail","_config$widths","widths","imgixParams","_objectWithoutProperties","_excluded","url","dimensions","_alt","alt","_copyright","copyright","responsiveViews","_excluded2","responsiveViewObjects","Object","values","src","buildURL","srcset","buildWidthSrcSet","_objectSpread","width","concat","_toConsumableArray","map","thumbnail","join"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\helpers\\asImageWidthSrcSet.ts"],"sourcesContent":["import {\n\tBuildWidthSrcSetParams,\n\tbuildURL,\n\tbuildWidthSrcSet,\n} from \"imgix-url-builder\";\n\nimport type { ImageFieldImage } from \"../types/value/image\";\n\nimport * as isFilled from \"./isFilled\";\n\n/**\n * The default widths used to generate a `srcset` value.\n */\nconst DEFAULT_WIDTHS = [640, 828, 1200, 2048, 3840];\n\n/**\n * The return type of `asImageWidthSrcSet()`.\n */\ntype AsImageWidthSrcSetReturnType<\n\tField extends ImageFieldImage | null | undefined,\n> = Field extends ImageFieldImage<\"filled\">\n\t? {\n\t\t\t/**\n\t\t\t * The image field's image URL with Imgix URL parameters (if given).\n\t\t\t */\n\t\t\tsrc: string;\n\n\t\t\t/**\n\t\t\t * A width-based `srcset` attribute value for the image field's image with\n\t\t\t * Imgix URL parameters (if given).\n\t\t\t */\n\t\t\tsrcset: string;\n\t  }\n\t: null;\n\n/**\n * Configuration for `asImageWidthSrcSet()`.\n */\ntype AsImageWidthSrcSetConfig = Omit<BuildWidthSrcSetParams, \"widths\"> & {\n\twidths?: \"thumbnails\" | BuildWidthSrcSetParams[\"widths\"];\n};\n\n/**\n * Creates a width-based `srcset` from an image field with optional image\n * transformations (via Imgix URL parameters).\n *\n * If a `widths` parameter is not given, the following widths will be used by\n * default: 640, 750, 828, 1080, 1200, 1920, 2048, 3840.\n *\n * If the image field contains responsive views, each responsive view can be\n * used as a width in the resulting `srcset` by passing `\"thumbnails\"` as the\n * `widths` parameter.\n *\n * @example\n *\n * ```ts\n * const srcset = asImageWidthSrcSet(document.data.imageField, {\n * \twidths: [400, 800, 1600],\n * \tsat: -100,\n * });\n * // => {\n * //   src:    'https://images.prismic.io/repo/image.png?sat=-100',\n * //   srcset: 'https://images.prismic.io/repo/image.png?sat=-100&width=400 400w, ' +\n * //           'https://images.prismic.io/repo/image.png?sat=-100&width=800 800w,' +\n * //           'https://images.prismic.io/repo/image.png?sat=-100&width=1600 1600w'\n * // }\n * ```\n *\n * @param field - Image field (or one of its responsive views) from which to get\n *   an image URL.\n * @param config - An object of Imgix URL API parameters. The `widths` parameter\n *   defines the resulting `srcset` widths. Pass `\"thumbnails\"` to automatically\n *   use the field's responsive views.\n *\n * @returns A `srcset` attribute value for the image field with Imgix URL\n *   parameters (if given). If the image field is empty, `null` is returned.\n * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering\n */\nexport const asImageWidthSrcSet = <\n\tField extends ImageFieldImage | null | undefined,\n>(\n\tfield: Field,\n\tconfig: AsImageWidthSrcSetConfig = {},\n): AsImageWidthSrcSetReturnType<Field> => {\n\tif (field && isFilled.imageThumbnail(field)) {\n\t\t// We are using destructuring to omit `widths` from the object\n\t\t// we will pass to `buildURL()`.\n\t\tlet {\n\t\t\twidths = DEFAULT_WIDTHS,\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\t...imgixParams\n\t\t} = config;\n\t\tconst {\n\t\t\turl,\n\t\t\tdimensions,\n\t\t\talt: _alt,\n\t\t\tcopyright: _copyright,\n\t\t\t...responsiveViews\n\t\t} = field;\n\n\t\t// The Prismic Rest API will always return thumbnail values if\n\t\t// the base size is filled.\n\t\tconst responsiveViewObjects: ImageFieldImage<\"filled\">[] =\n\t\t\tObject.values(responsiveViews);\n\n\t\t// If this `asImageWidthSrcSet()` call is configured to use\n\t\t// thumbnail widths, but the field does not have thumbnails, we\n\t\t// fall back to the default set of widths.\n\t\tif (widths === \"thumbnails\" && responsiveViewObjects.length < 1) {\n\t\t\twidths = DEFAULT_WIDTHS;\n\t\t}\n\n\t\treturn {\n\t\t\tsrc: buildURL(url, imgixParams),\n\t\t\tsrcset:\n\t\t\t\t// By this point, we know `widths` can only be\n\t\t\t\t// `\"thubmanils\"` if the field has thumbnails.\n\t\t\t\twidths === \"thumbnails\"\n\t\t\t\t\t? [\n\t\t\t\t\t\t\tbuildWidthSrcSet(url, {\n\t\t\t\t\t\t\t\t...imgixParams,\n\t\t\t\t\t\t\t\twidths: [dimensions.width],\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t...responsiveViewObjects.map((thumbnail) => {\n\t\t\t\t\t\t\t\treturn buildWidthSrcSet(thumbnail.url, {\n\t\t\t\t\t\t\t\t\t...imgixParams,\n\t\t\t\t\t\t\t\t\twidths: [thumbnail.dimensions.width],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t  ].join(\", \")\n\t\t\t\t\t: buildWidthSrcSet(field.url, {\n\t\t\t\t\t\t\t...imgixParams,\n\t\t\t\t\t\t\twidths,\n\t\t\t\t\t  }),\n\t\t} as AsImageWidthSrcSetReturnType<Field>;\n\t} else {\n\t\treturn null as AsImageWidthSrcSetReturnType<Field>;\n\t}\n};\n"],"mappings":";;;;;;;AAaA,IAAMA,cAAA,GAAiB,CAAC,KAAK,KAAK,MAAM,MAAM,IAAI;AAiE3C,IAAMC,kBAAA,GAAqB,SAArBA,mBAGZC,KAAA,EAEwC;EAAA,IADxCC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmC;EAEnC,IAAIF,KAAA,IAASK,cAAA,CAAwBL,KAAK,GAAG;IAGxC,IAAAM,cAAA,GAIAL,MAAA,CAHHM,MAAA;MAAAA,MAAA,GAAAD,cAAA,cAASR,cAAA,GAAAQ,cAAA;MAENE,WAAA,GAAAC,wBAAA,CACAR,MAAA,EAAAS,SAAA;IACE,IACLC,GAAA,GAKGX,KAAA,CALHW,GAAA;MACAC,UAAA,GAIGZ,KAAA,CAJHY,UAAA;MACKC,IAAA,GAGFb,KAAA,CAHHc,GAAA;MACWC,UAAA,GAERf,KAAA,CAFHgB,SAAA;MACGC,eAAA,GAAAR,wBAAA,CACAT,KAAA,EAAAkB,UAAA;IAIE,IAAAC,qBAAA,GACLC,MAAA,CAAOC,MAAA,CAAOJ,eAAe;IAK9B,IAAIV,MAAA,KAAW,gBAAgBY,qBAAA,CAAsBhB,MAAA,GAAS,GAAG;MACvDI,MAAA,GAAAT,cAAA;IACT;IAEM;MACNwB,GAAA,EAAKC,QAAA,CAASZ,GAAA,EAAKH,WAAW;MAC9BgB,MAAA;MAAA;MAAA;MAGCjB,MAAA,KAAW,eACR,CACAkB,gBAAA,CAAiBd,GAAA,EAAAe,aAAA,CAAAA,aAAA,KACblB,WAAA;QACHD,MAAA,EAAQ,CAACK,UAAA,CAAWe,KAAK;MAAA,EACzB,GAAAC,MAAA,CAAAC,kBAAA,CACEV,qBAAA,CAAsBW,GAAA,CAAI,UAACC,SAAA,EAAa;QACnC,OAAAN,gBAAA,CAAiBM,SAAA,CAAUpB,GAAA,EAAAe,aAAA,CAAAA,aAAA,KAC9BlB,WAAA;UACHD,MAAA,EAAQ,CAACwB,SAAA,CAAUnB,UAAA,CAAWe,KAAK;QAAA,EACnC;MAAA,CACD,IACCK,IAAA,CAAK,IAAI,IACXP,gBAAA,CAAiBzB,KAAA,CAAMW,GAAA,EAAAe,aAAA,CAAAA,aAAA,KACpBlB,WAAA;QACHD,MAAA,EAAAA;MAAA,EACC;IAAA;EAAA,OAEA;IACC;EACP;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}