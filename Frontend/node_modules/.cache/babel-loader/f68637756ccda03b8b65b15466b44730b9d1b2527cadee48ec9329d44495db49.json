{"ast":null,"code":"import _objectSpread from \"E:/Aarhat Iserv - E-commerce/new/ariz/Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/Aarhat Iserv - E-commerce/new/ariz/Frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"__mapped\"];\nimport { jsxs, jsx, Fragment } from \"react/jsx-runtime\";\nimport { pascalCase } from \"./lib/pascalCase.js\";\nvar TODOSliceComponent = function TODOSliceComponent(_ref) {\n  var slice = _ref.slice;\n  if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n    var type = \"slice_type\" in slice ? slice.slice_type : slice.type;\n    console.warn(\"[SliceZone] Could not find a component for Slice type \\\"\".concat(type, \"\\\"\"), slice);\n    return /* @__PURE__ */jsxs(\"section\", {\n      \"data-slice-zone-todo-component\": \"\",\n      \"data-slice-type\": type,\n      children: [\"Could not find a component for Slice type “\", type, \"”\"]\n    });\n  } else {\n    return null;\n  }\n};\nfunction SliceZone(_ref2) {\n  var _ref2$slices = _ref2.slices,\n    slices = _ref2$slices === void 0 ? [] : _ref2$slices,\n    _ref2$components = _ref2.components,\n    components = _ref2$components === void 0 ? {} : _ref2$components,\n    resolver = _ref2.resolver,\n    _ref2$defaultComponen = _ref2.defaultComponent,\n    defaultComponent = _ref2$defaultComponen === void 0 ? TODOSliceComponent : _ref2$defaultComponen,\n    _ref2$context = _ref2.context,\n    context = _ref2$context === void 0 ? {} : _ref2$context;\n  if (process.env.NODE_ENV === \"development\") {\n    if (resolver) {\n      console.warn(\"The `resolver` prop is deprecated. Please replace it with a components map using the `components` prop.\");\n    }\n  }\n  var renderedSlices = slices.map(function (slice, index) {\n    var type = \"slice_type\" in slice ? slice.slice_type : slice.type;\n    var Comp = components[type] || defaultComponent;\n    if (resolver) {\n      var resolvedComp = resolver({\n        slice: slice,\n        sliceName: pascalCase(type),\n        i: index\n      });\n      if (resolvedComp) {\n        Comp = resolvedComp;\n      }\n    }\n    var key = \"id\" in slice && slice.id ? slice.id : \"\".concat(index, \"-\").concat(JSON.stringify(slice));\n    if (slice.__mapped) {\n      var __mapped = slice.__mapped,\n        mappedProps = _objectWithoutProperties(slice, _excluded);\n      return /* @__PURE__ */jsx(Comp, _objectSpread({}, mappedProps), key);\n    } else {\n      return /* @__PURE__ */jsx(Comp, {\n        slice: slice,\n        index: index,\n        slices: slices,\n        context: context\n      }, key);\n    }\n  });\n  return /* @__PURE__ */jsx(Fragment, {\n    children: renderedSlices\n  });\n}\nexport { SliceZone, TODOSliceComponent };","map":{"version":3,"names":["TODOSliceComponent","_ref","slice","process","env","NODE_ENV","type","slice_type","console","warn","concat","jsxs","children","SliceZone","_ref2","_ref2$slices","slices","_ref2$components","components","resolver","_ref2$defaultComponen","defaultComponent","_ref2$context","context","renderedSlices","map","index","Comp","resolvedComp","sliceName","pascalCase","i","key","id","JSON","stringify","__mapped","mappedProps","_objectWithoutProperties","_excluded","jsx","_objectSpread","Fragment"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\SliceZone.tsx"],"sourcesContent":["import { ComponentType } from \"react\";\nimport * as prismic from \"@prismicio/client\";\n\nimport { pascalCase, PascalCase } from \"./lib/pascalCase\";\n\n/**\n * Returns the type of a `SliceLike` type.\n *\n * @typeParam Slice - The Slice from which the type will be extracted.\n */\ntype ExtractSliceType<TSlice extends SliceLike> = TSlice extends prismic.Slice\n\t? TSlice[\"slice_type\"]\n\t: TSlice extends SliceLikeGraphQL\n\t? TSlice[\"type\"]\n\t: never;\n\n/**\n * The minimum required properties to represent a Prismic Slice from the Prismic\n * Rest API V2 for the `unstable_mapSliceZone()` helper.\n *\n * @typeParam SliceType - Type name of the Slice.\n */\nexport type SliceLikeRestV2<TSliceType extends string = string> = Pick<\n\tprismic.Slice<TSliceType>,\n\t\"id\" | \"slice_type\"\n>;\n\n/**\n * The minimum required properties to represent a Prismic Slice from the Prismic\n * GraphQL API for the `unstable_mapSliceZone()` helper.\n *\n * @typeParam SliceType - Type name of the Slice.\n */\nexport type SliceLikeGraphQL<TSliceType extends string = string> = {\n\ttype: prismic.Slice<TSliceType>[\"slice_type\"];\n};\n\n/**\n * The minimum required properties to represent a Prismic Slice for the\n * `unstable_mapSliceZone()` helper.\n *\n * If using Prismic's Rest API V2, use the `Slice` export from\n * `@prismicio/client` for a full interface.\n *\n * @typeParam SliceType - Type name of the Slice.\n */\nexport type SliceLike<TSliceType extends string = string> = (\n\t| SliceLikeRestV2<TSliceType>\n\t| SliceLikeGraphQL<TSliceType>\n) & {\n\t/**\n\t * If `true`, this Slice has been modified from its original value using a\n\t * mapper and `@prismicio/client`'s `mapSliceZone()`.\n\t *\n\t * @internal\n\t */\n\t__mapped?: true;\n};\n\n/**\n * A looser version of the `SliceZone` type from `@prismicio/client` using\n * `SliceLike`.\n *\n * If using Prismic's Rest API V2, use the `SliceZone` export from\n * `@prismicio/client` for the full type.\n *\n * @typeParam TSlice - The type(s) of a Slice in the Slice Zone.\n */\nexport type SliceZoneLike<TSlice extends SliceLike = SliceLike> =\n\treadonly TSlice[];\n\n/**\n * React props for a component rendering content from a Prismic Slice using the\n * `<SliceZone>` component.\n *\n * @typeParam TSlice - The Slice passed as a prop.\n * @typeParam TContext - Arbitrary data passed to `<SliceZone>` and made\n *   available to all Slice components.\n */\nexport type SliceComponentProps<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTSlice extends SliceLike = SliceLike,\n\tTContext = unknown,\n> = {\n\t/**\n\t * Slice data for this component.\n\t */\n\tslice: TSlice;\n\n\t/**\n\t * The index of the Slice in the Slice Zone.\n\t */\n\tindex: number;\n\n\t/**\n\t * All Slices from the Slice Zone to which the Slice belongs.\n\t */\n\t// TODO: We have to keep this list of Slices general due to circular\n\t// reference limtiations. If we had another generic to determine the full\n\t// union of Slice types, it would include TSlice. This causes TypeScript to\n\t// throw a compilation error.\n\tslices: SliceZoneLike<\n\t\tTSlice extends SliceLikeGraphQL ? SliceLikeGraphQL : SliceLikeRestV2\n\t>;\n\n\t/**\n\t * Arbitrary data passed to `<SliceZone>` and made available to all Slice\n\t * components.\n\t */\n\tcontext: TContext;\n};\n\n/**\n * A React component to be rendered for each instance of its Slice.\n *\n * @typeParam TSlice - The type(s) of a Slice in the Slice Zone.\n * @typeParam TContext - Arbitrary data made available to all Slice components.\n */\nexport type SliceComponentType<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTSlice extends SliceLike = any,\n\tTContext = unknown,\n> = React.ComponentType<SliceComponentProps<TSlice, TContext>>;\n\n/**\n * A record of Slice types mapped to a React component. The component will be\n * rendered for each instance of its Slice.\n *\n * @deprecated This type is no longer used by `@prismicio/react`. Prefer using\n *   `Record<string, SliceComponentType<any>>` instead.\n * @typeParam TSlice - The type(s) of a Slice in the Slice Zone.\n * @typeParam TContext - Arbitrary data made available to all Slice components.\n */\nexport type SliceZoneComponents<\n\tTSlice extends SliceLike = SliceLike,\n\tTContext = unknown,\n> =\n\t// This is purposely not wrapped in Partial to ensure a component is provided\n\t// for all Slice types. <SliceZone> will render a default component if one is\n\t// not provided, but it *should* be a type error if an explicit component is\n\t// missing.\n\t//\n\t// If a developer purposely does not want to provide a component, they can\n\t// assign it to the TODOSliceComponent exported from this package. This\n\t// signals to future developers that it is a placeholder and should be\n\t// implemented.\n\t{\n\t\t[SliceType in ExtractSliceType<TSlice>]: SliceComponentType<\n\t\t\tExtract<TSlice, SliceLike<SliceType>> extends never\n\t\t\t\t? SliceLike\n\t\t\t\t: Extract<TSlice, SliceLike<SliceType>>,\n\t\t\tTContext\n\t\t>;\n\t};\n\n/**\n * Arguments for a `<SliceZone>` `resolver` function.\n */\ntype SliceZoneResolverArgs<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTSlice extends SliceLike = any,\n> = {\n\t/**\n\t * The Slice to resolve to a React component.\n\t */\n\tslice: TSlice;\n\n\t/**\n\t * The name of the Slice.\n\t */\n\tsliceName: PascalCase<ExtractSliceType<TSlice>>;\n\n\t/**\n\t * The index of the Slice in the Slice Zone.\n\t */\n\ti: number;\n};\n\n/**\n * A function that determines the rendered React component for each Slice in the\n * Slice Zone. If a nullish value is returned, the component will fallback to\n * the `components` or `defaultComponent` props to determine the rendered\n * component.\n *\n * @deprecated Use the `components` prop instead.\n *\n * @param args - Arguments for the resolver function.\n *\n * @returns The React component to render for a Slice.\n */\nexport type SliceZoneResolver<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTSlice extends SliceLike = any,\n> = (\n\targs: SliceZoneResolverArgs<TSlice>,\n) => // eslint-disable-next-line @typescript-eslint/no-explicit-any\nComponentType<any> | undefined | null;\n\n/**\n * React props for the `<SliceZone>` component.\n *\n * @typeParam TSlice - The type(s) of a Slice in the Slice Zone.\n * @typeParam TContext - Arbitrary data made available to all Slice components.\n */\nexport type SliceZoneProps<TContext = unknown> = {\n\t/**\n\t * List of Slice data from the Slice Zone.\n\t */\n\tslices?: SliceZoneLike;\n\n\t/**\n\t * A record mapping Slice types to React components.\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tcomponents?: Record<string, ComponentType<any>>;\n\n\t/**\n\t * A function that determines the rendered React component for each Slice in\n\t * the Slice Zone.\n\t *\n\t * @deprecated Use the `components` prop instead.\n\t *\n\t * @param args - Arguments for the resolver function.\n\t *\n\t * @returns The React component to render for a Slice.\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tresolver?: SliceZoneResolver<any>;\n\n\t/**\n\t * The React component rendered if a component mapping from the `components`\n\t * prop cannot be found.\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tdefaultComponent?: ComponentType<SliceComponentProps<any, TContext>>;\n\n\t/**\n\t * Arbitrary data made available to all Slice components.\n\t */\n\tcontext?: TContext;\n};\n\n/**\n * This Slice component can be used as a reminder to provide a proper\n * implementation.\n *\n * This is also the default React component rendered when a component mapping\n * cannot be found in `<SliceZone>`.\n */\nexport const TODOSliceComponent = <TSlice extends SliceLike, TContext>({\n\tslice,\n}: SliceComponentProps<TSlice, TContext>): JSX.Element | null => {\n\tif (\n\t\ttypeof process !== \"undefined\" &&\n\t\tprocess.env.NODE_ENV === \"development\"\n\t) {\n\t\tconst type = \"slice_type\" in slice ? slice.slice_type : slice.type;\n\n\t\tconsole.warn(\n\t\t\t`[SliceZone] Could not find a component for Slice type \"${type}\"`,\n\t\t\tslice,\n\t\t);\n\n\t\treturn (\n\t\t\t<section data-slice-zone-todo-component=\"\" data-slice-type={type}>\n\t\t\t\tCould not find a component for Slice type &ldquo;{type}\n\t\t\t\t&rdquo;\n\t\t\t</section>\n\t\t);\n\t} else {\n\t\treturn null;\n\t}\n};\n\n/**\n * Renders content from a Prismic Slice Zone using React components for each\n * type of Slice.\n *\n * If a component is not provided for a type of Slice, a default component can\n * be provided. A fallback component is provided by default that will not be\n * rendered in a production build of your app.\n *\n * @typeParam TSlice - The type(s) of a Slice in the Slice Zone.\n * @typeParam TContext - Arbitrary data made available to all Slice components.\n *\n * @returns The Slice Zone's content as React components.\n *\n * @see Learn about Prismic Slices and Slice Zones {@link https://prismic.io/docs/core-concepts/slices}\n */\nexport function SliceZone<TContext>({\n\tslices = [],\n\tcomponents = {},\n\tresolver,\n\tdefaultComponent = TODOSliceComponent,\n\tcontext = {} as TContext,\n}: SliceZoneProps<TContext>) {\n\t// TODO: Remove in v3 when the `resolver` prop is removed.\n\tif (process.env.NODE_ENV === \"development\") {\n\t\tif (resolver) {\n\t\t\tconsole.warn(\n\t\t\t\t\"The `resolver` prop is deprecated. Please replace it with a components map using the `components` prop.\",\n\t\t\t);\n\t\t}\n\t}\n\n\tconst renderedSlices = slices.map((slice, index) => {\n\t\tconst type = \"slice_type\" in slice ? slice.slice_type : slice.type;\n\n\t\tlet Comp = components[type as keyof typeof components] || defaultComponent;\n\n\t\t// TODO: Remove `resolver` in v3 in favor of `components`.\n\t\tif (resolver) {\n\t\t\tconst resolvedComp = resolver({\n\t\t\t\tslice,\n\t\t\t\tsliceName: pascalCase(type),\n\t\t\t\ti: index,\n\t\t\t});\n\n\t\t\tif (resolvedComp) {\n\t\t\t\tComp = resolvedComp as typeof Comp;\n\t\t\t}\n\t\t}\n\n\t\tconst key =\n\t\t\t\"id\" in slice && slice.id\n\t\t\t\t? slice.id\n\t\t\t\t: `${index}-${JSON.stringify(slice)}`;\n\n\t\tif (slice.__mapped) {\n\t\t\tconst { __mapped, ...mappedProps } = slice;\n\n\t\t\treturn <Comp key={key} {...mappedProps} />;\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Comp\n\t\t\t\t\tkey={key}\n\t\t\t\t\tslice={slice}\n\t\t\t\t\tindex={index}\n\t\t\t\t\tslices={slices}\n\t\t\t\t\tcontext={context}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t});\n\n\treturn <>{renderedSlices}</>;\n}\n"],"mappings":";;;;;AAyPO,IAAMA,kBAAA,GAAqB,SAArBA,mBAAAC,IAAA,EAEmD;EAAA,IAD/DC,KAAA,GAAAD,IAAA,CAAAC,KAAA;EAEA,IACC,OAAOC,OAAA,KAAY,eACnBA,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa,eACxB;IACD,IAAMC,IAAA,GAAO,gBAAgBJ,KAAA,GAAQA,KAAA,CAAMK,UAAA,GAAaL,KAAA,CAAMI,IAAA;IAEtDE,OAAA,CAAAC,IAAA,4DAAAC,MAAA,CACmDJ,IAAA,SAC1DJ,KAAK;IAGN,OACE,eAAAS,IAAA;MAAQ,kCAA+B;MAAG,mBAAiBL,IAAA;MAC3DM,QAAA,kDAAkDN,IAAA,EAClD;IACD;EAAA,OAEK;IACC;EACP;AACF;AAiBM,SAAUO,UAAAC,KAAA,EAMW;EAAA,IAAAC,YAAA,GAAAD,KAAA,CAL1BE,MAAA;IAAAA,MAAA,GAAAD,YAAA,cAAS,KAAAA,YAAA;IAAAE,gBAAA,GAAAH,KAAA,CACTI,UAAA;IAAAA,UAAA,GAAAD,gBAAA,cAAa,KAAAA,gBAAA;IACbE,QAAA,GAAAL,KAAA,CAAAK,QAAA;IAAAC,qBAAA,GAAAN,KAAA,CACAO,gBAAA;IAAAA,gBAAA,GAAAD,qBAAA,cAAmBpB,kBAAA,GAAAoB,qBAAA;IAAAE,aAAA,GAAAR,KAAA,CACnBS,OAAA;IAAAA,OAAA,GAAAD,aAAA,cAAU,KAAAA,aAAA;EAGN,IAAAnB,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa,eAAe;IAC3C,IAAIc,QAAA,EAAU;MACbX,OAAA,CAAQC,IAAA,CACP,yGAAyG;IAE1G;EACD;EAED,IAAMe,cAAA,GAAiBR,MAAA,CAAOS,GAAA,CAAI,UAACvB,KAAA,EAAOwB,KAAA,EAAS;IAClD,IAAMpB,IAAA,GAAO,gBAAgBJ,KAAA,GAAQA,KAAA,CAAMK,UAAA,GAAaL,KAAA,CAAMI,IAAA;IAE1D,IAAAqB,IAAA,GAAOT,UAAA,CAAWZ,IAA+B,KAAKe,gBAAA;IAG1D,IAAIF,QAAA,EAAU;MACb,IAAMS,YAAA,GAAeT,QAAA,CAAS;QAC7BjB,KAAA,EAAAA,KAAA;QACA2B,SAAA,EAAWC,UAAA,CAAWxB,IAAI;QAC1ByB,CAAA,EAAGL;MAAA,CACH;MAED,IAAIE,YAAA,EAAc;QACVD,IAAA,GAAAC,YAAA;MACP;IACD;IAEK,IAAAI,GAAA,GACL,QAAQ9B,KAAA,IAASA,KAAA,CAAM+B,EAAA,GACpB/B,KAAA,CAAM+B,EAAA,MAAAvB,MAAA,CACHgB,KAAA,OAAAhB,MAAA,CAASwB,IAAA,CAAKC,SAAA,CAAUjC,KAAK;IAEpC,IAAIA,KAAA,CAAMkC,QAAA,EAAU;MACnB,IAAQA,QAAA,GAA6BlC,KAAA,CAA7BkC,QAAA;QAAaC,WAAA,GAAAC,wBAAA,CAAgBpC,KAAA,EAAAqC,SAAA;MAErC,OAAQ,eAAAC,GAAA,CAAAb,IAAA,EAAAc,aAAA,KAAmBJ,WAAA,GAATL,GAAqB;IAAA,OACjC;MACN,sBAAAQ,GAAA,CACEb,IAAA,EAEA;QAAAzB,KAAA,EAAAA,KAAA;QACAwB,KAAA,EAAAA,KAAA;QACAV,MAAA,EAAAA,MAAA;QACAO,OAAA,EAAAA;MAAA,GAJKS,GAIY;IAGnB;EAAA,CACD;EAED,sBAAAQ,GAAA,CAAAE,QAAA;IAAU9B,QAAA,EAAeY;EAAA;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}