{"ast":null,"code":"import { PrismicError } from \"../errors/PrismicError.js\";\nconst findRef = (refs, filter) => {\n  const ref = refs.find(ref2 => filter(ref2));\n  if (!ref) {\n    throw new PrismicError(\"Ref could not be found.\", void 0, void 0);\n  }\n  return ref;\n};\nexport { findRef };","map":{"version":3,"names":["findRef","refs","filter","ref","find","ref2","PrismicError"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz-garments-mern\\ariz\\Frontend\\node_modules\\@prismicio\\src\\lib\\findRef.ts"],"sourcesContent":["import { Ref } from \"../types/api/ref\";\n\nimport { PrismicError } from \"../errors/PrismicError\";\n\n/**\n * Returns the first ref from a list that passes a filter (a function that\n * returns true).\n *\n * @param refs - A list of refs to search.\n * @param filter - A function that determines if a ref from the list matches the\n *   criteria.\n *\n * @returns The first matching ref.\n *\n * @throws If a matching ref cannot be found.\n */\nexport const findRef = (refs: Ref[], filter: (ref: Ref) => boolean): Ref => {\n\tconst ref = refs.find((ref) => filter(ref));\n\n\tif (!ref) {\n\t\tthrow new PrismicError(\"Ref could not be found.\", undefined, undefined);\n\t}\n\n\treturn ref;\n};\n"],"mappings":";AAgBa,MAAAA,OAAA,GAAUA,CAACC,IAAA,EAAaC,MAAA,KAAsC;EAC1E,MAAMC,GAAA,GAAMF,IAAA,CAAKG,IAAA,CAAMC,IAAA,IAAQH,MAAA,CAAOG,IAAG,CAAC;EAE1C,IAAI,CAACF,GAAA,EAAK;IACT,MAAM,IAAIG,YAAA,CAAa,2BAA2B,QAAW,MAAS;EACtE;EAEM,OAAAH,GAAA;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}