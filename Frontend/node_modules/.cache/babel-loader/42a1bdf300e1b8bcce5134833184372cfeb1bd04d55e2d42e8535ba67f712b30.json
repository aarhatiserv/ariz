{"ast":null,"code":"import { asTree } from \"./asTree.js\";\nvar serialize = function serialize(richTextField, serializer) {\n  return serializeTreeNodes(asTree(richTextField).children, serializer);\n};\nvar serializeTreeNodes = function serializeTreeNodes(nodes, serializer) {\n  var serializedTreeNodes = [];\n  for (var i = 0; i < nodes.length; i++) {\n    var treeNode = nodes[i];\n    var serializedTreeNode = serializer(treeNode.type, treeNode.node, treeNode.text, serializeTreeNodes(treeNode.children, serializer), treeNode.key);\n    if (serializedTreeNode != null) {\n      serializedTreeNodes.push(serializedTreeNode);\n    }\n  }\n  return serializedTreeNodes;\n};\nexport { serialize };","map":{"version":3,"names":["serialize","richTextField","serializer","serializeTreeNodes","asTree","children","nodes","serializedTreeNodes","i","length","treeNode","serializedTreeNode","type","node","text","key","push"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\serialize.ts"],"sourcesContent":["import { RichTextField } from \"@prismicio/types\";\nimport { RichTextFunctionSerializer, TreeNode } from \"./types\";\nimport { asTree } from \"./asTree\";\n\n/**\n * Serializes a rich text or title field with a given serializer\n *\n * @remarks\n * This is a low level helper mainly intended to be used by higher level\n * packages Most users aren't expected to this function directly\n * @typeParam SerializerReturnType - Return type of the serializer\n * @param richTextField - A rich text or title field from Prismic\n * @param serializer - A function serializer to apply\n *\n * @returns An array of serialized nodes\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}\n */\nexport const serialize = <SerializerReturnType>(\n\trichTextField: RichTextField,\n\tserializer: RichTextFunctionSerializer<SerializerReturnType>,\n): SerializerReturnType[] => {\n\treturn serializeTreeNodes<SerializerReturnType>(\n\t\tasTree(richTextField).children,\n\t\tserializer,\n\t);\n};\n\nconst serializeTreeNodes = <T>(\n\tnodes: TreeNode[],\n\tserializer: RichTextFunctionSerializer<T>,\n): T[] => {\n\tconst serializedTreeNodes: T[] = [];\n\n\tfor (let i = 0; i < nodes.length; i++) {\n\t\tconst treeNode = nodes[i];\n\t\tconst serializedTreeNode = serializer(\n\t\t\ttreeNode.type,\n\t\t\ttreeNode.node,\n\t\t\ttreeNode.text,\n\t\t\tserializeTreeNodes(treeNode.children, serializer),\n\t\t\ttreeNode.key,\n\t\t);\n\n\t\tif (serializedTreeNode != null) {\n\t\t\tserializedTreeNodes.push(serializedTreeNode);\n\t\t}\n\t}\n\n\treturn serializedTreeNodes;\n};\n"],"mappings":";AAiBa,IAAAA,SAAA,GAAY,SAAZA,UACZC,aAAA,EACAC,UAAA,EAC2B;EAC3B,OAAOC,kBAAA,CACNC,MAAA,CAAOH,aAAa,EAAEI,QAAA,EACtBH,UAAU;AAEZ;AAEA,IAAMC,kBAAA,GAAqB,SAArBA,mBACLG,KAAA,EACAJ,UAAA,EACQ;EACR,IAAMK,mBAAA,GAA2B;EAEjC,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIF,KAAA,CAAMG,MAAA,EAAQD,CAAA,IAAK;IAChC,IAAAE,QAAA,GAAWJ,KAAA,CAAME,CAAC;IACxB,IAAMG,kBAAA,GAAqBT,UAAA,CAC1BQ,QAAA,CAASE,IAAA,EACTF,QAAA,CAASG,IAAA,EACTH,QAAA,CAASI,IAAA,EACTX,kBAAA,CAAmBO,QAAA,CAASL,QAAA,EAAUH,UAAU,GAChDQ,QAAA,CAASK,GAAG;IAGb,IAAIJ,kBAAA,IAAsB,MAAM;MAC/BJ,mBAAA,CAAoBS,IAAA,CAAKL,kBAAkB;IAC3C;EACD;EAEM,OAAAJ,mBAAA;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}