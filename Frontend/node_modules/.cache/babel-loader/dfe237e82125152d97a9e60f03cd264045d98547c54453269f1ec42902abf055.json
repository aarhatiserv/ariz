{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nconst PrismicContext = React.createContext({});\nconst PrismicProvider = _ref => {\n  let {\n    client,\n    linkResolver,\n    richTextComponents,\n    internalLinkComponent,\n    externalLinkComponent,\n    children\n  } = _ref;\n  const value = React.useMemo(() => ({\n    client,\n    linkResolver,\n    richTextComponents,\n    internalLinkComponent,\n    externalLinkComponent\n  }), [client, linkResolver, richTextComponents, internalLinkComponent, externalLinkComponent]);\n  return /* @__PURE__ */jsx(PrismicContext.Provider, {\n    value,\n    children\n  });\n};\nexport { PrismicContext, PrismicProvider };","map":{"version":3,"names":["PrismicContext","React","createContext","PrismicProvider","_ref","client","linkResolver","richTextComponents","internalLinkComponent","externalLinkComponent","children","value","useMemo","jsx","Provider"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\PrismicProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport * as prismic from \"@prismicio/client\";\n\nimport { JSXFunctionSerializer, JSXMapSerializer } from \"./types\";\nimport { LinkProps } from \"./PrismicLink\";\n\n/**\n * React context value containing shared configuration for `@prismicio/react`\n * components and hooks.\n */\nexport type PrismicContextValue<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tLinkResolverFunction extends prismic.LinkResolverFunction<any> = prismic.LinkResolverFunction,\n> = {\n\t/**\n\t * A `@prismicio/client` instance used to fetch content from a Prismic\n\t * repository. This is used by `@prismicio/react` hooks, such as\n\t * `usePrismicDocuments()`.\n\t */\n\tclient?: prismic.Client;\n\n\t/**\n\t * A Link Resolver used to resolve links for `<PrismicLink>` and\n\t * `<PrismicRichText>`.\n\t *\n\t * @remarks\n\t * If your app uses Route Resolvers when querying for your Prismic\n\t * repository's content, a Link Resolver does not need to be provided.\n\t * @see Learn about Link Resolvers and Route Resolvers {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver}\n\t */\n\tlinkResolver?: LinkResolverFunction;\n\n\t/**\n\t * A map or function that maps a Rich Text block to a React component.\n\t *\n\t * @remarks\n\t * Prefer using a map serializer over the function serializer when possible.\n\t * The map serializer is simpler to maintain.\n\t * @example A map serializer.\n\t *\n\t * ```jsx\n\t * {\n\t *   heading1: ({children}) => <Heading>{children}</Heading>\n\t * }\n\t * ```\n\t *\n\t * @example A function serializer.\n\t *\n\t * ```jsx\n\t * (type, node, content, children) => {\n\t * \tswitch (type) {\n\t * \t\tcase \"heading1\": {\n\t * \t\t\treturn <Heading>{chidlren}</Heading>;\n\t * \t\t}\n\t * \t}\n\t * };\n\t * ```\n\t */\n\trichTextComponents?: JSXMapSerializer | JSXFunctionSerializer;\n\n\t/**\n\t * The component rendered by `<PrismicLink>` for internal URLs. Defaults to\n\t * `<a>`.\n\t */\n\tinternalLinkComponent?: React.ComponentType<LinkProps>;\n\n\t/**\n\t * The component rendered by `<PrismicLink>` for external URLs. Defaults to\n\t * `<a>`.\n\t */\n\texternalLinkComponent?: React.ComponentType<LinkProps>;\n\n\t/**\n\t * Children for the component.\n\t */\n\tchildren?: React.ReactNode;\n};\n\n/**\n * React context containing shared configuration for `@prismicio/react`\n * components and hooks.\n */\nexport const PrismicContext = React.createContext<PrismicContextValue>({});\n\n/**\n * Props for `<PrismicProvider>`.\n */\nexport type PrismicProviderProps<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tLinkResolverFunction extends prismic.LinkResolverFunction<any> = prismic.LinkResolverFunction<any>,\n> = PrismicContextValue<LinkResolverFunction>;\n\n/**\n * React context provider to share configuration for `@prismicio/react`\n * components and hooks.\n *\n * @returns A React context provider with shared configuration.\n */\nexport const PrismicProvider = <\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tLinkResolverFunction extends prismic.LinkResolverFunction<any>,\n>({\n\tclient,\n\tlinkResolver,\n\trichTextComponents,\n\tinternalLinkComponent,\n\texternalLinkComponent,\n\tchildren,\n}: PrismicProviderProps<LinkResolverFunction>): JSX.Element => {\n\tconst value = React.useMemo<PrismicContextValue<LinkResolverFunction>>(\n\t\t() => ({\n\t\t\tclient,\n\t\t\tlinkResolver,\n\t\t\trichTextComponents,\n\t\t\tinternalLinkComponent,\n\t\t\texternalLinkComponent,\n\t\t}),\n\t\t[\n\t\t\tclient,\n\t\t\tlinkResolver,\n\t\t\trichTextComponents,\n\t\t\tinternalLinkComponent,\n\t\t\texternalLinkComponent,\n\t\t],\n\t);\n\n\treturn (\n\t\t<PrismicContext.Provider value={value}>{children}</PrismicContext.Provider>\n\t);\n};\n"],"mappings":";;AAoFO,MAAMA,cAAA,GAAiBC,KAAA,CAAMC,aAAA,CAAmC,EAAE;AAgB5D,MAAAC,eAAA,GAAkBC,IAAA,IAU+B;EAAA,IAP5D;IACDC,MAAA;IACAC,YAAA;IACAC,kBAAA;IACAC,qBAAA;IACAC,qBAAA;IACAC;EAAA,IAAAN,IAAA;EAEM,MAAAO,KAAA,GAAQV,KAAA,CAAMW,OAAA,CACnB,OAAO;IACNP,MAAA;IACAC,YAAA;IACAC,kBAAA;IACAC,qBAAA;IACAC;EAAA,IAED,CACCJ,MAAA,EACAC,YAAA,EACAC,kBAAA,EACAC,qBAAA,EACAC,qBAAA,CACA;EAGF,OACE,eAAAI,GAAA,CAAAb,cAAA,CAAec,QAAA,EAAf;IAAwBH,KAAA;IAAeD;EAAS;AAEnD"},"metadata":{},"sourceType":"module","externalDependencies":[]}