{"ast":null,"code":"import { jsx, Fragment } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as prismicR from \"@prismicio/richtext\";\nimport { PrismicLink } from \"./PrismicLink.js\";\nimport { devMsg } from \"../lib/devMsg.js\";\nimport { richText } from './../_node_modules/@prismicio/client/dist/helpers/isFilled.js';\nconst createDefaultSerializer = args => prismicR.wrapMapSerializer({\n  heading1: _ref => {\n    let {\n      children,\n      key\n    } = _ref;\n    return /* @__PURE__ */jsx(\"h1\", {\n      children\n    }, key);\n  },\n  heading2: _ref2 => {\n    let {\n      children,\n      key\n    } = _ref2;\n    return /* @__PURE__ */jsx(\"h2\", {\n      children\n    }, key);\n  },\n  heading3: _ref3 => {\n    let {\n      children,\n      key\n    } = _ref3;\n    return /* @__PURE__ */jsx(\"h3\", {\n      children\n    }, key);\n  },\n  heading4: _ref4 => {\n    let {\n      children,\n      key\n    } = _ref4;\n    return /* @__PURE__ */jsx(\"h4\", {\n      children\n    }, key);\n  },\n  heading5: _ref5 => {\n    let {\n      children,\n      key\n    } = _ref5;\n    return /* @__PURE__ */jsx(\"h5\", {\n      children\n    }, key);\n  },\n  heading6: _ref6 => {\n    let {\n      children,\n      key\n    } = _ref6;\n    return /* @__PURE__ */jsx(\"h6\", {\n      children\n    }, key);\n  },\n  paragraph: _ref7 => {\n    let {\n      children,\n      key\n    } = _ref7;\n    return /* @__PURE__ */jsx(\"p\", {\n      children\n    }, key);\n  },\n  preformatted: _ref8 => {\n    let {\n      node,\n      key\n    } = _ref8;\n    return /* @__PURE__ */jsx(\"pre\", {\n      children: node.text\n    }, key);\n  },\n  strong: _ref9 => {\n    let {\n      children,\n      key\n    } = _ref9;\n    return /* @__PURE__ */jsx(\"strong\", {\n      children\n    }, key);\n  },\n  em: _ref10 => {\n    let {\n      children,\n      key\n    } = _ref10;\n    return /* @__PURE__ */jsx(\"em\", {\n      children\n    }, key);\n  },\n  listItem: _ref11 => {\n    let {\n      children,\n      key\n    } = _ref11;\n    return /* @__PURE__ */jsx(\"li\", {\n      children\n    }, key);\n  },\n  oListItem: _ref12 => {\n    let {\n      children,\n      key\n    } = _ref12;\n    return /* @__PURE__ */jsx(\"li\", {\n      children\n    }, key);\n  },\n  list: _ref13 => {\n    let {\n      children,\n      key\n    } = _ref13;\n    return /* @__PURE__ */jsx(\"ul\", {\n      children\n    }, key);\n  },\n  oList: _ref14 => {\n    let {\n      children,\n      key\n    } = _ref14;\n    return /* @__PURE__ */jsx(\"ol\", {\n      children\n    }, key);\n  },\n  image: _ref15 => {\n    let {\n      node,\n      key\n    } = _ref15;\n    const img = /* @__PURE__ */jsx(\"img\", {\n      src: node.url,\n      alt: node.alt ?? void 0,\n      \"data-copyright\": node.copyright ? node.copyright : void 0\n    });\n    return /* @__PURE__ */jsx(\"p\", {\n      className: \"block-img\",\n      children: node.linkTo ? /* @__PURE__ */jsx(PrismicLink, {\n        linkResolver: args.linkResolver,\n        internalComponent: args.internalLinkComponent,\n        externalComponent: args.externalLinkComponent,\n        field: node.linkTo,\n        children: img\n      }) : img\n    }, key);\n  },\n  embed: _ref16 => {\n    let {\n      node,\n      key\n    } = _ref16;\n    return /* @__PURE__ */jsx(\"div\", {\n      \"data-oembed\": node.oembed.embed_url,\n      \"data-oembed-type\": node.oembed.type,\n      \"data-oembed-provider\": node.oembed.provider_name,\n      dangerouslySetInnerHTML: {\n        __html: node.oembed.html ?? \"\"\n      }\n    }, key);\n  },\n  hyperlink: _ref17 => {\n    let {\n      node,\n      children,\n      key\n    } = _ref17;\n    return /* @__PURE__ */jsx(PrismicLink, {\n      field: node.data,\n      linkResolver: args.linkResolver,\n      internalComponent: args.internalLinkComponent,\n      externalComponent: args.externalLinkComponent,\n      children\n    }, key);\n  },\n  label: _ref18 => {\n    let {\n      node,\n      children,\n      key\n    } = _ref18;\n    return /* @__PURE__ */jsx(\"span\", {\n      className: node.data.label,\n      children\n    }, key);\n  },\n  span: _ref19 => {\n    let {\n      text,\n      key\n    } = _ref19;\n    const result = [];\n    let i = 0;\n    for (const line of text.split(\"\\n\")) {\n      if (i > 0) {\n        result.push( /* @__PURE__ */jsx(\"br\", {}, `${i}__break`));\n      }\n      result.push( /* @__PURE__ */jsx(React.Fragment, {\n        children: line\n      }, `${i}__line`));\n      i++;\n    }\n    return /* @__PURE__ */jsx(React.Fragment, {\n      children: result\n    }, key);\n  }\n});\nfunction PrismicRichText(_ref20) {\n  let {\n    linkResolver,\n    field,\n    fallback,\n    components,\n    externalLinkComponent,\n    internalLinkComponent,\n    ...restProps\n  } = _ref20;\n  return React.useMemo(() => {\n    if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n      if (\"className\" in restProps) {\n        console.warn(`[PrismicRichText] className cannot be passed to <PrismicRichText> since it renders an array without a wrapping component. For more details, see ${devMsg(\"classname-is-not-a-valid-prop\")}.`, field);\n      }\n    }\n    if (richText(field)) {\n      const serializer = prismicR.composeSerializers(typeof components === \"object\" ? prismicR.wrapMapSerializer(components) : components, createDefaultSerializer({\n        linkResolver,\n        internalLinkComponent,\n        externalLinkComponent\n      }));\n      const serialized = prismicR.serialize(field, (type, node, text, children, key) => {\n        const result = serializer(type, node, text, children, key);\n        if (React.isValidElement(result) && result.key == null) {\n          return React.cloneElement(result, {\n            key\n          });\n        } else {\n          return result;\n        }\n      });\n      return /* @__PURE__ */jsx(Fragment, {\n        children: serialized\n      });\n    } else {\n      return fallback != null ? /* @__PURE__ */jsx(Fragment, {\n        children: fallback\n      }) : null;\n    }\n  }, [field, internalLinkComponent, externalLinkComponent, components, linkResolver, fallback]);\n}\nexport { PrismicRichText };","map":{"version":3,"names":["createDefaultSerializer","args","prismicR","wrapMapSerializer","heading1","_ref","children","key","jsx","heading2","_ref2","heading3","_ref3","heading4","_ref4","heading5","_ref5","heading6","_ref6","paragraph","_ref7","preformatted","_ref8","node","text","strong","_ref9","em","_ref10","listItem","_ref11","oListItem","_ref12","list","_ref13","oList","_ref14","image","_ref15","img","src","url","alt","copyright","className","linkTo","PrismicLink","linkResolver","internalComponent","internalLinkComponent","externalComponent","externalLinkComponent","field","embed","_ref16","oembed","embed_url","type","provider_name","dangerouslySetInnerHTML","__html","html","hyperlink","_ref17","data","label","_ref18","span","_ref19","result","i","line","split","push","React","Fragment","PrismicRichText","_ref20","fallback","components","restProps","useMemo","process","env","NODE_ENV","console","warn","devMsg","richText","serializer","composeSerializers","serialized","serialize","isValidElement","cloneElement"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\react-server\\PrismicRichText.tsx"],"sourcesContent":["import * as React from \"react\";\nimport * as prismic from \"@prismicio/client\";\nimport * as prismicR from \"@prismicio/richtext\";\n\nimport { JSXFunctionSerializer, JSXMapSerializer } from \"../types\";\nimport { LinkProps, PrismicLink } from \"./PrismicLink\";\nimport { devMsg } from \"../lib/devMsg\";\n\n/**\n * Props for `<PrismicRichText>`.\n */\nexport type PrismicRichTextProps<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tLinkResolverFunction extends prismic.LinkResolverFunction<any> = prismic.LinkResolverFunction,\n> = {\n\t/**\n\t * The Prismic Rich Text field to render.\n\t */\n\tfield: prismic.RichTextField | null | undefined;\n\n\t/**\n\t * The Link Resolver used to resolve links.\n\t *\n\t * @remarks\n\t * If your app uses Route Resolvers when querying for your Prismic\n\t * repository's content, a Link Resolver does not need to be provided.\n\t * @see Learn about Link Resolvers and Route Resolvers {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver}\n\t */\n\tlinkResolver?: LinkResolverFunction;\n\n\t/**\n\t * A map or function that maps a Rich Text block to a React component.\n\t *\n\t * @remarks\n\t * Prefer using a map serializer over the function serializer when possible.\n\t * The map serializer is simpler to maintain.\n\t * @example A map serializer.\n\t *\n\t * ```jsx\n\t * {\n\t *   heading1: ({children}) => <Heading>{children}</Heading>\n\t * }\n\t * ```\n\t *\n\t * @example A function serializer.\n\t *\n\t * ```jsx\n\t * (type, node, content, children) => {\n\t * \tswitch (type) {\n\t * \t\tcase \"heading1\": {\n\t * \t\t\treturn <Heading>{children}</Heading>;\n\t * \t\t}\n\t * \t}\n\t * };\n\t * ```\n\t */\n\tcomponents?: JSXMapSerializer | JSXFunctionSerializer;\n\n\t/**\n\t * The React component rendered for links when the URL is internal.\n\t *\n\t * @defaultValue `<a>`\n\t */\n\tinternalLinkComponent?: React.ComponentType<LinkProps>;\n\n\t/**\n\t * The React component rendered for links when the URL is external.\n\t *\n\t * @defaultValue `<a>`\n\t */\n\texternalLinkComponent?: React.ComponentType<LinkProps>;\n\n\t/**\n\t * The value to be rendered when the field is empty. If a fallback is not\n\t * given, `null` will be rendered.\n\t */\n\tfallback?: React.ReactNode;\n};\n\ntype CreateDefaultSerializerArgs<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tLinkResolverFunction extends prismic.LinkResolverFunction<any> = prismic.LinkResolverFunction,\n> = {\n\tlinkResolver: LinkResolverFunction | undefined;\n\tinternalLinkComponent?: React.ComponentType<LinkProps>;\n\texternalLinkComponent?: React.ComponentType<LinkProps>;\n};\n\nconst createDefaultSerializer = <\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tLinkResolverFunction extends prismic.LinkResolverFunction<any>,\n>(\n\targs: CreateDefaultSerializerArgs<LinkResolverFunction>,\n): JSXFunctionSerializer =>\n\tprismicR.wrapMapSerializer({\n\t\theading1: ({ children, key }) => <h1 key={key}>{children}</h1>,\n\t\theading2: ({ children, key }) => <h2 key={key}>{children}</h2>,\n\t\theading3: ({ children, key }) => <h3 key={key}>{children}</h3>,\n\t\theading4: ({ children, key }) => <h4 key={key}>{children}</h4>,\n\t\theading5: ({ children, key }) => <h5 key={key}>{children}</h5>,\n\t\theading6: ({ children, key }) => <h6 key={key}>{children}</h6>,\n\t\tparagraph: ({ children, key }) => <p key={key}>{children}</p>,\n\t\tpreformatted: ({ node, key }) => <pre key={key}>{node.text}</pre>,\n\t\tstrong: ({ children, key }) => <strong key={key}>{children}</strong>,\n\t\tem: ({ children, key }) => <em key={key}>{children}</em>,\n\t\tlistItem: ({ children, key }) => <li key={key}>{children}</li>,\n\t\toListItem: ({ children, key }) => <li key={key}>{children}</li>,\n\t\tlist: ({ children, key }) => <ul key={key}>{children}</ul>,\n\t\toList: ({ children, key }) => <ol key={key}>{children}</ol>,\n\t\timage: ({ node, key }) => {\n\t\t\tconst img = (\n\t\t\t\t<img\n\t\t\t\t\tsrc={node.url}\n\t\t\t\t\talt={node.alt ?? undefined}\n\t\t\t\t\tdata-copyright={node.copyright ? node.copyright : undefined}\n\t\t\t\t/>\n\t\t\t);\n\n\t\t\treturn (\n\t\t\t\t<p key={key} className=\"block-img\">\n\t\t\t\t\t{node.linkTo ? (\n\t\t\t\t\t\t<PrismicLink\n\t\t\t\t\t\t\tlinkResolver={args.linkResolver}\n\t\t\t\t\t\t\tinternalComponent={args.internalLinkComponent}\n\t\t\t\t\t\t\texternalComponent={args.externalLinkComponent}\n\t\t\t\t\t\t\tfield={node.linkTo}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{img}\n\t\t\t\t\t\t</PrismicLink>\n\t\t\t\t\t) : (\n\t\t\t\t\t\timg\n\t\t\t\t\t)}\n\t\t\t\t</p>\n\t\t\t);\n\t\t},\n\t\tembed: ({ node, key }) => (\n\t\t\t<div\n\t\t\t\tkey={key}\n\t\t\t\tdata-oembed={node.oembed.embed_url}\n\t\t\t\tdata-oembed-type={node.oembed.type}\n\t\t\t\tdata-oembed-provider={node.oembed.provider_name}\n\t\t\t\tdangerouslySetInnerHTML={{ __html: node.oembed.html ?? \"\" }}\n\t\t\t/>\n\t\t),\n\t\thyperlink: ({ node, children, key }) => (\n\t\t\t<PrismicLink\n\t\t\t\tkey={key}\n\t\t\t\tfield={node.data}\n\t\t\t\tlinkResolver={args.linkResolver}\n\t\t\t\tinternalComponent={args.internalLinkComponent}\n\t\t\t\texternalComponent={args.externalLinkComponent}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</PrismicLink>\n\t\t),\n\t\tlabel: ({ node, children, key }) => (\n\t\t\t<span key={key} className={node.data.label}>\n\t\t\t\t{children}\n\t\t\t</span>\n\t\t),\n\t\tspan: ({ text, key }) => {\n\t\t\tconst result: React.ReactNode[] = [];\n\n\t\t\tlet i = 0;\n\t\t\tfor (const line of text.split(\"\\n\")) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tresult.push(<br key={`${i}__break`} />);\n\t\t\t\t}\n\n\t\t\t\tresult.push(<React.Fragment key={`${i}__line`}>{line}</React.Fragment>);\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn <React.Fragment key={key}>{result}</React.Fragment>;\n\t\t},\n\t});\n\n/**\n * React component that renders content from a Prismic Rich Text field. By\n * default, HTML elements are rendered for each piece of content. A `heading1`\n * block will render an `<h1>` HTML element, for example. Links will use\n * `<PrismicLink>` by default which can be customized using the\n * `internalLinkComponent` and `externalLinkComponent` props.\n *\n * To customize the components that are rendered, provide a map or function\n * serializer to the `components` prop.\n *\n * @remarks\n * This component returns a React fragment with no wrapping element around the\n * content. If you need a wrapper, add a component around `<PrismicRichText>`.\n * @example Rendering a Rich Text field using the default HTMl elements.\n *\n * ```jsx\n * <PrismicRichText field={document.data.content} />;\n * ```\n *\n * @example Rendering a Rich Text field using a custom set of React components.\n *\n * ```jsx\n * <PrismicRichText\n * \tfield={document.data.content}\n * \tcomponents={{\n * \t\theading1: ({ children }) => <Heading>{children}</Heading>,\n * \t}}\n * />;\n * ```\n *\n * @param props - Props for the component.\n *\n * @returns The Rich Text field's content as React components.\n *\n * @see Learn about Rich Text fields {@link https://prismic.io/docs/core-concepts/rich-text-title}\n * @see Learn about Rich Text serializers {@link https://prismic.io/docs/core-concepts/html-serializer}\n */\nexport function PrismicRichText<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tLinkResolverFunction extends prismic.LinkResolverFunction<any>,\n>({\n\tlinkResolver,\n\tfield,\n\tfallback,\n\tcomponents,\n\texternalLinkComponent,\n\tinternalLinkComponent,\n\t...restProps\n}: PrismicRichTextProps<LinkResolverFunction>): JSX.Element | null {\n\treturn React.useMemo(() => {\n\t\tif (\n\t\t\ttypeof process !== \"undefined\" &&\n\t\t\tprocess.env.NODE_ENV === \"development\"\n\t\t) {\n\t\t\tif (\"className\" in restProps) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`[PrismicRichText] className cannot be passed to <PrismicRichText> since it renders an array without a wrapping component. For more details, see ${devMsg(\n\t\t\t\t\t\t\"classname-is-not-a-valid-prop\",\n\t\t\t\t\t)}.`,\n\t\t\t\t\tfield,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (prismic.isFilled.richText(field)) {\n\t\t\tconst serializer = prismicR.composeSerializers(\n\t\t\t\ttypeof components === \"object\"\n\t\t\t\t\t? prismicR.wrapMapSerializer(components)\n\t\t\t\t\t: components,\n\t\t\t\tcreateDefaultSerializer({\n\t\t\t\t\tlinkResolver,\n\t\t\t\t\tinternalLinkComponent,\n\t\t\t\t\texternalLinkComponent,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\t// The serializer is wrapped in a higher-order function\n\t\t\t// that automatically applies a key to React Elements\n\t\t\t// if one is not already given.\n\t\t\tconst serialized = prismicR.serialize<JSX.Element>(\n\t\t\t\tfield,\n\t\t\t\t(type, node, text, children, key) => {\n\t\t\t\t\tconst result = serializer(type, node, text, children, key);\n\n\t\t\t\t\tif (React.isValidElement(result) && result.key == null) {\n\t\t\t\t\t\treturn React.cloneElement(result, { key });\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t\treturn <>{serialized}</>;\n\t\t} else {\n\t\t\treturn fallback != null ? <>{fallback}</> : null;\n\t\t}\n\t}, [\n\t\tfield,\n\t\tinternalLinkComponent,\n\t\texternalLinkComponent,\n\t\tcomponents,\n\t\tlinkResolver,\n\t\tfallback,\n\t]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}