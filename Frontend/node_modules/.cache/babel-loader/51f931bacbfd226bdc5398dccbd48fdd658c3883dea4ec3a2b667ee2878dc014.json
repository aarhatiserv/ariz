{"ast":null,"code":"import { jsx, Fragment } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { devMsg } from \"./lib/devMsg.js\";\nimport { richText } from './_node_modules/@prismicio/client/dist/helpers/isFilled.js';\nimport { asText } from './_node_modules/@prismicio/client/dist/helpers/asText.js';\nconst PrismicText = props => {\n  if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n    if (\"className\" in props) {\n      console.warn(`[PrismicText] className cannot be passed to <PrismicText> since it renders plain text without a wrapping component. For more details, see ${devMsg(\"classname-is-not-a-valid-prop\")}.`, props.field);\n    }\n    if (typeof props.field === \"string\") {\n      throw new Error(`[PrismicText] The \"field\" prop only accepts a Rich Text or Title field's value but was provided a different type of field instead (e.g. a Key Text or Select field). You can resolve this error by rendering the field value inline without <PrismicText>. For more details, see ${devMsg(\"prismictext-works-only-with-rich-text-and-title-fields\")}`);\n    }\n  }\n  return React.useMemo(() => {\n    if (richText(props.field)) {\n      const text = asText(props.field, props.separator);\n      return /* @__PURE__ */jsx(Fragment, {\n        children: text\n      });\n    } else {\n      return props.fallback != null ? /* @__PURE__ */jsx(Fragment, {\n        children: props.fallback\n      }) : null;\n    }\n  }, [props.field, props.fallback, props.separator]);\n};\nexport { PrismicText };","map":{"version":3,"names":["PrismicText","props","process","env","NODE_ENV","console","warn","devMsg","field","Error","React","useMemo","richText","text","asText","separator","jsx","Fragment","children","fallback"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\PrismicText.tsx"],"sourcesContent":["import * as React from \"react\";\nimport * as prismic from \"@prismicio/client\";\n\nimport { devMsg } from \"./lib/devMsg\";\n\n/**\n * Props for `<PrismicText>`.\n */\nexport type PrismicTextProps = {\n\t/**\n\t * The Prismic Rich Text field to render.\n\t */\n\tfield: prismic.RichTextField | null | undefined;\n\n\t/**\n\t * The string rendered when the field is empty. If a fallback is not given,\n\t * `null` will be rendered.\n\t */\n\tfallback?: string;\n\n\t/**\n\t * The separator used between blocks. Defaults to `\\n`.\n\t */\n\tseparator?: string;\n};\n\n/**\n * React component that renders content from a Prismic Rich Text field as plain\n * text.\n *\n * @remarks\n * This component returns a React fragment with no wrapping element around the\n * content. If you need a wrapper, add a component around `<PrismicText>`.\n * @example Rendering a Rich Text field as plain text.\n *\n * ```jsx\n * <PrismicText field={document.data.content} />;\n * ```\n *\n * @param props - Props for the component.\n *\n * @returns The Rich Text field's content as plain text.\n *\n * @see Learn about Rich Text fields {@link https://prismic.io/docs/core-concepts/rich-text-title}\n */\nexport const PrismicText = (props: PrismicTextProps): JSX.Element | null => {\n\tif (\n\t\ttypeof process !== \"undefined\" &&\n\t\tprocess.env.NODE_ENV === \"development\"\n\t) {\n\t\tif (\"className\" in props) {\n\t\t\tconsole.warn(\n\t\t\t\t`[PrismicText] className cannot be passed to <PrismicText> since it renders plain text without a wrapping component. For more details, see ${devMsg(\n\t\t\t\t\t\"classname-is-not-a-valid-prop\",\n\t\t\t\t)}.`,\n\t\t\t\tprops.field,\n\t\t\t);\n\t\t}\n\n\t\tif (typeof props.field === \"string\") {\n\t\t\tthrow new Error(\n\t\t\t\t`[PrismicText] The \"field\" prop only accepts a Rich Text or Title field's value but was provided a different type of field instead (e.g. a Key Text or Select field). You can resolve this error by rendering the field value inline without <PrismicText>. For more details, see ${devMsg(\n\t\t\t\t\t\"prismictext-works-only-with-rich-text-and-title-fields\",\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\t}\n\n\treturn React.useMemo(() => {\n\t\tif (prismic.isFilled.richText(props.field)) {\n\t\t\tconst text = prismic.asText(props.field, props.separator);\n\n\t\t\treturn <>{text}</>;\n\t\t} else {\n\t\t\treturn props.fallback != null ? <>{props.fallback}</> : null;\n\t\t}\n\t}, [props.field, props.fallback, props.separator]);\n};\n"],"mappings":";;;;;AA6Ca,MAAAA,WAAA,GAAeC,KAAA,IAA+C;EAC1E,IACC,OAAOC,OAAA,KAAY,eACnBA,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa,eACxB;IACD,IAAI,eAAeH,KAAA,EAAO;MACzBI,OAAA,CAAQC,IAAA,CACP,6IAA6IC,MAAA,CAC5I,+BAA+B,MAEhCN,KAAA,CAAMO,KAAK;IAEZ;IAEG,WAAOP,KAAA,CAAMO,KAAA,KAAU,UAAU;MACpC,MAAM,IAAIC,KAAA,CACT,oRAAoRF,MAAA,CACnR,wDAAwD,GACtD;IAEJ;EACD;EAEM,OAAAG,KAAA,CAAMC,OAAA,CAAQ,MAAK;IACzB,IAAIC,QAAA,CAA0BX,KAAA,CAAMO,KAAK,GAAG;MAC3C,MAAMK,IAAA,GAAOC,MAAA,CAAeb,KAAA,CAAMO,KAAA,EAAOP,KAAA,CAAMc,SAAS;MAExD,sBAAAC,GAAA,CAAAC,QAAA;QAAUC,QAAA,EAAKL;MAAA;IAAA,OACT;MACN,OAAOZ,KAAA,CAAMkB,QAAA,IAAY,OAAU,eAAAH,GAAA,CAAAC,QAAA;QAAAC,QAAA,EAAAjB,KAAA,CAAMkB;MAAS,KAAM;IACxD;EAAA,GACC,CAAClB,KAAA,CAAMO,KAAA,EAAOP,KAAA,CAAMkB,QAAA,EAAUlB,KAAA,CAAMc,SAAS,CAAC;AAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}