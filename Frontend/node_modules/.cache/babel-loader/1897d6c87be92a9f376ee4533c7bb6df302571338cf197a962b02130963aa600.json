{"ast":null,"code":"import { composeSerializers, serialize, Element, wrapMapSerializer } from \"@prismicio/richtext\";\nimport { serializeSpan, serializeStandardTag, serializeHyperlink, serializeEmbed, serializeImage, serializePreFormatted } from \"../lib/serializerHelpers.js\";\nconst createDefaultHTMLRichTextSerializer = linkResolver => {\n  return (_type, node, text, children, _key) => {\n    switch (node.type) {\n      case Element.heading1:\n        return serializeStandardTag(\"h1\", node, children);\n      case Element.heading2:\n        return serializeStandardTag(\"h2\", node, children);\n      case Element.heading3:\n        return serializeStandardTag(\"h3\", node, children);\n      case Element.heading4:\n        return serializeStandardTag(\"h4\", node, children);\n      case Element.heading5:\n        return serializeStandardTag(\"h5\", node, children);\n      case Element.heading6:\n        return serializeStandardTag(\"h6\", node, children);\n      case Element.paragraph:\n        return serializeStandardTag(\"p\", node, children);\n      case Element.preformatted:\n        return serializePreFormatted(node);\n      case Element.strong:\n        return serializeStandardTag(\"strong\", node, children);\n      case Element.em:\n        return serializeStandardTag(\"em\", node, children);\n      case Element.listItem:\n        return serializeStandardTag(\"li\", node, children);\n      case Element.oListItem:\n        return serializeStandardTag(\"li\", node, children);\n      case Element.list:\n        return serializeStandardTag(\"ul\", node, children);\n      case Element.oList:\n        return serializeStandardTag(\"ol\", node, children);\n      case Element.image:\n        return serializeImage(linkResolver, node);\n      case Element.embed:\n        return serializeEmbed(node);\n      case Element.hyperlink:\n        return serializeHyperlink(linkResolver, node, children);\n      case Element.label:\n        return serializeStandardTag(\"span\", node, children);\n      case Element.span:\n      default:\n        return serializeSpan(text);\n    }\n  };\n};\nconst wrapMapSerializerWithStringChildren = mapSerializer => {\n  const modifiedMapSerializer = {};\n  for (const tag in mapSerializer) {\n    const tagSerializer = mapSerializer[tag];\n    if (tagSerializer) {\n      modifiedMapSerializer[tag] = payload => {\n        return tagSerializer({\n          ...payload,\n          // @ts-expect-error - merging blockSerializer types causes TS to bail to a never type\n          children: payload.children.join(\"\")\n        });\n      };\n    }\n  }\n  return wrapMapSerializer(modifiedMapSerializer);\n};\nconst asHTML = function (richTextField) {\n  if (richTextField) {\n    for (var _len = arguments.length, configObjectOrTuple = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n      configObjectOrTuple[_key2 - 1] = arguments[_key2];\n    }\n    const [configObjectOrLinkResolver, maybeSerializer] = configObjectOrTuple;\n    let config;\n    if (typeof configObjectOrLinkResolver === \"function\" || configObjectOrLinkResolver == null) {\n      config = {\n        linkResolver: configObjectOrLinkResolver,\n        serializer: maybeSerializer\n      };\n    } else {\n      config = {\n        ...configObjectOrLinkResolver\n      };\n    }\n    let serializer;\n    if (config.serializer) {\n      serializer = composeSerializers(typeof config.serializer === \"object\" ? wrapMapSerializerWithStringChildren(config.serializer) : (type, node, text, children, key) =>\n      // TypeScript doesn't narrow the type correctly here since it is now in a callback function, so we have to cast it here.\n      config.serializer(type, node, text, children.join(\"\"), key), createDefaultHTMLRichTextSerializer(config.linkResolver));\n    } else {\n      serializer = createDefaultHTMLRichTextSerializer(config.linkResolver);\n    }\n    return serialize(richTextField, serializer).join(\"\");\n  } else {\n    return null;\n  }\n};\nexport { asHTML };","map":{"version":3,"names":["createDefaultHTMLRichTextSerializer","linkResolver","_type","node","text","children","_key","type","Element","heading1","serializeStandardTag","heading2","heading3","heading4","heading5","heading6","paragraph","preformatted","serializePreFormatted","strong","em","listItem","oListItem","list","oList","image","serializeImage","embed","serializeEmbed","hyperlink","serializeHyperlink","label","span","serializeSpan","wrapMapSerializerWithStringChildren","mapSerializer","modifiedMapSerializer","tag","tagSerializer","payload","join","wrapMapSerializer","asHTML","richTextField","_len","arguments","length","configObjectOrTuple","Array","_key2","configObjectOrLinkResolver","maybeSerializer","config","serializer","composeSerializers","key","serialize"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\helpers\\asHTML.ts"],"sourcesContent":["import {\n\tElement,\n\tRichTextFunctionSerializer,\n\tRichTextMapSerializer,\n\tRichTextMapSerializerFunction,\n\tcomposeSerializers,\n\tserialize,\n\twrapMapSerializer,\n} from \"@prismicio/richtext\";\n\nimport {\n\tserializeEmbed,\n\tserializeHyperlink,\n\tserializeImage,\n\tserializePreFormatted,\n\tserializeSpan,\n\tserializeStandardTag,\n} from \"../lib/serializerHelpers\";\n\nimport type { RichTextField } from \"../types/value/richText\";\n\nimport { LinkResolverFunction } from \"./asLink\";\n\n/**\n * Serializes a node from a rich text or title field with a function to HTML.\n *\n * Unlike a typical `@prismicio/richtext` function serializer, this serializer\n * converts the `children` argument to a single string rather than an array of\n * strings.\n *\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/template-content-vanilla-javascript#rich-text-and-title}\n */\nexport type HTMLRichTextFunctionSerializer = (\n\ttype: Parameters<RichTextFunctionSerializer<string>>[0],\n\tnode: Parameters<RichTextFunctionSerializer<string>>[1],\n\ttext: Parameters<RichTextFunctionSerializer<string>>[2],\n\tchildren: Parameters<RichTextFunctionSerializer<string>>[3][number],\n\tkey: Parameters<RichTextFunctionSerializer<string>>[4],\n) => string | null | undefined;\n\n/**\n * Serializes a node from a rich text or title field with a map to HTML\n *\n * Unlike a typical `@prismicio/richtext` map serializer, this serializer\n * converts the `children` property to a single string rather than an array of\n * strings.\n *\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/template-content-vanilla-javascript#rich-text-and-title}\n */\nexport type HTMLRichTextMapSerializer = {\n\t[P in keyof RichTextMapSerializer<string>]: (payload: {\n\t\ttype: Parameters<HTMLRichTextMapSerializerFunction<P>>[0][\"type\"];\n\t\tnode: Parameters<HTMLRichTextMapSerializerFunction<P>>[0][\"node\"];\n\t\ttext: Parameters<HTMLRichTextMapSerializerFunction<P>>[0][\"text\"];\n\t\tchildren: Parameters<\n\t\t\tHTMLRichTextMapSerializerFunction<P>\n\t\t>[0][\"children\"][number];\n\t\tkey: Parameters<HTMLRichTextMapSerializerFunction<P>>[0][\"key\"];\n\t}) => string | null | undefined;\n};\n\n/**\n * A {@link RichTextMapSerializerFunction} type specifically for\n * {@link HTMLRichTextMapSerializer}.\n *\n * @typeParam BlockName - The serializer's rich text block type.\n */\ntype HTMLRichTextMapSerializerFunction<\n\tBlockType extends keyof RichTextMapSerializer<string>,\n> = RichTextMapSerializerFunction<\n\tstring,\n\tExtractNodeGeneric<RichTextMapSerializer<string>[BlockType]>,\n\tExtractTextTypeGeneric<RichTextMapSerializer<string>[BlockType]>\n>;\n\n/**\n * Returns the `Node` generic from {@link RichTextMapSerializerFunction}.\n *\n * @typeParam T - The `RichTextMapSerializerFunction` containing the needed\n *   `Node` generic.\n */\ntype ExtractNodeGeneric<T> = T extends RichTextMapSerializerFunction<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tany,\n\tinfer U,\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tany\n>\n\t? U\n\t: never;\n\n/**\n * Returns the `TextType` generic from {@link RichTextMapSerializerFunction}.\n *\n * @typeParam T - The `RichTextMapSerializerFunction` containing the needed\n *   `TextType` generic.\n */\ntype ExtractTextTypeGeneric<T> = T extends RichTextMapSerializerFunction<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tany,\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tany,\n\tinfer U\n>\n\t? U\n\t: never;\n\n/**\n * Serializes a node from a rich text or title field with a map or a function to\n * HTML\n *\n * @see {@link HTMLRichTextMapSerializer} and {@link HTMLRichTextFunctionSerializer}\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/template-content-vanilla-javascript#rich-text-and-title}\n */\nexport type HTMLRichTextSerializer =\n\t| HTMLRichTextMapSerializer\n\t| HTMLRichTextFunctionSerializer;\n\n/**\n * Creates a default HTML rich text serializer with a given link resolver\n * providing sensible and safe defaults for every node type\n *\n * @internal\n */\nconst createDefaultHTMLRichTextSerializer = (\n\tlinkResolver: LinkResolverFunction | undefined | null,\n): RichTextFunctionSerializer<string> => {\n\treturn (_type, node, text, children, _key) => {\n\t\tswitch (node.type) {\n\t\t\tcase Element.heading1:\n\t\t\t\treturn serializeStandardTag(\"h1\", node, children);\n\t\t\tcase Element.heading2:\n\t\t\t\treturn serializeStandardTag(\"h2\", node, children);\n\t\t\tcase Element.heading3:\n\t\t\t\treturn serializeStandardTag(\"h3\", node, children);\n\t\t\tcase Element.heading4:\n\t\t\t\treturn serializeStandardTag(\"h4\", node, children);\n\t\t\tcase Element.heading5:\n\t\t\t\treturn serializeStandardTag(\"h5\", node, children);\n\t\t\tcase Element.heading6:\n\t\t\t\treturn serializeStandardTag(\"h6\", node, children);\n\t\t\tcase Element.paragraph:\n\t\t\t\treturn serializeStandardTag(\"p\", node, children);\n\t\t\tcase Element.preformatted:\n\t\t\t\treturn serializePreFormatted(node);\n\t\t\tcase Element.strong:\n\t\t\t\treturn serializeStandardTag(\"strong\", node, children);\n\t\t\tcase Element.em:\n\t\t\t\treturn serializeStandardTag(\"em\", node, children);\n\t\t\tcase Element.listItem:\n\t\t\t\treturn serializeStandardTag(\"li\", node, children);\n\t\t\tcase Element.oListItem:\n\t\t\t\treturn serializeStandardTag(\"li\", node, children);\n\t\t\tcase Element.list:\n\t\t\t\treturn serializeStandardTag(\"ul\", node, children);\n\t\t\tcase Element.oList:\n\t\t\t\treturn serializeStandardTag(\"ol\", node, children);\n\t\t\tcase Element.image:\n\t\t\t\treturn serializeImage(linkResolver, node);\n\t\t\tcase Element.embed:\n\t\t\t\treturn serializeEmbed(node);\n\t\t\tcase Element.hyperlink:\n\t\t\t\treturn serializeHyperlink(linkResolver, node, children);\n\t\t\tcase Element.label:\n\t\t\t\treturn serializeStandardTag(\"span\", node, children);\n\t\t\tcase Element.span:\n\t\t\tdefault:\n\t\t\t\treturn serializeSpan(text);\n\t\t}\n\t};\n};\n\n/**\n * Wraps a map serializer into a regular function serializer. The given map\n * serializer should accept children as a string, not as an array of strings\n * like `@prismicio/richtext`'s `wrapMapSerializer`.\n *\n * @param mapSerializer - Map serializer to wrap\n *\n * @returns A regular function serializer\n */\nconst wrapMapSerializerWithStringChildren = (\n\tmapSerializer: HTMLRichTextMapSerializer,\n): RichTextFunctionSerializer<string> => {\n\tconst modifiedMapSerializer = {} as RichTextMapSerializer<string>;\n\n\tfor (const tag in mapSerializer) {\n\t\tconst tagSerializer = mapSerializer[tag as keyof typeof mapSerializer];\n\n\t\tif (tagSerializer) {\n\t\t\tmodifiedMapSerializer[tag as keyof typeof mapSerializer] = (payload) => {\n\t\t\t\treturn tagSerializer({\n\t\t\t\t\t...payload,\n\t\t\t\t\t// @ts-expect-error - merging blockSerializer types causes TS to bail to a never type\n\t\t\t\t\tchildren: payload.children.join(\"\"),\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t}\n\n\treturn wrapMapSerializer(modifiedMapSerializer);\n};\n\n/**\n * Configuration that determines the output of `asHTML()`.\n */\ntype AsHTMLConfig = {\n\t/**\n\t * An optional link resolver function to resolve links. Without it you're\n\t * expected to use the `routes` options from the API.\n\t */\n\tlinkResolver?: LinkResolverFunction | null;\n\n\t/**\n\t * An optional rich text serializer, unhandled cases will fallback to the\n\t * default serializer\n\t */\n\tserializer?: HTMLRichTextSerializer | null;\n};\n\n// TODO: Remove when we remove support for deprecated tuple-style configuration.\n/**\n * @deprecated Use object-style configuration instead.\n */\ntype AsHTMLDeprecatedTupleConfig = [\n\tlinkResolver?: LinkResolverFunction | null,\n\tserializer?: HTMLRichTextSerializer | null,\n];\n\n/**\n * The return type of `asHTML()`.\n */\ntype AsHTMLReturnType<Field extends RichTextField | null | undefined> =\n\tField extends RichTextField ? string : null;\n\n// TODO: Remove overload when we remove support for deprecated tuple-style configuration.\nexport const asHTML: {\n\t/**\n\t * Serializes a rich text or title field to an HTML string.\n\t *\n\t * @param richTextField - A rich text or title field from Prismic\n\t * @param config - Configuration that determines the output of `asHTML()`\n\t *\n\t * @returns HTML equivalent of the provided rich text or title field\n\t *\n\t * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/template-content-vanilla-javascript#rich-text-and-title}\n\t */\n\t<Field extends RichTextField | null | undefined>(\n\t\trichTextField: Field,\n\t\tconfig?: AsHTMLConfig,\n\t): AsHTMLReturnType<Field>;\n\n\t/**\n\t * Serializes a rich text or title field to an HTML string.\n\t *\n\t * @deprecated Use object-style configuration instead.\n\t *\n\t *   ```ts\n\t *   asHTML(field);\n\t *   asHTML(field, { linkResolver });\n\t *   asHTML(field, { serializer });\n\t *   asHTML(field, { linkResolver, serializer });\n\t *   ```\n\t * @param richTextField - A rich text or title field from Prismic\n\t * @param linkResolver - An optional link resolver function to resolve links,\n\t *   without it you're expected to use the `routes` options from the API\n\t * @param serializer - An optional rich text serializer, unhandled cases will\n\t *   fallback to the default serializer\n\t *\n\t * @returns HTML equivalent of the provided rich text or title field\n\t *\n\t * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/template-content-vanilla-javascript#rich-text-and-title}\n\t */\n\t<Field extends RichTextField | null | undefined>(\n\t\trichTextField: Field,\n\t\t...config: AsHTMLDeprecatedTupleConfig\n\t): AsHTMLReturnType<Field>;\n} = <Field extends RichTextField | null | undefined>(\n\trichTextField: Field,\n\t// TODO: Rename to `config` when we remove support for deprecated tuple-style configuration.\n\t...configObjectOrTuple: [config?: AsHTMLConfig] | AsHTMLDeprecatedTupleConfig\n): AsHTMLReturnType<Field> => {\n\tif (richTextField) {\n\t\t// TODO: Remove when we remove support for deprecated tuple-style configuration.\n\t\tconst [configObjectOrLinkResolver, maybeSerializer] = configObjectOrTuple;\n\t\tlet config: AsHTMLConfig;\n\t\tif (\n\t\t\ttypeof configObjectOrLinkResolver === \"function\" ||\n\t\t\tconfigObjectOrLinkResolver == null\n\t\t) {\n\t\t\tconfig = {\n\t\t\t\tlinkResolver: configObjectOrLinkResolver,\n\t\t\t\tserializer: maybeSerializer,\n\t\t\t};\n\t\t} else {\n\t\t\tconfig = { ...configObjectOrLinkResolver };\n\t\t}\n\n\t\tlet serializer: RichTextFunctionSerializer<string>;\n\t\tif (config.serializer) {\n\t\t\tserializer = composeSerializers(\n\t\t\t\ttypeof config.serializer === \"object\"\n\t\t\t\t\t? wrapMapSerializerWithStringChildren(config.serializer)\n\t\t\t\t\t: (type, node, text, children, key) =>\n\t\t\t\t\t\t\t// TypeScript doesn't narrow the type correctly here since it is now in a callback function, so we have to cast it here.\n\t\t\t\t\t\t\t(config.serializer as HTMLRichTextFunctionSerializer)(\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\t\tchildren.join(\"\"),\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t),\n\t\t\t\tcreateDefaultHTMLRichTextSerializer(config.linkResolver),\n\t\t\t);\n\t\t} else {\n\t\t\tserializer = createDefaultHTMLRichTextSerializer(config.linkResolver);\n\t\t}\n\n\t\treturn serialize(richTextField, serializer).join(\n\t\t\t\"\",\n\t\t) as AsHTMLReturnType<Field>;\n\t} else {\n\t\treturn null as AsHTMLReturnType<Field>;\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}