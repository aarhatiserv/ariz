{"ast":null,"code":"import { useStatefulPrismicClientMethod } from \"./useStatefulPrismicClientMethod.js\";\nconst usePrismicDocuments = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return useStatefulPrismicClientMethod(\"get\", args);\n};\nconst useFirstPrismicDocument = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return useStatefulPrismicClientMethod(\"getFirst\", args);\n};\nconst useAllPrismicDocumentsDangerously = function () {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return useStatefulPrismicClientMethod(\"dangerouslyGetAll\", args);\n};\nconst usePrismicDocumentByID = function () {\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n  return useStatefulPrismicClientMethod(\"getByID\", args);\n};\nconst usePrismicDocumentsByIDs = function () {\n  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    args[_key5] = arguments[_key5];\n  }\n  return useStatefulPrismicClientMethod(\"getByIDs\", args);\n};\nconst useAllPrismicDocumentsByIDs = function () {\n  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    args[_key6] = arguments[_key6];\n  }\n  return useStatefulPrismicClientMethod(\"getAllByIDs\", args);\n};\nconst usePrismicDocumentByUID = function () {\n  for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    args[_key7] = arguments[_key7];\n  }\n  return useStatefulPrismicClientMethod(\"getByUID\", args);\n};\nconst usePrismicDocumentsByUIDs = function () {\n  for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n    args[_key8] = arguments[_key8];\n  }\n  return useStatefulPrismicClientMethod(\"getByUIDs\", args);\n};\nconst useAllPrismicDocumentsByUIDs = function () {\n  for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    args[_key9] = arguments[_key9];\n  }\n  return useStatefulPrismicClientMethod(\"getAllByUIDs\", args);\n};\nconst useSinglePrismicDocument = function () {\n  for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n    args[_key10] = arguments[_key10];\n  }\n  return useStatefulPrismicClientMethod(\"getSingle\", args);\n};\nconst usePrismicDocumentsByType = function () {\n  for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n    args[_key11] = arguments[_key11];\n  }\n  return useStatefulPrismicClientMethod(\"getByType\", args);\n};\nconst useAllPrismicDocumentsByType = function () {\n  for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n    args[_key12] = arguments[_key12];\n  }\n  return useStatefulPrismicClientMethod(\"getAllByType\", args);\n};\nconst usePrismicDocumentsByTag = function () {\n  for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n    args[_key13] = arguments[_key13];\n  }\n  return useStatefulPrismicClientMethod(\"getByTag\", args);\n};\nconst useAllPrismicDocumentsByTag = function () {\n  for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n    args[_key14] = arguments[_key14];\n  }\n  return useStatefulPrismicClientMethod(\"getAllByTag\", args);\n};\nconst usePrismicDocumentsBySomeTags = function () {\n  for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n    args[_key15] = arguments[_key15];\n  }\n  return useStatefulPrismicClientMethod(\"getBySomeTags\", args);\n};\nconst useAllPrismicDocumentsBySomeTags = function () {\n  for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n    args[_key16] = arguments[_key16];\n  }\n  return useStatefulPrismicClientMethod(\"getAllBySomeTags\", args);\n};\nconst usePrismicDocumentsByEveryTag = function () {\n  for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n    args[_key17] = arguments[_key17];\n  }\n  return useStatefulPrismicClientMethod(\"getByEveryTag\", args);\n};\nconst useAllPrismicDocumentsByEveryTag = function () {\n  for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n    args[_key18] = arguments[_key18];\n  }\n  return useStatefulPrismicClientMethod(\"getAllByEveryTag\", args);\n};\nexport { useAllPrismicDocumentsByEveryTag, useAllPrismicDocumentsByIDs, useAllPrismicDocumentsBySomeTags, useAllPrismicDocumentsByTag, useAllPrismicDocumentsByType, useAllPrismicDocumentsByUIDs, useAllPrismicDocumentsDangerously, useFirstPrismicDocument, usePrismicDocumentByID, usePrismicDocumentByUID, usePrismicDocuments, usePrismicDocumentsByEveryTag, usePrismicDocumentsByIDs, usePrismicDocumentsBySomeTags, usePrismicDocumentsByTag, usePrismicDocumentsByType, usePrismicDocumentsByUIDs, useSinglePrismicDocument };","map":{"version":3,"names":["usePrismicDocuments","_len","arguments","length","args","Array","_key","useStatefulPrismicClientMethod","useFirstPrismicDocument","_len2","_key2","useAllPrismicDocumentsDangerously","_len3","_key3","usePrismicDocumentByID","_len4","_key4","usePrismicDocumentsByIDs","_len5","_key5","useAllPrismicDocumentsByIDs","_len6","_key6","usePrismicDocumentByUID","_len7","_key7","usePrismicDocumentsByUIDs","_len8","_key8","useAllPrismicDocumentsByUIDs","_len9","_key9","useSinglePrismicDocument","_len10","_key10","usePrismicDocumentsByType","_len11","_key11","useAllPrismicDocumentsByType","_len12","_key12","usePrismicDocumentsByTag","_len13","_key13","useAllPrismicDocumentsByTag","_len14","_key14","usePrismicDocumentsBySomeTags","_len15","_key15","useAllPrismicDocumentsBySomeTags","_len16","_key16","usePrismicDocumentsByEveryTag","_len17","_key17","useAllPrismicDocumentsByEveryTag","_len18","_key18"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\clientHooks.ts"],"sourcesContent":["import type * as prismic from \"@prismicio/client\";\n\nimport {\n\tClientHookReturnType,\n\tClientMethodParameters,\n\tHookOnlyParameters,\n\tuseStatefulPrismicClientMethod,\n} from \"./useStatefulPrismicClientMethod\";\n\n/**\n * A hook that queries content from the Prismic repository.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.get}\n */\nexport const usePrismicDocuments = <TDocument extends prismic.PrismicDocument>(\n\t...args: [params?: ClientMethodParameters<\"get\">[0] & HookOnlyParameters]\n): ClientHookReturnType<prismic.Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"get\", args);\n\n/**\n * A hook that queries content from the Prismic repository and returns only the\n * first result, if any.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of the Prismic document returned\n *\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getFirst}\n */\nexport const useFirstPrismicDocument = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [params?: ClientMethodParameters<\"getFirst\">[0] & HookOnlyParameters]\n): ClientHookReturnType<TDocument> =>\n\tuseStatefulPrismicClientMethod(\"getFirst\", args);\n\n/**\n * A hook that queries content from the Prismic repository and returns all\n * matching content. If no predicates are provided, all documents will be\n * fetched.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getAll}\n */\nexport const useAllPrismicDocumentsDangerously = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\tparams?: ClientMethodParameters<\"dangerouslyGetAll\">[0] &\n\t\t\tHookOnlyParameters,\n\t]\n): ClientHookReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"dangerouslyGetAll\", args);\n\n/**\n * A hook that queries a document from the Prismic repository with a specific\n * ID.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of the Prismic document returned\n *\n * @param id - ID of the document\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getByID}\n */\nexport const usePrismicDocumentByID = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\tid: ClientMethodParameters<\"getByID\">[0],\n\t\tparams?: ClientMethodParameters<\"getByID\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<TDocument> =>\n\tuseStatefulPrismicClientMethod(\"getByID\", args);\n\n/**\n * A hook that queries documents from the Prismic repository with specific IDs.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param ids - A list of document IDs\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getByIDs}\n */\nexport const usePrismicDocumentsByIDs = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\tid: ClientMethodParameters<\"getByIDs\">[0],\n\t\tparams?: ClientMethodParameters<\"getByIDs\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<prismic.Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getByIDs\", args);\n\n/**\n * A hook that queries all documents from the Prismic repository with specific\n * IDs.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param ids - A list of document IDs\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getAllByIDs}\n */\nexport const useAllPrismicDocumentsByIDs = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\tid: ClientMethodParameters<\"getAllByIDs\">[0],\n\t\tparams?: ClientMethodParameters<\"getAllByIDs\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllByIDs\", args);\n\n/**\n * A hook that queries a document from the Prismic repository with a specific\n * UID and Custom Type.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of the Prismic document returned\n *\n * @param documentType - The API ID of the document's Custom Type\n * @param uid - UID of the document\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getByUID}\n */\nexport const usePrismicDocumentByUID = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getByUID\">[0],\n\t\tuid: ClientMethodParameters<\"getByUID\">[1],\n\t\tparams?: ClientMethodParameters<\"getByUID\">[2] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<TDocument> =>\n\tuseStatefulPrismicClientMethod(\"getByUID\", args);\n\n/**\n * A hook that queries documents from the Prismic repository with specific UIDs\n * of a Custom Type.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of the Prismic document returned\n *\n * @param documentType - The API ID of the document's Custom Type\n * @param uids - A list of document UIDs.\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getByUID}\n */\nexport const usePrismicDocumentsByUIDs = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getByUIDs\">[0],\n\t\tuids: ClientMethodParameters<\"getByUIDs\">[1],\n\t\tparams?: ClientMethodParameters<\"getByUIDs\">[2] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<prismic.Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getByUIDs\", args);\n\n/**\n * A hook that queries all documents from the Prismic repository with specific\n * UIDs of a Custom Type.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of the Prismic document returned\n *\n * @param documentType - The API ID of the document's Custom Type\n * @param uids - A list of document UIDs.\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getByUID}\n */\nexport const useAllPrismicDocumentsByUIDs = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getByUIDs\">[0],\n\t\tuids: ClientMethodParameters<\"getByUIDs\">[1],\n\t\tparams?: ClientMethodParameters<\"getByUIDs\">[2] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllByUIDs\", args);\n\n/**\n * A hook that queries a singleton document from the Prismic repository for a\n * specific Custom Type.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of the Prismic document returned\n *\n * @param documentType - The API ID of the singleton Custom Type\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getSingle}\n */\nexport const useSinglePrismicDocument = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getSingle\">[0],\n\t\tparams?: ClientMethodParameters<\"getSingle\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<TDocument> =>\n\tuseStatefulPrismicClientMethod(\"getSingle\", args);\n\n/**\n * A hook that queries documents from the Prismic repository for a specific\n * Custom Type.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param documentType - The API ID of the Custom Type\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getByType}\n */\nexport const usePrismicDocumentsByType = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getByType\">[0],\n\t\tparams?: ClientMethodParameters<\"getByType\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<prismic.Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getByType\", args);\n\n/**\n * A hook that queries all documents from the Prismic repository for a specific\n * Custom Type.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param documentType - The API ID of the Custom Type\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getAllByType}\n */\nexport const useAllPrismicDocumentsByType = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\tdocumentType: ClientMethodParameters<\"getAllByType\">[0],\n\t\tparams?: ClientMethodParameters<\"getAllByType\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllByType\", args);\n\n/**\n * A hook that queries documents from the Prismic repository with a specific\n * tag.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tag - The tag that must be included on a document\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getByTag}\n */\nexport const usePrismicDocumentsByTag = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\ttag: ClientMethodParameters<\"getByTag\">[0],\n\t\tparams?: ClientMethodParameters<\"getByTag\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<prismic.Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getByTag\", args);\n\n/**\n * A hook that queries all documents from the Prismic repository with a specific\n * tag.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tag - The tag that must be included on a document\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getAllByTag}\n */\nexport const useAllPrismicDocumentsByTag = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\ttag: ClientMethodParameters<\"getAllByTag\">[0],\n\t\tparams?: ClientMethodParameters<\"getAllByTag\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllByTag\", args);\n\n/**\n * A hook that queries documents from the Prismic repository with specific tags.\n * A document must be tagged with at least one of the queried tags to be\n * included.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tags - A list of tags that must be included on a document\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getByTags}\n */\nexport const usePrismicDocumentsBySomeTags = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\ttag: ClientMethodParameters<\"getBySomeTags\">[0],\n\t\tparams?: ClientMethodParameters<\"getBySomeTags\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<prismic.Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getBySomeTags\", args);\n\n/**\n * A hook that queries all documents from the Prismic repository with specific\n * tags. A document must be tagged with at least one of the queried tags to be\n * included.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tags - A list of tags that must be included on a document\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getAllByTags}\n */\nexport const useAllPrismicDocumentsBySomeTags = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\ttag: ClientMethodParameters<\"getAllBySomeTags\">[0],\n\t\tparams?: ClientMethodParameters<\"getAllBySomeTags\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllBySomeTags\", args);\n\n/**\n * A hook that queries documents from the Prismic repository with specific tags.\n * A document must be tagged with all of the queried tags to be included.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tags - A list of tags that must be included on a document\n * @param params - Parameters to filter, sort, and paginate results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getByTags}\n */\nexport const usePrismicDocumentsByEveryTag = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\ttag: ClientMethodParameters<\"getByEveryTag\">[0],\n\t\tparams?: ClientMethodParameters<\"getByEveryTag\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<prismic.Query<TDocument>> =>\n\tuseStatefulPrismicClientMethod(\"getByEveryTag\", args);\n\n/**\n * A hook that queries all documents from the Prismic repository with specific\n * tags. A document must be tagged with all of the queried tags to be included.\n *\n * @remarks\n * An additional `@prismicio/client` instance can be provided at\n * `params.client`.\n * @typeParam TDocument - Type of Prismic documents returned\n *\n * @param tags - A list of tags that must be included on a document\n * @param params - Parameters to filter and sort results\n *\n * @returns The composable payload {@link ClientHookReturnType}\n *\n * @see Underlying `@prismicio/client` method {@link proto.getAllByTags}\n */\nexport const useAllPrismicDocumentsByEveryTag = <\n\tTDocument extends prismic.PrismicDocument,\n>(\n\t...args: [\n\t\ttag: ClientMethodParameters<\"getAllByEveryTag\">[0],\n\t\tparams?: ClientMethodParameters<\"getAllByEveryTag\">[1] & HookOnlyParameters,\n\t]\n): ClientHookReturnType<TDocument[]> =>\n\tuseStatefulPrismicClientMethod(\"getAllByEveryTag\", args);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}