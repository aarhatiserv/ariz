{"ast":null,"code":"import { PrismicError } from \"./errors/PrismicError.js\";\nimport { isRepositoryName } from \"./isRepositoryName.js\";\nvar getToolbarSrc = function getToolbarSrc(repositoryName) {\n  if (isRepositoryName(repositoryName)) {\n    return \"https://static.cdn.prismic.io/prismic.js?new=true&repo=\".concat(repositoryName);\n  } else {\n    throw new PrismicError(\"An invalid Prismic repository name was given: \".concat(repositoryName), void 0, void 0);\n  }\n};\nexport { getToolbarSrc };","map":{"version":3,"names":["getToolbarSrc","repositoryName","isRepositoryName","concat","PrismicError"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\getToolbarSrc.ts"],"sourcesContent":["import { PrismicError } from \"./errors/PrismicError\";\n\nimport { isRepositoryName } from \"./isRepositoryName\";\n\n/**\n * Returns the URL for a Prismic repository's Prismic Toolbar script. Use the\n * URL to inject the script into your app.\n *\n * @example\n *\n * ```typescriptreact\n * // In Next.js apps, use `next/script` in your `app/layout.tsx` file.\n *\n * import Script from \"next/script\";\n * import * as prismic from \"@prismicio/client\";\n *\n * export default function RootLayout({\n * \tchildren,\n * }: {\n * \tchildren: React.ReactNode,\n * }) {\n * \tconst toolbarSrc = prismic.getToolbarSrc(\"my-repo\");\n *\n * \treturn (\n * \t\t<html lang=\"en\">\n * \t\t\t<body>{children}</body>\n * \t\t\t<Script src={toolbarSrc} />\n * \t\t</html>\n * \t);\n * }\n * ```\n *\n * @param repositoryName - The name of the Prismic repository. For example,\n *   `\"my-repo\"` if the repository URL is `my-repo.prismic.io`.\n *\n * @returns The URL for the given Prismic repository's Prismic Toolbar script.\n */\nexport const getToolbarSrc = <TRepositoryName extends string>(\n\trepositoryName: TRepositoryName,\n): `https://static.cdn.prismic.io/prismic.js?new=true&repo=${TRepositoryName}` => {\n\tif (isRepositoryName(repositoryName)) {\n\t\treturn `https://static.cdn.prismic.io/prismic.js?new=true&repo=${repositoryName}` as const;\n\t} else {\n\t\tthrow new PrismicError(\n\t\t\t`An invalid Prismic repository name was given: ${repositoryName}`,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t);\n\t}\n};\n"],"mappings":";;AAqCa,IAAAA,aAAA,GAAgB,SAAhBA,cACZC,cAAA,EACgF;EAC5E,IAAAC,gBAAA,CAAiBD,cAAc,GAAG;IACrC,iEAAAE,MAAA,CAAiEF,cAAA;EAAA,OAC3D;IACN,MAAM,IAAIG,YAAA,kDAAAD,MAAA,CACwCF,cAAA,GACjD,QACA,MAAS;EAEV;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}