{"ast":null,"code":"'use client';\n'use client';\n\nimport * as React from \"react\";\nimport { getToolbarSrc } from './_node_modules/@prismicio/client/dist/getToolbarSrc.js';\nimport \"@prismicio/richtext\";\nconst PrismicToolbar = _ref => {\n  let {\n    repositoryName\n  } = _ref;\n  const src = getToolbarSrc(repositoryName);\n  React.useEffect(() => {\n    const existingScript = document.querySelector(`script[src=\"${src}\"]`);\n    if (!existingScript) {\n      const script = document.createElement(\"script\");\n      script.src = src;\n      script.defer = true;\n      script.dataset.prismicToolbar = \"\";\n      script.dataset.repositoryName = repositoryName;\n      if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"test\") {\n        script._evaluateScript = false;\n      }\n      document.body.appendChild(script);\n    }\n  }, [repositoryName, src]);\n  return null;\n};\nexport { PrismicToolbar };","map":{"version":3,"names":["PrismicToolbar","_ref","repositoryName","src","getToolbarSrc","React","useEffect","existingScript","document","querySelector","script","createElement","defer","dataset","prismicToolbar","process","env","NODE_ENV","_evaluateScript","body","appendChild"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz-garments-mern\\ariz\\Frontend\\node_modules\\@prismicio\\src\\PrismicToolbar.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport { getToolbarSrc } from \"@prismicio/client\";\n\n/**\n * Props for `<PrismicToolbar>`.\n */\nexport type PrismicToolbarProps = {\n\t/**\n\t * The name of the Prismic repository. For example, `\"my-repo\"` if the\n\t * repository URL is `my-repo.prismic.io`.\n\t */\n\trepositoryName: string;\n\n\t/**\n\t * The type of toolbar needed for the repository. Defaults to `\"new\"`.\n\t *\n\t * @deprecated All repositories use the \"new\"-type toolbar. This option can be\n\t *   removed.\n\t * @see To check which version you need, view the Prismic Toolbar documentation {@link https://prismic.io/docs/technologies/previews-and-the-prismic-toolbar-reactjs}\n\t */\n\ttype?: \"new\" | \"legacy\";\n};\n\n/**\n * React component that injects the Prismic Toolbar into the app. This component\n * can be placed anywhere in the React tree.\n */\nexport const PrismicToolbar = ({\n\trepositoryName,\n}: PrismicToolbarProps): null => {\n\tconst src = getToolbarSrc(repositoryName);\n\n\tReact.useEffect(() => {\n\t\tconst existingScript = document.querySelector(`script[src=\"${src}\"]`);\n\n\t\tif (!existingScript) {\n\t\t\tconst script = document.createElement(\"script\");\n\t\t\tscript.src = src;\n\t\t\tscript.defer = true;\n\n\t\t\t// Used to distinguish the toolbar element from other elements.\n\t\t\tscript.dataset.prismicToolbar = \"\";\n\t\t\tscript.dataset.repositoryName = repositoryName;\n\n\t\t\t// Disable Happy DOM `<script>` evaluation during\n\t\t\t// tests.\n\t\t\t//\n\t\t\t// This is a patch ONLY INCLUDED DURING TESTS. It will\n\t\t\t// be pruned during code minification in non-test\n\t\t\t// environments.\n\t\t\t//\n\t\t\t// @see https://github.com/capricorn86/happy-dom/blob/02ae081e36f990c06171eda44f9d885fd9413d73/packages/happy-dom/src/nodes/html-script-element/HTMLScriptElement.ts#L191-L209\n\t\t\tif (typeof process !== \"undefined\" && process.env.NODE_ENV === \"test\") {\n\t\t\t\t// @ts-expect-error - `_evaluateScript` is a Happy DOM-specific property.\n\t\t\t\tscript._evaluateScript = false;\n\t\t\t}\n\n\t\t\tdocument.body.appendChild(script);\n\t\t}\n\t}, [repositoryName, src]);\n\n\treturn null;\n};\n"],"mappings":";;;;;;AA6BO,MAAAA,cAAA,GAAAC,IAAA;EAAA;IAAAC;EAAA,IAAAD,IAAA;EAGA,MAAAE,GAAA,GAAAC,aAAA,CAAAF,cAAA;EAENG,KAAA,CAAAC,SAAA;IACC,MAAAC,cAAA,GAAAC,QAAA,CAAAC,aAAA,gBAAAN,GAAA;IAEA,KAAAI,cAAA;MACO,MAAAG,MAAA,GAAAF,QAAA,CAAAG,aAAA;MACND,MAAA,CAAAP,GAAA,GAAAA,GAAA;MACAO,MAAA,CAAAE,KAAA;MAGAF,MAAA,CAAAG,OAAA,CAAAC,cAAA;MACAJ,MAAA,CAAAG,OAAA,CAAAX,cAAA,GAAAA,cAAA;MAUA,WAAAa,OAAA,oBAAAA,OAAA,CAAAC,GAAA,CAAAC,QAAA;QAECP,MAAA,CAAAQ,eAAA;MAAyB;MAGjBV,QAAA,CAAAW,IAAA,CAAAC,WAAA,CAAAV,MAAA;IAAuB;EAChC,IAAAR,cAAA,EAAAC,GAAA;EAGK;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}