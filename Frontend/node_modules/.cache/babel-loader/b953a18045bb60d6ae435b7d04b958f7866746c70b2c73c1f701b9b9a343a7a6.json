{"ast":null,"code":"import { RichTextReversedNodeType } from \"./types.js\";\nconst wrapMapSerializer = mapSerializer => {\n  return (type, node, text, children, key) => {\n    const tagSerializer = mapSerializer[RichTextReversedNodeType[type] || type];\n    if (tagSerializer) {\n      return tagSerializer({\n        // @ts-expect-error cannot type check here\n        type,\n        // @ts-expect-error cannot type check here\n        node,\n        // @ts-expect-error cannot type check here\n        text,\n        // @ts-expect-error cannot type check here\n        children,\n        // @ts-expect-error cannot type check here\n        key\n      });\n    }\n  };\n};\nexport { wrapMapSerializer };","map":{"version":3,"names":["wrapMapSerializer","mapSerializer","type","node","text","children","key","tagSerializer","RichTextReversedNodeType"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz-garments-mern\\ariz\\Frontend\\node_modules\\@prismicio\\src\\wrapMapSerializer.ts"],"sourcesContent":["import {\n\tRichTextFunctionSerializer,\n\tRichTextMapSerializer,\n\tRichTextReversedNodeType,\n} from \"./types\";\n\n/**\n * Wraps a map serializer into a regular function serializer\n *\n * @remarks\n * This is a low level helper mainly intended to be used by higher level\n * packages Most users aren't expected to this function directly\n * @typeParam SerializerReturnType - Return type of the map serializer\n * @param mapSerializer - Map serializer to wrap\n *\n * @returns A regular function serializer\n */\nexport const wrapMapSerializer = <SerializerReturnType>(\n\tmapSerializer: RichTextMapSerializer<SerializerReturnType>,\n): RichTextFunctionSerializer<SerializerReturnType> => {\n\treturn (type, node, text, children, key) => {\n\t\tconst tagSerializer: RichTextMapSerializer<SerializerReturnType>[keyof RichTextMapSerializer<SerializerReturnType>] =\n\t\t\tmapSerializer[\n\t\t\t\t(RichTextReversedNodeType[\n\t\t\t\t\ttype as keyof typeof RichTextReversedNodeType\n\t\t\t\t] || type) as keyof RichTextMapSerializer<SerializerReturnType>\n\t\t\t];\n\n\t\tif (tagSerializer) {\n\t\t\treturn tagSerializer({\n\t\t\t\t// @ts-expect-error cannot type check here\n\t\t\t\ttype,\n\t\t\t\t// @ts-expect-error cannot type check here\n\t\t\t\tnode,\n\t\t\t\t// @ts-expect-error cannot type check here\n\t\t\t\ttext,\n\t\t\t\t// @ts-expect-error cannot type check here\n\t\t\t\tchildren,\n\t\t\t\t// @ts-expect-error cannot type check here\n\t\t\t\tkey,\n\t\t\t});\n\t\t}\n\t};\n};\n"],"mappings":";AAiBa,MAAAA,iBAAA,GACZC,aAAA,IACqD;EACrD,OAAO,CAACC,IAAA,EAAMC,IAAA,EAAMC,IAAA,EAAMC,QAAA,EAAUC,GAAA,KAAO;IAC1C,MAAMC,aAAA,GACLN,aAAA,CACEO,wBAAA,CACAN,IAA6C,KACzCA,IAA0D;IAGjE,IAAIK,aAAA,EAAe;MAClB,OAAOA,aAAA,CAAc;QAAA;QAEpBL,IAAA;QAAA;QAEAC,IAAA;QAAA;QAEAC,IAAA;QAAA;QAEAC,QAAA;QAAA;QAEAC;MAAA,CACA;IACD;EAAA;AAEH"},"metadata":{},"sourceType":"module","externalDependencies":[]}