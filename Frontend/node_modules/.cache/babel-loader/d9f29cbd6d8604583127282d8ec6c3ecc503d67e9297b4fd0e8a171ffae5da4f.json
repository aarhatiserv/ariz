{"ast":null,"code":"import { PrismicError } from \"./errors/PrismicError.js\";\nimport { isRepositoryName } from \"./isRepositoryName.js\";\nconst getGraphQLEndpoint = repositoryName => {\n  if (isRepositoryName(repositoryName)) {\n    return `https://${repositoryName}.cdn.prismic.io/graphql`;\n  } else {\n    throw new PrismicError(`An invalid Prismic repository name was given: ${repositoryName}`, void 0, void 0);\n  }\n};\nexport { getGraphQLEndpoint };","map":{"version":3,"names":["getGraphQLEndpoint","repositoryName","isRepositoryName","PrismicError"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz\\Frontend\\node_modules\\@prismicio\\src\\getGraphQLEndpoint.ts"],"sourcesContent":["import { PrismicError } from \"./errors/PrismicError\";\n\nimport { isRepositoryName } from \"./isRepositoryName\";\n\n/**\n * Get a repository's Prismic GraphQL endpoint.\n *\n * @typeParam RepositoryName - Name of the Prismic repository.\n *\n * @param repositoryName - Name of the repository.\n *\n * @returns The repository's Prismic REST API V2 endpoint\n */\nexport const getGraphQLEndpoint = <RepositoryName extends string>(\n\trepositoryName: RepositoryName,\n): `https://${RepositoryName}.cdn.prismic.io/graphql` => {\n\tif (isRepositoryName(repositoryName)) {\n\t\treturn `https://${repositoryName}.cdn.prismic.io/graphql` as const;\n\t} else {\n\t\tthrow new PrismicError(\n\t\t\t`An invalid Prismic repository name was given: ${repositoryName}`,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t);\n\t}\n};\n"],"mappings":";;AAaa,MAAAA,kBAAA,GACZC,cAAA,IACuD;EACnD,IAAAC,gBAAA,CAAiBD,cAAc,GAAG;IACrC,OAAO,WAAWA,cAAA;EAAA,OACZ;IACN,MAAM,IAAIE,YAAA,CACT,iDAAiDF,cAAA,IACjD,QACA,MAAS;EAEV;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}