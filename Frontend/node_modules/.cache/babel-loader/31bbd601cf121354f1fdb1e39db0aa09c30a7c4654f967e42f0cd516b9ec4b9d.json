{"ast":null,"code":"const camelCaseToParamCase = input => {\n  return input.replace(/[A-Z]/g, match => {\n    return `-${match.toLowerCase()}`;\n  });\n};\nconst buildURL = (url, params) => {\n  const instance = new URL(url);\n  for (const camelCasedParamKey in params) {\n    const paramKey = camelCaseToParamCase(camelCasedParamKey);\n    const paramValue = params[camelCasedParamKey];\n    if (paramValue === void 0) {\n      instance.searchParams.delete(paramKey);\n    } else if (Array.isArray(paramValue)) {\n      instance.searchParams.set(paramKey, paramValue.join(\",\"));\n    } else {\n      instance.searchParams.set(paramKey, `${paramValue}`);\n    }\n  }\n  const s = instance.searchParams.get(\"s\");\n  if (s) {\n    instance.searchParams.delete(\"s\");\n    instance.searchParams.append(\"s\", s);\n  }\n  return instance.toString();\n};\nconst buildPixelDensitySrcSet = (url, _ref) => {\n  let {\n    pixelDensities,\n    ...params\n  } = _ref;\n  return pixelDensities.map(dpr => {\n    return `${buildURL(url, {\n      ...params,\n      dpr\n    })} ${dpr}x`;\n  }).join(\", \");\n};\nconst buildWidthSrcSet = (url, _ref2) => {\n  let {\n    widths,\n    ...params\n  } = _ref2;\n  return widths.map(width => {\n    return `${buildURL(url, {\n      ...params,\n      w: void 0,\n      width\n    })} ${width}w`;\n  }).join(\", \");\n};\nexport { buildPixelDensitySrcSet, buildURL, buildWidthSrcSet };","map":{"version":3,"names":["camelCaseToParamCase","input","replace","match","toLowerCase","buildURL","url","params","instance","URL","camelCasedParamKey","paramKey","paramValue","searchParams","delete","Array","isArray","set","join","s","get","append","toString","buildPixelDensitySrcSet","_ref","pixelDensities","map","dpr","buildWidthSrcSet","_ref2","widths","width","w"],"sources":["E:\\Aarhat Iserv - E-commerce\\new\\ariz-garments-mern\\ariz\\Frontend\\node_modules\\@prismicio\\react\\node_modules\\imgix-url-builder\\dist\\index.mjs"],"sourcesContent":["const camelCaseToParamCase = (input) => {\n  return input.replace(/[A-Z]/g, (match) => {\n    return `-${match.toLowerCase()}`;\n  });\n};\nconst buildURL = (url, params) => {\n  const instance = new URL(url);\n  for (const camelCasedParamKey in params) {\n    const paramKey = camelCaseToParamCase(camelCasedParamKey);\n    const paramValue = params[camelCasedParamKey];\n    if (paramValue === void 0) {\n      instance.searchParams.delete(paramKey);\n    } else if (Array.isArray(paramValue)) {\n      instance.searchParams.set(paramKey, paramValue.join(\",\"));\n    } else {\n      instance.searchParams.set(paramKey, `${paramValue}`);\n    }\n  }\n  const s = instance.searchParams.get(\"s\");\n  if (s) {\n    instance.searchParams.delete(\"s\");\n    instance.searchParams.append(\"s\", s);\n  }\n  return instance.toString();\n};\n\nconst buildPixelDensitySrcSet = (url, { pixelDensities, ...params }) => {\n  return pixelDensities.map((dpr) => {\n    return `${buildURL(url, { ...params, dpr })} ${dpr}x`;\n  }).join(\", \");\n};\n\nconst buildWidthSrcSet = (url, { widths, ...params }) => {\n  return widths.map((width) => {\n    return `${buildURL(url, { ...params, w: void 0, width })} ${width}w`;\n  }).join(\", \");\n};\n\nclass Client {\n  constructor(options) {\n    this.baseURL = options.baseURL;\n  }\n  buildURLForPath(path, params = {}) {\n    return buildURL(`${new URL(path, this.baseURL)}`, params);\n  }\n  buildWidthSrcSetForPath(path, params) {\n    return buildWidthSrcSet(`${new URL(path, this.baseURL)}`, params);\n  }\n  buildPixelDensitySrcSetForPath(path, params) {\n    return buildPixelDensitySrcSet(`${new URL(path, this.baseURL)}`, params);\n  }\n}\n\nexport { Client, buildPixelDensitySrcSet, buildURL, buildWidthSrcSet };\n//# sourceMappingURL=index.mjs.map\n"],"mappings":"AAAA,MAAMA,oBAAA,GAAwBC,KAAA,IAAU;EACtC,OAAOA,KAAA,CAAMC,OAAA,CAAQ,UAAWC,KAAA,IAAU;IACxC,OAAO,IAAIA,KAAA,CAAMC,WAAA,CAAW;EAChC,CAAG;AACH;AACK,MAACC,QAAA,GAAWA,CAACC,GAAA,EAAKC,MAAA,KAAW;EAChC,MAAMC,QAAA,GAAW,IAAIC,GAAA,CAAIH,GAAG;EAC5B,WAAWI,kBAAA,IAAsBH,MAAA,EAAQ;IACvC,MAAMI,QAAA,GAAWX,oBAAA,CAAqBU,kBAAkB;IACxD,MAAME,UAAA,GAAaL,MAAA,CAAOG,kBAAkB;IAC5C,IAAIE,UAAA,KAAe,QAAQ;MACzBJ,QAAA,CAASK,YAAA,CAAaC,MAAA,CAAOH,QAAQ;IACtC,WAAUI,KAAA,CAAMC,OAAA,CAAQJ,UAAU,GAAG;MACpCJ,QAAA,CAASK,YAAA,CAAaI,GAAA,CAAIN,QAAA,EAAUC,UAAA,CAAWM,IAAA,CAAK,GAAG,CAAC;IAC9D,OAAW;MACLV,QAAA,CAASK,YAAA,CAAaI,GAAA,CAAIN,QAAA,EAAU,GAAGC,UAAA,EAAY;IACpD;EACF;EACD,MAAMO,CAAA,GAAIX,QAAA,CAASK,YAAA,CAAaO,GAAA,CAAI,GAAG;EACvC,IAAID,CAAA,EAAG;IACLX,QAAA,CAASK,YAAA,CAAaC,MAAA,CAAO,GAAG;IAChCN,QAAA,CAASK,YAAA,CAAaQ,MAAA,CAAO,KAAKF,CAAC;EACpC;EACD,OAAOX,QAAA,CAASc,QAAA;AAClB;AAEK,MAACC,uBAAA,GAA0BA,CAACjB,GAAA,EAAAkB,IAAA,KAAuC;EAAA,IAAlC;IAAEC,cAAA;IAAgB,GAAGlB;EAAM,IAAAiB,IAAA;EAC/D,OAAOC,cAAA,CAAeC,GAAA,CAAKC,GAAA,IAAQ;IACjC,OAAO,GAAGtB,QAAA,CAASC,GAAA,EAAK;MAAE,GAAGC,MAAA;MAAQoB;IAAG,CAAE,KAAKA,GAAA;EACnD,CAAG,EAAET,IAAA,CAAK,IAAI;AACd;AAEK,MAACU,gBAAA,GAAmBA,CAACtB,GAAA,EAAAuB,KAAA,KAA+B;EAAA,IAA1B;IAAEC,MAAA;IAAQ,GAAGvB;EAAM,IAAAsB,KAAA;EAChD,OAAOC,MAAA,CAAOJ,GAAA,CAAKK,KAAA,IAAU;IAC3B,OAAO,GAAG1B,QAAA,CAASC,GAAA,EAAK;MAAE,GAAGC,MAAA;MAAQyB,CAAA,EAAG;MAAQD;IAAK,CAAE,KAAKA,KAAA;EAChE,CAAG,EAAEb,IAAA,CAAK,IAAI;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}